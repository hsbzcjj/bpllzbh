--->|PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuLXVzIj4KIDxoZWFkPgogIDx0aXRsZT4KICAgW2FyZWExXVtta2V5MV1bc3ltYm9seF1bcGtleTFdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkMV1bYnJhY2tldGwxXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMV1bc3ltYm9seF1bYnJhY2tldGwyXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMl1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdCiAgPC90aXRsZT4KICA8bWV0YSBjb250ZW50PSJbYXJlYTFdW21rZXkxXVtzeW1ib2x4XVtwa2V5M11bc3ltYm9seF1bYXJlYTFdW2tleXdvcmQxXVticmFja2V0bDFdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxXVtzeW1ib2x4XVticmFja2V0bDJdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIyXVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF0iIG5hbWU9ImtleXdvcmRzIi8+CiAgPG1ldGEgY29udGVudD0iW2FyZWExXVtta2V5MV1bc3ltYm9seF1bcGtleTFdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkMV1bYnJhY2tldGwxXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMV1bc3ltYm9seF1bYnJhY2tldGwyXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMl1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdIiBwcm9wZXJ0eT0ib2c6dGl0bGUiLz4KICA8bWV0YSBjb250ZW50PSJbYXJlYTFdW21rZXkxXVtzeW1ib2x4XVtwa2V5NF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmQxXVticmFja2V0bDFdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxXVtzeW1ib2x4XVticmFja2V0bDJdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIyXVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF0iIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiLz4KICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIvPgogIDxtZXRhIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiIG5hbWU9InZpZXdwb3J0Ii8+CiAgPG1ldGEgY29udGVudD0iW2FyZWExXVtta2V5MV1bc3ltYm9seF1bcGtleTJdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkMV1bYnJhY2tldGwxXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMV1bc3ltYm9seF1bYnJhY2tldGwyXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMl1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdIiBuYW1lPSJkZXNjcmlwdGlvbiIvPgogIDxtZXRhIGNvbnRlbnQ9IlthcmVhMV1bbWtleTFdW3N5bWJvbHhdW3BrZXk0XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZDFdW2JyYWNrZXRsMV1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjFdW3N5bWJvbHhdW2JyYWNrZXRsMl1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjJdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XSIgcHJvcGVydHk9Im9nOnVybCI+CiAgIFthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYnJhY2tldGwxNF1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjE0XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2xpbmt4XVthcmVhMV1ba2V5d29yZHhdW2FocmVmXTxsaT5bcGtleXhdPC9saT4KICA8L21ldGE+CiAgPG1ldGEgY29udGVudD0icmVjaXBlIiBwcm9wZXJ0eT0ib2c6dHlwZSIvPgogIDxtZXRhIGNvbnRlbnQ9Imh0dHBzOi8vY2YtaW1hZ2VzLnVzLWVhc3QtMS5wcm9kLmJvbHRkbnMubmV0L3YxL3N0YXRpYy8xMDMzMjQ5MTQ0MDAxLzk1MmU0ODBiLTg4OWQtNDUyNy04ZjA2LTUzNzcyM2Y1ZjYwMC9kYzlmMDkyNS03ZmUzLTRlNDMtYWEzNC0xNGQ0ZjFmMThiMWQvMTI4MHg3MjAvbWF0Y2gvaW1hZ2UuanBnIiBwcm9wZXJ0eT0ib2c6aW1hZ2UiLz4KICA8bWV0YSBjb250ZW50PSI2NjEwMjQ1MDI2NiIgcHJvcGVydHk9ImZiOmFwcF9pZCIvPgogIDxtZXRhIGNvbnRlbnQ9IjcxMTU4NzQ4Mzc3IiBwcm9wZXJ0eT0iZmI6cGFnZXMiLz4KICA8bWV0YSBjb250ZW50PSIjZmZmZmZmIiBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIvPgogIDxtZXRhIGNvbnRlbnQ9IjJlZDAzZTg0LWExZTQtNGFkMy1hODg1LWM2MDY2NzhhYWU5ZSIgbmFtZT0iY29ycmVsYXRpb25JZCI+CiAgPC9tZXRhPgogPC9oZWFkPgogPGJvZHkgZGF0YS1zY29ieS1pbXByZXNzaW9uPSd7ImlkIjogIjMyODgiLCAiZXZlbnRUeXBlIjogIkFsbHJlY2lwZXMuVmlkZW8uUGFnZVZpZXciLCAiZXZlbnRDYXRlZ29yeSI6ICJQYWdlLlZpZXciLCAidmFsdWUiOiB7InVzZXIiOiB7ImxvZ2luU3RhdHVzIjoibm8iLCJ2aXNpdG9yVHlwZSI6ImFub255bW91cyJ9fX0nIG5nLWFwcD0iYWxscmVjaXBlcyI+CiAgPGEgaWQ9InRvcCI+CiAgPC9hPgogIFthaHJlZl0KICAKICBbYWhyZWZdCiAgCiAgPG5vc2NyaXB0PgogIDwvbm9zY3JpcHQ+CiAgPGRpdiBjbGFzcz0ic2xpZGVyLWNvbnRhaW5lciIgZ2xvYmFsLXVpLWV2ZW50cz0iIj4KICAgPGRpdiBjbGFzcz0ibGVhZGVyYm9hcmQtd3JhcHBlciIgZGF0YS1hZC1jb250YWluZXItYXV0b2NvbGxhcHNlPSIiIGlkPSJkb2NraW5nLWxlYWRlcmJvYXJkLWNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJkb2NraW5nLWxlYWRlcmJvYXJkLWNvbnRhaW5lciI+CiAgICAgPGRpdiBjbGFzcz0iZG9ja2luZy1sZWFkZXJib2FyZCIgZGF0YS10aWVyPSIxIiBpZD0iZGl2LWdwdC1sZWFkZXJib2FyZC1mbGV4LTEiPgogICAgICA8bGk+W2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVticmFja2V0bDEzXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMTNdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF08L2xpPjxsaT5bcGtleXhdPC9saT5bYWhyZWZdCiAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgPC9kaXY+CiAgIDxkaXYgY2xhc3M9InNpdGUtY29udGVudCI+CiAgICA8aGVhZGVyIGNsYXNzPSJoZWFkZXIgbmV3LW5hdiI+CiAgICAgPGRpdiBjbGFzcz0iYnJhbmNoLWpvdXJuZXlzLXRvcCI+CiAgICAgPC9kaXY+CiAgICAgPHNlY3Rpb24gY2xhc3M9Im1hZ2F6aW5lLWJhciI+CiAgICAgIDx1bCBjbGFzcz0ibWFnYXppbmUtYmFyX19zb2NpYWwiPgogICAgICAgPGxpPgogICAgICAgIEZvbGxvdyB1cyBvbjoKICAgICAgIDwvbGk+CiAgICAgICA8bGk+CiAgICAgICAgW2FocmVmXQogICAgICAgIAogICAgICAgPC9saT4KICAgICAgIDxsaT4KICAgICAgICBbYWhyZWZdCiAgICAgICAgCiAgICAgICA8L2xpPgogICAgICAgPGxpPgogICAgICAgIFthaHJlZl0KICAgICAgICAKICAgICAgIDwvbGk+CiAgICAgICA8bGk+CiAgICAgICAgW2FocmVmXQogICAgICAgIAogICAgICAgPC9saT4KICAgICAgPC91bD4KICAgICAgPGEgY2xhc3M9Im1hZ2F6aW5lLWJhcl9fbGluayIgZGF0YS1oZWFkZXItbGluay10cmFja2luZz0neyJsYWJlbCI6ICJNYWdhemluZSJ9JyBocmVmPSIvdXBwZXItbmF2IiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICBHZXQgdGhlIEFsbHJlY2lwZXMgbWFnYXppbmUKICAgICAgPC9hPgogICAgIDwvc2VjdGlvbj4KICAgICA8c2VjdGlvbiBuZy1jb250cm9sbGVyPSJhcl9jb250cm9sbGVyc190b3BfbmF2IiBuZy1pbml0PSJpbml0KCkiPgogICAgICA8dWwgY2xhc3M9ImFyLW5hdi1zZWN0aW9uIj4KICAgICAgIFthcmVhMV1bbWtleTFdW2FyZWExXVtta2V5MV1bYWhyZWZdW2FocmVmXVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYnJhY2tldGw4XVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyOF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYnJhY2tldGw5XVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyOV1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1bbWtleTFdW2FyZWExXVtrZXl3b3JkeF1bYXJlYTFdW2tleXdvcmR4XVthcmVhMV1bbWtleTFdW2xpbmt4XVtwa2V5eF1bYXJlYTFdW21rZXkxXVthcmVhMV1bbWtleTFdW2FyZWExXVtrZXl3b3JkeF1bcGtleXhdW2FyZWExXVtrZXl3b3JkeF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2JyYWNrZXRsMTBdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxMF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVtsaW5reF1bYXJlYTFdW2tleXdvcmR4XVthcmVhMV1bbWtleTFdW2FyZWExXVtrZXl3b3JkeF1bbGlua3hdCiAgICAgIDwvdWw+CiAgICAgIDxzb2NpYWwtbm90aWZpY2F0aW9uIG5nLWNsb2FrPSIiIHBvcHVwLXBhbmVsPSJub3RpZmljYXRpb25zIj4KICAgICAgPC9zb2NpYWwtbm90aWZpY2F0aW9uPgogICAgICA8ZGl2IGNsYXNzPSJuYXYtdGFiIG5hdi10YWJfX3NlYXJjaCBuZy1oaWRlIiBuZy1jbG9haz0iIiBwb3B1cC1wYW5lbD0idG9wTmF2U2VhcmNoTWVudSI+CiAgICAgICA8Zm9ybT4KICAgICAgICA8ZGl2IGRhdGEtbmctY29udHJvbGxlcj0iYXJfY29udHJvbGxlcnNfc2VhcmNoIj4KICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tLWNsb3NlIiBoaWRld2hlbmNsaWNrZWQ9IiIgdGl0bGU9IkNsb3NlIEluZ3JlZGllbnQgU2VhcmNoIj4KICAgICAgICAgPC9zcGFuPgogICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC13cmFwLS1ob21lIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJzdmctaWNvbi0tdG9wLW5hdi1iYXItLXNlYXJjaC1tYWduaWZ5LWdyYXkgc3ZnLWljb24tLXRvcC1uYXYtYmFyLS1zZWFyY2gtbWFnbmlmeS1ncmF5LWRpbXMiPgogICAgICAgICAgPC9zcGFuPgogICAgICAgICA8L2Rpdj4KICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtd3JhcC0taG9tZSBpbmdyZWRpZW50cyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmdyZWRpZW50LWNsaXBwaW5nLWZyYW1lIj4KICAgICAgICAgICA8dWwgY2xhc3M9ImluZ3JlZGllbnQtc2Nyb2xsZXIiIG9uc2VsZWN0c3RhcnQ9InJldHVybiBmYWxzZTsiIHVuc2VsZWN0YWJsZT0ib24iPgogICAgICAgICAgICA8bGkgbmctcmVwZWF0PSJpbmdyZWRpZW50IGluIHNlYXJjaC5pbmdyZWRpZW50c0luY2x1ZGUiPgogICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgPHNwYW4gbmctYmluZD0iOjppbmdyZWRpZW50Ij4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tLXgiIG5nLWNsaWNrPSJyZW1vdmVJbmdyZWRpZW50SW5jbHVkZShpbmdyZWRpZW50LCAkZXZlbnQpIiB1bnN1YnNjcmliZS1nbG9iYWwtY2xpY2staGFuZGxlcj0iIj4KICAgICAgICAgICAgICAg4pyVCiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5ncmVkaWVudC1hZGQtZXhjbHVkZSI+CiAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIFthaHJlZl0KICAgICAgICAgIAogICAgICAgICA8L2Rpdj4KICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtd3JhcC0taG9tZSBpbmdyZWRpZW50cyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmdyZWRpZW50LWNsaXBwaW5nLWZyYW1lIj4KICAgICAgICAgICA8dWwgY2xhc3M9ImluZ3JlZGllbnQtc2Nyb2xsZXIiIG9uc2VsZWN0c3RhcnQ9InJldHVybiBmYWxzZTsiIHVuc2VsZWN0YWJsZT0ib24iPgogICAgICAgICAgICA8bGkgbmctcmVwZWF0PSJpbmdyZWRpZW50IGluIHNlYXJjaC5pbmdyZWRpZW50c0V4Y2x1ZGUiPgogICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV4Y2x1ZGUtaXRlbSI+CiAgICAgICAgICAgICAgPHNwYW4gbmctYmluZD0iOjppbmdyZWRpZW50Ij4KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tLXgiIG5nLWNsaWNrPSJyZW1vdmVJbmdyZWRpZW50RXhjbHVkZShpbmdyZWRpZW50LCAkZXZlbnQpIiB1bnN1YnNjcmliZS1nbG9iYWwtY2xpY2staGFuZGxlcj0iIj4KICAgICAgICAgICAgICAg4pyVCiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5ncmVkaWVudC1hZGQtZXhjbHVkZSI+CiAgICAgICAgICAgIDxsaT5bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2JyYWNrZXRsMTFdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxMV1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XTwvbGk+PGxpPlthcmVhMV1bbWtleTFdPC9saT5bYXJlYTFdW21rZXkxXVtsaW5reF1bYWhyZWZdCiAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIFtsaW5reF0KICAgICAgICAgIAogICAgICAgICA8L2Rpdj4KICAgICAgICAgPGRpdiBjbGFzcz0ibmF2LXRhYl9fYnV0dG9ucyI+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4tYmFzaWMtLXNtYWxsIGJ0bi1zZWFyY2giIG5nLWNsaWNrPSJwZXJmb3JtU2VhcmNoKCkiIG5nLWNsb2FrPSIiPgogICAgICAgICAgIEdvCiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGFyLW5vdGlmaWNhdGlvbj4KICAgICAgICA8L2FyLW5vdGlmaWNhdGlvbj4KICAgICAgIDwvZm9ybT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImJyb3dzZS1yZWNpcGUtdGFiIHNvY2lhbCBuZy1oaWRlIiBpZD0idG9wQnJvd3NlUmVjaXBlUGFuZWwiIG5nLWNsb2FrPSIiIHBvcHVwLXBhbmVsPSJ0b3BCcm93c2VSZWNpcGVQYW5lbCI+CiAgICAgICA8c2VjdGlvbiBjbGFzcz0iaGVyby1saW5rIG5hdi10YWJfX29wdGlvbnMgcmVjaXBlLW5hdi10YWJfX29wdGlvbnMiPgogICAgICAgIDxkaXYgY2xhc3M9ImdyaWQgdW5kZXJsaW5lX2hlcm9fbGluayI+CiAgICAgICAgIDx1bCBjbGFzcz0iYnJvd3NlLWh1YnMiPgogICAgICAgICAgPGxpIGNsYXNzPSJicm93c2UtaHVic19fY2F0ZWdvcmllcyI+CiAgICAgICAgICAgPGgzPgogICAgICAgICAgICA8Yj5bYXJlYTFdW21rZXkxXVtzeW1ib2x4XVtwa2V5eF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmQxXVticmFja2V0bDFdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxXVtzeW1ib2x4XVticmFja2V0bDJdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIyXVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF08L2I+CiAgICAgICAgICAgPC9oMz4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi0tY2hldnJvbi1yaWdodCI+CiAgICAgICAgICAgIDxsaT5bbGlua3hdPC9saT5bbGlua3hdW2FyZWExXVtrZXl3b3JkeF08bGk+W2FyZWExXVtrZXl3b3JkeF08L2xpPlthcmVhMV1ba2V5d29yZHhdCiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgIDx1bCBjbGFzcz0iYnJvd3NlLWh1YnNfX3N1YmNhdGVnb3JpZXMiPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICA8YSBkYXRhLWhlYWRlci1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogIkJyb3dzZSBSZWNpcGVzID4gRGlubmVyIn0nIGhyZWY9Ii9yZWNpcGVzLzE3NTYyL2Rpbm5lci8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxkaW5uZXInKSIgdGl0bGU9IkRpbm5lciBSZWNpcGVzIj4KICAgICAgICAgICAgICBEaW5uZXIKICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImJyb3dzZS1odWJzX19jYXRlZ29yaWVzIj4KICAgICAgICAgICA8aDM+CiAgICAgICAgICAgIFthcmVhMV1bbWtleTFdW3N5bWJvbHhdW3BrZXl4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZDFdW2JyYWNrZXRsMV1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjFdW3N5bWJvbHhdW2JyYWNrZXRsMl1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjJdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XQogICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tLWNoZXZyb24tcmlnaHQiPgogICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICA8dWwgY2xhc3M9ImJyb3dzZS1odWJzX19zdWJjYXRlZ29yaWVzIj4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIDxhIGRhdGEtaGVhZGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiQnJvd3NlIFJlY2lwZXMgPiBDaGlja2VuIn0nIGhyZWY9Ii9yZWNpcGVzLzIwMS9tZWF0LWFuZC1wb3VsdHJ5L2NoaWNrZW4vIiBuZy1jbGljaz0ic2V0QW5hbHl0aWNzQ29va2llKCdicm93c2V8Y2hpY2tlbicpIiB0aXRsZT0iQ2hpY2tlbiBSZWNpcGVzIj4KICAgICAgICAgICAgICBDaGlja2VuCiAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIDxhIGRhdGEtaGVhZGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiQnJvd3NlIFJlY2lwZXMgPiBQYXN0YSJ9JyBocmVmPSIvcmVjaXBlcy85NS9wYXN0YS1hbmQtbm9vZGxlcy8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxwYXN0YScpIiB0aXRsZT0iUGFzdGEgUmVjaXBlcyI+CiAgICAgICAgICAgICAgUGFzdGEKICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJicm93c2UtaHVic19fY2F0ZWdvcmllcyI+CiAgICAgICAgICAgPGgzPgogICAgICAgICAgICBbYXJlYTFdW21rZXkxXVtzeW1ib2x4XVtwa2V5eF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmQxXVticmFja2V0bDFdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxXVtzeW1ib2x4XVticmFja2V0bDJdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIyXVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF0KICAgICAgICAgICA8L2gzPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLS1jaGV2cm9uLXJpZ2h0Ij4KICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPHVsIGNsYXNzPSJicm93c2UtaHVic19fc3ViY2F0ZWdvcmllcyI+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbbGlua3hdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iYnJvd3NlLWh1YnNfX2NhdGVnb3JpZXMiPgogICAgICAgICAgIDxoMz4KICAgICAgICAgICAgW2FyZWExXVtta2V5MV1bc3ltYm9seF1bcGtleXhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkMV1bYnJhY2tldGwxXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMV1bc3ltYm9seF1bYnJhY2tldGwyXVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyMl1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdCiAgICAgICAgICAgPC9oMz4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi0tY2hldnJvbi1yaWdodCI+CiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgIDx1bCBjbGFzcz0iYnJvd3NlLWh1YnNfX3N1YmNhdGVnb3JpZXMiPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYXJlYTFdW2tleXdvcmR4XVthcmVhMV1bbWtleTFdW2FyZWExXVtta2V5MV1bYWhyZWZdW3BrZXl4XVthaHJlZl1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2JyYWNrZXRsMV1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjFdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bcGtleXhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVticmFja2V0bDJdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIyXVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2xpbmt4XVthaHJlZl0KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImJyb3dzZS1odWJzX19jYXRlZ29yaWVzIj4KICAgICAgICAgICA8aDM+CiAgICAgICAgICAgIDxiPlthcmVhMV1bbWtleTFdW3N5bWJvbHhdW3BrZXl4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZDFdW2JyYWNrZXRsMV1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjFdW3N5bWJvbHhdW2JyYWNrZXRsMl1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjJdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XTwvYj4KICAgICAgICAgICA8L2gzPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLS1jaGV2cm9uLXJpZ2h0Ij4KICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPHVsIGNsYXNzPSJicm93c2UtaHVic19fc3ViY2F0ZWdvcmllcyI+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIDxhIGRhdGEtaGVhZGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiQnJvd3NlIFJlY2lwZXMgPiBCcmVhZHMifScgaHJlZj0iL3JlY2lwZXMvMTU2L2JyZWFkLyIgbmctY2xpY2s9InNldEFuYWx5dGljc0Nvb2tpZSgnYnJvd3NlfGJyZWFkcycpIiB0aXRsZT0iQnJlYWRzIFJlY2lwZXMiPgogICAgICAgICAgICAgIEJyZWFkcwogICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbbGlua3hdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICA8YSBkYXRhLWhlYWRlci1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogIkJyb3dzZSBSZWNpcGVzID4gU291cHMsIFN0ZXdzICZhbXA7IENoaWxpIn0nIGhyZWY9Ii9yZWNpcGVzLzk0L3NvdXBzLXN0ZXdzLWFuZC1jaGlsaS8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxzb3Vwcywgc3Rld3MgXHUwMDI2IGNoaWxpJykiIHRpdGxlPSJTb3VwcywgU3Rld3MgJmFtcDsgQ2hpbGkgUmVjaXBlcyI+CiAgICAgICAgICAgICAgU291cHMsIFN0ZXdzICZhbXA7IENoaWxpCiAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImJyb3dzZS1odWJzX19jYXRlZ29yaWVzIj4KICAgICAgICAgICA8aDM+CiAgICAgICAgICAgIFthcmVhMV1bbWtleTFdW3N5bWJvbHhdW3BrZXl4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZDFdW2JyYWNrZXRsMV1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjFdW3N5bWJvbHhdW2JyYWNrZXRsMl1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjJdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XQogICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tLWNoZXZyb24tcmlnaHQiPgogICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICA8dWwgY2xhc3M9ImJyb3dzZS1odWJzX19zdWJjYXRlZ29yaWVzIj4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbbGlua3hdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJicm93c2UtaHVic19fY2F0ZWdvcmllcyI+CiAgICAgICAgICAgPGgzPgogICAgICAgICAgICBbYXJlYTFdW21rZXkxXVtzeW1ib2x4XVtwa2V5eF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmQxXVticmFja2V0bDFdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxXVtzeW1ib2x4XVticmFja2V0bDJdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIyXVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF0KICAgICAgICAgICA8L2gzPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLS1jaGV2cm9uLXJpZ2h0Ij4KICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPHVsIGNsYXNzPSJicm93c2UtaHVic19fc3ViY2F0ZWdvcmllcyI+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgPGEgZGF0YS1oZWFkZXItbGluay10cmFja2luZz0neyJsYWJlbCI6ICJCcm93c2UgUmVjaXBlcyA+IEl0YWxpYW4ifScgaHJlZj0iL3JlY2lwZXMvNzIzL3dvcmxkLWN1aXNpbmUvZXVyb3BlYW4vaXRhbGlhbi8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxpdGFsaWFuJykiIHRpdGxlPSJJdGFsaWFuIFJlY2lwZXMiPgogICAgICAgICAgICAgIEl0YWxpYW4KICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJicm93c2UtaHVic19fY2F0ZWdvcmllcyI+CiAgICAgICAgICAgPGgzPgogICAgICAgICAgICBbYXJlYTFdW21rZXkxXVtzeW1ib2x4XVtwa2V5eF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmQxXVticmFja2V0bDFdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIxXVtzeW1ib2x4XVticmFja2V0bDJdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIyXVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF0KICAgICAgICAgICA8L2gzPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLS1jaGV2cm9uLXJpZ2h0Ij4KICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPHVsIGNsYXNzPSJicm93c2UtaHVic19fc3ViY2F0ZWdvcmllcyI+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW3BrZXl4XVthcmVhMV1bbWtleTFdW2FyZWExXVtta2V5MV1bcGtleXhdW3BrZXl4XVthaHJlZl1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2JyYWNrZXRsN11bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjddW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVthcmVhMV1bbWtleTFdW2FyZWExXVtta2V5MV1bYXJlYTFdW21rZXkxXVthaHJlZl1bYXJlYTFdW2tleXdvcmR4XVthcmVhMV1bbWtleTFdW2xpbmt4XQogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9saT4KICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICBbYWhyZWZdCiAgICAgICAgCiAgICAgICA8L3NlY3Rpb24+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJuYXYtdGFiIHNvY2lhbCBwcm9maWxlLW5hdiBuZy1oaWRlIiBuZy1jbG9haz0iIiBwb3B1cC1wYW5lbD0idG9wTmF2UHJvZmlsZU1lbnUiPgogICAgICAgPHVsIGNsYXNzPSJuYXYtdGFiX19vcHRpb25zIj4KICAgICAgICA8bGkgbmctY2xpY2s9InNldEFuYWx5dGljc0Nvb2tpZSgncHJvZmlsZXxmZWVkJywgJ21lbnUnKSI+CiAgICAgICAgIFthaHJlZl0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgbmctY2xpY2s9InNldEFuYWx5dGljc0Nvb2tpZSgncHJvZmlsZXxwcm9maWxlJywgJ21lbnUnKSI+CiAgICAgICAgIFtsaW5reF0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgbmctY2xpY2s9InNldEFuYWx5dGljc0Nvb2tpZSgncHJvZmlsZXxmYXZvcml0ZXMnLCAnbWVudScpIj4KICAgICAgICAgPGEgaHJlZj0iL2Nvb2svbXkvZmF2b3JpdGVzLyIgaWQ9Im5hdm1lbnVfcmVjaXBlYm94IiByZWw9Im5vZm9sbG93Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYXYtaWNvbiBzdmctaWNvbi0tdG9wLW5hdi1iYXItLWdyZXktaGVhcnQgc3ZnLWljb24tLXRvcC1uYXYtYmFyLS1ncmV5LWhlYXJ0LWRpbXMiPgogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9Iml0ZW1UZXh0Ij4KICAgICAgICAgICBGYXZvcml0ZXMKICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ3Byb2ZpbGV8ZnJpZW5kcycsICdtZW51JykiPgogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ3Byb2ZpbGV8c2hvcHBpbmcgbGlzdCcsICdtZW51JykiPgogICAgICAgICBbbGlua3hdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ3Byb2ZpbGV8c2V0dGluZ3MnLCAnbWVudScpIj4KICAgICAgICAgW2FocmVmXQogICAgICAgICAKICAgICAgICA8L2xpPgogICAgICAgPC91bD4KICAgICAgIDxkaXYgY2xhc3M9InNpZ25pbiIgbmctY2xpY2s9InNldEFuYWx5dGljc0Nvb2tpZSgncHJvZmlsZXxzaWduIGluICcsICdtZW51JykiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJ0bi1iYXNpYy0tbGFyZ2UgYnRuLWdvbGQiIGlkPSJuYXZtZW51X3NpZ25pbl9zaWdudXAiIG9uY2xpY2s9ImxvY2F0aW9uLmhyZWY9J2h0dHBzOi8vd3d3LmFsbHJlY2lwZXMuY29tL2FjY291bnQvYXV0aGVudGljYXRpb253ZWxjb21lLz9hY3Rpb25zb3VyY2U9JyArKHR5cGVvZiBkYXRhTGF5ZXIgIT09J3VuZGVmaW5lZCcgPyBkYXRhTGF5ZXIucGFnZS5jYXRlZ29yeS5jb250ZW50VHlwZSA6ICcnICkgIj4KICAgICAgICAgU2lnbiBJbgogICAgICAgICA8ZW0+CiAgICAgICAgICBvcgogICAgICAgICA8L2VtPgogICAgICAgICBTaWduIFVwCiAgICAgICAgPC9idXR0b24+CiAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Im5hdi10YWIgbGFzdCBuZy1oaWRlIiBuZy1jbG9haz0iIiBwb3B1cC1wYW5lbD0idG9wTmF2SGFtYnVyZ2VyTWVudSI+CiAgICAgICA8dWwgY2xhc3M9Im5hdi10YWJfX29wdGlvbnMiPgogICAgICAgIDxsaSBjbGFzcz0idW5kZXJsaW5lX2xpbmsiPgogICAgICAgICA8YSBocmVmPSIiIGlkPSJuYXZtZW51X3JlY2lwZXMiIG5nLWNsaWNrPSJicm93c2VOYXYoKSIgcG9wdXAtdHJpZ2dlcj0iYnJvd3NlUmVjaXBlUGFuZWwiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdi1pY29uIHN2Zy1pY29uLS10b3AtbmF2LWJhci0tbmF2LWJyb3dzZS1vcmFuZ2Ugc3ZnLWljb24tLXRvcC1uYXYtYmFyLS1uYXYtYnJvd3NlLW9yYW5nZS1kaW1zIiBuZy1jbGFzcz0ieydhY3RpdmUnOiBpc0FjdGl2ZX0iPgogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdi1pY29uIHN2Zy1pY29uLS10b3AtbmF2LWJhci0tbmF2LWJyb3dzZSBzdmctaWNvbi0tdG9wLW5hdi1iYXItLW5hdi1icm93c2UtZGltcyIgbmctY2xhc3M9InsnaGlkZGVuJzogaXNBY3RpdmV9Ij4KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJuYXYtbGluay10ZXh0Ij4KICAgICAgICAgICBCcm93c2UgUmVjaXBlcwogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY2hldnJvbiIgbmctY2xhc3M9InsnYWN0aXZlJzogaXNBY3RpdmV9Ij4KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJicm93c2UtZGl2LW9wdGlvbiBuZy1oaWRlIiBpZD0ibW9iaWxlLW5hdi1jb250YWluZXIiIHBvcHVwLXBhbmVsPSJicm93c2VSZWNpcGVQYW5lbCI+CiAgICAgICAgIDx1bCBjbGFzcz0ibmF2LXRhYl9fbW9iaWxlLWJyb3dzZSI+CiAgICAgICAgICA8bGk+CiAgICAgICAgICAgPGxhYmVsIGZvcj0iTWVhbCBUeXBlIj4KICAgICAgICAgICAgTWVhbCBUeXBlCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNoZXZyb24iPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICA8dWwgY2xhc3M9Im1vYmlsZS1icm93c2Utc3VibmF2Ij4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbbGlua3hdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgIDxsYWJlbCBmb3I9IkluZ3JlZGllbnQiPgogICAgICAgICAgICBJbmdyZWRpZW50CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNoZXZyb24iPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICA8dWwgY2xhc3M9Im1vYmlsZS1icm93c2Utc3VibmF2Ij4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICA8YSBkYXRhLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiSGFtYnVyZ2VyIE1lbnUgPiBCcm93c2UgUmVjaXBlcyA+IFBhc3RhIiwgImV2ZW50TmFtZSI6ICJIYW1idXJnZXIgTmF2IEFjdGlvbiBUYWtlbiJ9JyBocmVmPSIvcmVjaXBlcy85NS9wYXN0YS1hbmQtbm9vZGxlcy8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxwYXN0YScpIiB0aXRsZT0iUGFzdGEgUmVjaXBlcyI+CiAgICAgICAgICAgICAgUGFzdGEKICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgIDxsYWJlbCBmb3I9IkRpZXQgJmFtcDsgSGVhbHRoIj4KICAgICAgICAgICAgRGlldCAmYW1wOyBIZWFsdGgKICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tY2hldnJvbiI+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgIDx1bCBjbGFzcz0ibW9iaWxlLWJyb3dzZS1zdWJuYXYiPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgPGEgZGF0YS1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogIkhhbWJ1cmdlciBNZW51ID4gQnJvd3NlIFJlY2lwZXMgPiBHbHV0ZW4gRnJlZSIsICJldmVudE5hbWUiOiAiSGFtYnVyZ2VyIE5hdiBBY3Rpb24gVGFrZW4ifScgaHJlZj0iL3JlY2lwZXMvNzQxL2hlYWx0aHktcmVjaXBlcy9nbHV0ZW4tZnJlZS8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxnbHV0ZW4gZnJlZScpIiB0aXRsZT0iR2x1dGVuIEZyZWUgUmVjaXBlcyI+CiAgICAgICAgICAgICAgR2x1dGVuIEZyZWUKICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICA8YSBkYXRhLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiSGFtYnVyZ2VyIE1lbnUgPiBCcm93c2UgUmVjaXBlcyA+IExvdyBGYXQiLCAiZXZlbnROYW1lIjogIkhhbWJ1cmdlciBOYXYgQWN0aW9uIFRha2VuIn0nIGhyZWY9Ii9yZWNpcGVzLzEyMzEvaGVhbHRoeS1yZWNpcGVzL2xvdy1mYXQvIiBuZy1jbGljaz0ic2V0QW5hbHl0aWNzQ29va2llKCdicm93c2V8bG93IGZhdCcpIiB0aXRsZT0iTG93IEZhdCBSZWNpcGVzIj4KICAgICAgICAgICAgICBMb3cgRmF0CiAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGk+CiAgICAgICAgICAgPGxhYmVsIGZvcj0iU2Vhc29uYWwiPgogICAgICAgICAgICBTZWFzb25hbAogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1jaGV2cm9uIj4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgPHVsIGNsYXNzPSJtb2JpbGUtYnJvd3NlLXN1Ym5hdiI+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIDxhIGRhdGEtbGluay10cmFja2luZz0neyJsYWJlbCI6ICJIYW1idXJnZXIgTWVudSA+IEJyb3dzZSBSZWNpcGVzID4gU3VtbWVyIFJlY2lwZXMiLCAiZXZlbnROYW1lIjogIkhhbWJ1cmdlciBOYXYgQWN0aW9uIFRha2VuIn0nIGhyZWY9Ii9yZWNpcGVzLzYzMC9ldmVyeWRheS1jb29raW5nL3NlYXNvbmFsL3N1bW1lci8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxzdW1tZXIgcmVjaXBlcycpIiB0aXRsZT0iU3VtbWVyIFJlY2lwZXMiPgogICAgICAgICAgICAgIFN1bW1lciBSZWNpcGVzCiAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbbGlua3hdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIDxhIGRhdGEtbGluay10cmFja2luZz0neyJsYWJlbCI6ICJIYW1idXJnZXIgTWVudSA+IEJyb3dzZSBSZWNpcGVzID4gTW9yZSBIb2xpZGF5cyAmYW1wOyBFdmVudHMiLCAiZXZlbnROYW1lIjogIkhhbWJ1cmdlciBOYXYgQWN0aW9uIFRha2VuIn0nIGhyZWY9Ii9yZWNpcGVzLzg1L2hvbGlkYXlzLWFuZC1ldmVudHMvIiBuZy1jbGljaz0ic2V0QW5hbHl0aWNzQ29va2llKCdicm93c2V8bW9yZSBob2xpZGF5cyBcdTAwMjYgZXZlbnRzJykiIHRpdGxlPSJNb3JlIEhvbGlkYXlzICZhbXA7IEV2ZW50cyBSZWNpcGVzIj4KICAgICAgICAgICAgICBNb3JlIEhvbGlkYXlzICZhbXA7IEV2ZW50cwogICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgIDxsYWJlbCBmb3I9IkRpc2ggVHlwZSI+CiAgICAgICAgICAgIERpc2ggVHlwZQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1jaGV2cm9uIj4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgPHVsIGNsYXNzPSJtb2JpbGUtYnJvd3NlLXN1Ym5hdiI+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICA8YSBkYXRhLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiSGFtYnVyZ2VyIE1lbnUgPiBCcm93c2UgUmVjaXBlcyA+IENha2VzIiwgImV2ZW50TmFtZSI6ICJIYW1idXJnZXIgTmF2IEFjdGlvbiBUYWtlbiJ9JyBocmVmPSIvcmVjaXBlcy8yNzYvZGVzc2VydHMvY2FrZXMvIiBuZy1jbGljaz0ic2V0QW5hbHl0aWNzQ29va2llKCdicm93c2V8Y2FrZXMnKSIgdGl0bGU9IkNha2VzIFJlY2lwZXMiPgogICAgICAgICAgICAgIENha2VzCiAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgPGxpPltwa2V5eF08L2xpPjxsaT5bYXJlYTFdW21rZXkxXTwvbGk+PGxpPlthaHJlZl08L2xpPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgIDxsYWJlbCBmb3I9IkNvb2tpbmcgU3R5bGUiPgogICAgICAgICAgICBDb29raW5nIFN0eWxlCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNoZXZyb24iPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICA8dWwgY2xhc3M9Im1vYmlsZS1icm93c2Utc3VibmF2Ij4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgPGEgZGF0YS1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogIkhhbWJ1cmdlciBNZW51ID4gQnJvd3NlIFJlY2lwZXMgPiBCQlEgJmFtcDsgR3JpbGxpbmciLCAiZXZlbnROYW1lIjogIkhhbWJ1cmdlciBOYXYgQWN0aW9uIFRha2VuIn0nIGhyZWY9Ii9yZWNpcGVzLzg4L2JicS1ncmlsbGluZy8iIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ2Jyb3dzZXxiYnEgXHUwMDI2IGdyaWxsaW5nJykiIHRpdGxlPSJCQlEgJmFtcDsgR3JpbGxpbmcgUmVjaXBlcyI+CiAgICAgICAgICAgICAgQkJRICZhbXA7IEdyaWxsaW5nCiAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgIDxsYWJlbCBmb3I9IldvcmxkIEN1aXNpbmUiPgogICAgICAgICAgICBXb3JsZCBDdWlzaW5lCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWNoZXZyb24iPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICA8dWwgY2xhc3M9Im1vYmlsZS1icm93c2Utc3VibmF2Ij4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2FocmVmXQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgICBbYWhyZWZdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVticmFja2V0bDNdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHIzXVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2xpbmt4XVthcmVhMV1ba2V5d29yZHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVticmFja2V0bDRdW2FyZWExXVtrZXl3b3JkeF1bYnJhY2tldHI0XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FocmVmXVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYnJhY2tldGw1XVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyNV1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthaHJlZl1bbGlua3hdW3BrZXl4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYnJhY2tldGw2XVthcmVhMV1ba2V5d29yZHhdW2JyYWNrZXRyNl1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaT4KICAgICAgICAgICA8bGFiZWwgZm9yPSJTcGVjaWFsIENvbGxlY3Rpb25zIj4KICAgICAgICAgICAgU3BlY2lhbCBDb2xsZWN0aW9ucwogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1jaGV2cm9uIj4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgPHVsIGNsYXNzPSJtb2JpbGUtYnJvd3NlLXN1Ym5hdiI+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFtsaW5reF0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICBbYWhyZWZdCiAgICAgICAgICAgICAgW2FyZWExXVtrZXl3b3JkeF08bGk+W2FyZWExXVtrZXl3b3JkeF08L2xpPjxsaT5bbGlua3hdPC9saT48bGk+W2FyZWExXVtrZXl3b3JkeF08L2xpPlthcmVhMV1ba2V5d29yZHhdCiAgICAgICAgICAgICAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgW2xpbmt4XQogICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgIFthaHJlZl0KICAgICAgICAgICAgIAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L2xpPgogICAgICAgICA8L3VsPgogICAgICAgICA8ZGl2IGNsYXNzPSJzZWUtYWxsIj4KICAgICAgICAgIFthaHJlZl0KICAgICAgICAgIAogICAgICAgICA8L2Rpdj4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBuZy1jbGljaz0ic2V0QW5hbHl0aWNzRGF0YSgnYWxscmVjaXBlcyBtYWdhemluZScpIj4KICAgICAgICAgPGEgZGF0YS1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogIkhhbWJ1cmdlciBNZW51ID4gTWFnYXppbmUiLCAiZXZlbnROYW1lIjogIkhlYWRlciBBY3Rpb24gVGFrZW4ifScgaHJlZj0iL2FsbHJlY2lwZXMtbWFnYXppbmUvIiBpZD0ibmF2bWVudV9tYWdhemluZSIgcmVsPSJub29wZW5lciIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdi1pY29uIHN2Zy1pY29uLS10b3AtbmF2LWJhci0tbmF2LW1hZ2F6aW5lIHN2Zy1pY29uLS10b3AtbmF2LWJhci0tbmF2LW1hZ2F6aW5lLWRpbXMiPgogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgQWxscmVjaXBlcyBNYWdhemluZQogICAgICAgICAgPC9zcGFuPgogICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgbmctY2xpY2s9InNldEFuYWx5dGljc0RhdGEoJ2Rpbm5lciBzcGlubmVyIHR2JykiPgogICAgICAgICBbbGlua3hdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJ1bmRlcmxpbmVfbGluayIgbmctY2xpY2s9InNldEFuYWx5dGljc0RhdGEoJ2Nvb2tpbmcgc2Nob29sJykiPgogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIG5nLWNsaWNrPSJzZXRBbmFseXRpY3NDb29raWUoJ25ld3NsZXR0ZXJzJykiPgogICAgICAgICA8YSBkYXRhLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiSGFtYnVnZXIgTWVudSA+IE5ld3NsZXR0ZXJzIiwgImV2ZW50TmFtZSI6ICJIZWFkZXIgQWN0aW9uIFRha2VuIn0nIGhyZWY9Ii9jb29rL215L2FjY291bnQtc2V0dGluZ3MvI05ld3NsZXR0ZXJzU3Vic2NyaXB0aW9uIiBpZD0ibmF2bWVudV9zb2NpYWxfZ2FsbGVyeSIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0ibmF2LWljb24gc3ZnLWljb24tLXRvcC1uYXYtYmFyLS1uYXYtbmV3c2xldHRlcnMgc3ZnLWljb24tLXRvcC1uYXYtYmFyLS1uYXYtbmV3c2xldHRlcnMtZGltcyI+CiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICA8c3Bhbj4KICAgICAgICAgICBOZXdzbGV0dGVycwogICAgICAgICAgPC9zcGFuPgogICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgbmctY2xpY2s9InNldEFuYWx5dGljc0RhdGEoJ2FzayB0aGUgY29tbXVuaXR5JykiPgogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJ1bmRlcmxpbmVfbGluayIgbmctY2xpY2s9InNldEFuYWx5dGljc0RhdGEoJ2hlbHAnKSI+CiAgICAgICAgIDxhIGRhdGEtbGluay10cmFja2luZz0neyJsYWJlbCI6ICJIYW1idWdlciBNZW51ID4gSGVscCIsICJldmVudE5hbWUiOiAiSGVhZGVyIEFjdGlvbiBUYWtlbiJ9JyBocmVmPSIvY3VzdG9tZXItc2VydmljZS8iIGlkPSJuYXZtZW51X2hlbHAiIHJlbD0ibm9vcGVuZXIiIHRhcmdldD0iX3NlbGYiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdi1pY29uIHN2Zy1pY29uLS10b3AtbmF2LWJhci0tbmF2LWhlbHAgc3ZnLWljb24tLXRvcC1uYXYtYmFyLS1uYXYtaGVscC1kaW1zIj4KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgIDxzcGFuPgogICAgICAgICAgIEhlbHAKICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICBbbGlua3hdCiAgICAgICAgIAogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICA8L3VsPgogICAgICA8L2Rpdj4KICAgICA8L3NlY3Rpb24+CiAgICA8L2hlYWRlcj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1jb250ZW50IGJvZHktY29udGVudCIgaWQ9Im1haW4tY29udGVudCI+CiAgICAgPGRpdiBpZD0iYWQtaXMtbW9iaWxlIj4KICAgICA8L2Rpdj4KICAgICA8ZGl2IGlkPSJhZC1pcy10YWJsZXQiPgogICAgIDwvZGl2PgogICAgIDxkaXYgY2xhc3M9InZpZGVvLWNvbnRhaW5lci1vdXRlciI+CiAgICAgIFtwa2V5eF08bGk+W2FyZWExXVtrZXl3b3JkeF08L2xpPjxsaT5bYXJlYTFdW21rZXkxXTwvbGk+CiAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxmb290ZXIgY2xhc3M9ImZ1bGwtcGFnZSIgaWQ9InBhZ2VGb290ZXIiPgogICAgIDxzZWN0aW9uIGNsYXNzPSJncmlkIGdyaWQtZml4ZWQiPgogICAgICA8YXJ0aWNsZSBjbGFzcz0iZ3JpZC1jb2wgZ3JpZC1jb2wtLXRpbGVzIGZvb3Rlci1zaGFyZSI+CiAgICAgICA8dWwgY2xhc3M9InNvY2lhbC1zaGFyaW5nX19pY29ucyI+CiAgICAgICAgPGxpPgogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICA8YSBjbGFzcz0ic3ZnLWljb24tLXNvY2lhbC0tdHdpdHRlciBzdmctaWNvbi0tc29jaWFsLS10d2l0dGVyLWRpbXMiIGRhdGEtZm9vdGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiZm9vdGVyID4gc29jaWFsID4gdHdpdHRlciJ9JyBocmVmPSIvQWxscmVjaXBlcyIgaWQ9ImZvb3Rlcl90d2l0dGVyIiByZWw9Im5vb3BlbmVyIiB0YXJnZXQ9Il9ibGFuayIgdGl0bGU9IlR3aXR0ZXIiPgogICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIFtsaW5reF0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIFtsaW5reF0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIFtsaW5reF0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIFtsaW5reF0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgIDwvdWw+CiAgICAgIDwvYXJ0aWNsZT4KICAgICAgPGFydGljbGUgY2xhc3M9ImdyaWQtY29sIGdyaWQtY29sLS10aWxlcyI+CiAgICAgICA8dWw+CiAgICAgICAgPGxpPgogICAgICAgICBBYm91dCBVcwogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICA8YSBkYXRhLWZvb3Rlci1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogImZvb3RlciA+IG5ld3Nyb29tIn0nIGhyZWY9Ii8iIGlkPSJmb290ZXJfbmV3c3Jvb20iIHJlbD0ibm9vcGVuZXIiPgogICAgICAgICAgTmV3c3Jvb20KICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICA8L3VsPgogICAgICA8L2FydGljbGU+CiAgICAgIDxhcnRpY2xlIGNsYXNzPSJncmlkLWNvbCBncmlkLWNvbC0tdGlsZXMgZm9vdGVyX2FkdmVydGlzaW5nIj4KICAgICAgIDx1bD4KICAgICAgICA8bGk+CiAgICAgICAgIEFkdmVydGlzaW5nCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIFthaHJlZl0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIFthcmVhMV1ba2V5d29yZHhdPGxpPltwa2V5eF08L2xpPjxsaT5bYXJlYTFdW2tleXdvcmR4XTwvbGk+PGxpPlthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYnJhY2tldGwxMl1bYXJlYTFdW2tleXdvcmR4XVticmFja2V0cjEyXVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdW2FyZWExXVtrZXl3b3JkeF1bc3ltYm9seF1bYXJlYTFdW2tleXdvcmR4XVtzeW1ib2x4XVthcmVhMV1ba2V5d29yZHhdW3N5bWJvbHhdPC9saT5bbGlua3hdCiAgICAgICAgPC9saT4KICAgICAgIDwvdWw+CiAgICAgIDwvYXJ0aWNsZT4KICAgICAgPGFydGljbGUgY2xhc3M9ImdyaWQtY29sIGdyaWQtY29sLS10aWxlcyI+CiAgICAgICA8dWw+CiAgICAgICAgPGxpPgogICAgICAgICBTdXBwb3J0CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIDxhIGRhdGEtZm9vdGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiZm9vdGVyID4gc2l0ZSBtYXAifScgaHJlZj0iL2ZhcS1zaXRlbWFwLyIgaWQ9ImZvb3Rlcl9zaXRlbWFwIiByZWw9Im5vb3BlbmVyIj4KICAgICAgICAgIFNpdGUgTWFwCiAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgPGEgZGF0YS1mb290ZXItbGluay10cmFja2luZz0neyJsYWJlbCI6ICJmb290ZXIgPiBjb250YWN0IHVzIn0nIGhyZWY9Ii9jdXN0b21lci1zZXJ2aWNlL2NvbnRhY3QtdXMtMi8iIGlkPSJmb290ZXJfY29udGFjdHVzIiByZWw9Im5vb3BlbmVyIj4KICAgICAgICAgIENvbnRhY3QgVXMKICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICA8L3VsPgogICAgICA8L2FydGljbGU+CiAgICAgIDxhcnRpY2xlIGNsYXNzPSJncmlkLWNvbCBncmlkLWNvbC0tdGlsZXMiIGRhdGEtc2l0ZXVybD0iaHR0cHM6Ly93d3cuYWxscmVjaXBlcy5jb20iIG5nLWNvbnRyb2xsZXI9ImFyX2NvbnRyb2xsZXJzX2Zvb3RlckxpbmtzIj4KICAgICAgIDx1bD4KICAgICAgICA8bGk+CiAgICAgICAgIEdsb2JhbCBDb21tdW5pdHkKICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgPHNlbGVjdCBhcmlhLWxhYmVsPSJDaGFuZ2UgQ291bnRyeSIgaWQ9ImNvdW50cnktc2VsZWN0b3IiIG9uY2hhbmdlPSJjaGFuZ2VzaXRlKHRoaXMudmFsdWUpOyI+CiAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPgogICAgICAgICAgIFNlbGVjdCBsb2NhdGlvbltsaW5reF08bGk+W2FocmVmXTwvbGk+PGxpPltsaW5reF08L2xpPjxsaT5bYXJlYTFdW2tleXdvcmR4XTwvbGk+CiAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgIDxvcHRpb24gZGF0YS1mb290ZXItbGluay10cmFja2luZz0neyJsYWJlbCI6ICJmb290ZXIgPiBnbG9iYWwgY29tbXVuaXR5ID4gYXVzdHJhaWxpYSAmYW1wOyBuZXcgemVhbGFuZCJ9JyByZWw9Im5vb3BlbmVyIiB2YWx1ZT0iaHR0cDovL2FsbHJlY2lwZXMuY29tLmF1Ij4KICAgICAgICAgICBBdXN0cmFsaWEgJmFtcDsgTmV3IFplYWxhbmQKICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgPG9wdGlvbiBkYXRhLWZvb3Rlci1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogImZvb3RlciA+IGdsb2JhbCBjb21tdW5pdHkgPiBjYW5hZGEifScgcmVsPSJub29wZW5lciIgdmFsdWU9Imh0dHBzOi8vd3d3LmFsbHJlY2lwZXMuY29tP2NvdW50cnk9Q0EiPgogICAgICAgICAgIENhbmFkYQogICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIGRhdGEtZm9vdGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiZm9vdGVyID4gZ2xvYmFsIGNvbW11bml0eSA+IHF1ZWJlYyJ9JyByZWw9Im5vb3BlbmVyIiB2YWx1ZT0iaHR0cDovL3FjLmFsbHJlY2lwZXMuY2EiPgogICAgICAgICAgIFF1ZWJlYwogICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIGRhdGEtZm9vdGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiZm9vdGVyID4gZ2xvYmFsIGNvbW11bml0eSA+IHVuaXRlZCBraW5nZG9tICZhbXA7IGlyZWxhbmQifScgcmVsPSJub29wZW5lciIgdmFsdWU9Imh0dHA6Ly9hbGxyZWNpcGVzLmNvLnVrIj4KICAgICAgICAgICBVbml0ZWQgS2luZ2RvbSAmYW1wOyBJcmVsYW5kCiAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgIDxvcHRpb24gZGF0YS1mb290ZXItbGluay10cmFja2luZz0neyJsYWJlbCI6ICJmb290ZXIgPiBnbG9iYWwgY29tbXVuaXR5ID4gdW5pdGVkIHN0YXRlcyJ9JyByZWw9Im5vb3BlbmVyIiB2YWx1ZT0iaHR0cHM6Ly93d3cuYWxscmVjaXBlcy5jb20vP2NvdW50cnk9VVMiPgogICAgICAgICAgIFVuaXRlZCBTdGF0ZXMKICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICA8L3NlbGVjdD4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgwqkgMjAxOSBBbGxyZWNpcGVzLmNvbQogICAgICAgICA8YnIvPgogICAgICAgICBBbGwgUmlnaHRzIFJlc2VydmVkCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIFthaHJlZl0KICAgICAgICAgCiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgIDxhIGRhdGEtZm9vdGVyLWxpbmstdHJhY2tpbmc9J3sibGFiZWwiOiAiZm9vdGVyID4gZXUgcHJpdmFjeSBwb2xpY3kifScgaHJlZj0iL2xlZ2FsL2V1LXByaXZhY3kiIGlkPSJmb290ZXJfZXVfcHJpdmFjeXBvbGljeSIgcmVsPSJub29wZW5lciIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgRVUgUHJpdmFjeSBQb2xpY3kKICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICBbbGlua3hdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICA8YSBkYXRhLWZvb3Rlci1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogImZvb3RlciA+IGRhdGEgcG9saWN5In0nIGhyZWY9Ii9kYXRhcG9saWN5Lmh0bWwiIGlkPSJmb290ZXJfZGF0YXBvbGljeSIgcmVsPSJub29wZW5lciIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgRGF0YSBQb2xpY3kKICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICBbbGlua3hdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICBbbGlua3hdCiAgICAgICAgIAogICAgICAgICBbYWhyZWZdCiAgICAgICAgIAogICAgICAgIDwvbGk+CiAgICAgICA8L3VsPgogICAgICA8L2FydGljbGU+CiAgICAgIDxhcnRpY2xlIGNsYXNzPSJncmlkLWNvbCBncmlkLWNvbC0tdGlsZXMiPgogICAgICAgPHVsPgogICAgICAgIDxsaT4KICAgICAgICAgTW9yZSBBbGxyZWNpcGVzCiAgICAgICAgPC9saT4KICAgICAgICA8W2tleXdvcmR4XT4KICAgICAgICA8L1trZXl3b3JkeF0+CiAgICAgICAgPGxpPgogICAgICAgICA8YSBkYXRhLWZvb3Rlci1saW5rLXRyYWNraW5nPSd7ImxhYmVsIjogImZvb3RlciA+IGFwcHMifScgaHJlZj0iL21vYmlsZS1hcHBzIiBpZD0iZm9vdGVyX2FwcHMiIHJlbD0ibm9vcGVuZXIiPgogICAgICAgICAgQWxscmVjaXBlcyBBcHBzCiAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgW2xpbmt4XQogICAgICAgICAKICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgW2FocmVmXQogICAgICAgICAKICAgICAgICA8L2xpPgogICAgICAgPC91bD4KICAgICAgPC9hcnRpY2xlPgogICAgIDwvc2VjdGlvbj4KICAgICA8ZGl2IGRhdGEtbmctY29udHJvbGxlcj0iYXJfY29udHJvbGxlcnNfZGVmZXJyZWRBY3Rpb24iIGRhdGEtbmctaW5pdD0id2lyZXVwQWRJbnRlZ3JhdGlvbkxpc3RlbmVycygpO2V4ZWN1dGVQb3N0TG9naW5FdmVudHMoKTsiPgogICAgICA8YXItbm90aWZpY2F0aW9uPgogICAgICA8L2FyLW5vdGlmaWNhdGlvbj4KICAgICAgPGRpdiBkYXRhLWxvYWRpbmctaW5kaWNhdG9yPSIiPgogICAgICA8L2Rpdj4KICAgICA8L2Rpdj4KICAgIDwvZm9vdGVyPgogICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJhZC1mb290ZXItLWZpeGVkIiBpZD0iYWQtZm9vdGVyIj4KICAgPGRpdiBkYXRhLXRpZXI9IjEiIGlkPSJkaXYtZ3B0LW1vYi1hZGhlc2l2ZS1iYW5uZXItZml4ZWQiPgogICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IGlkPSJkc2FwcC1pcy10YWJsZXQiPgogIDwvZGl2PgogIDxiIHN0eWxlPSJjb2xvcjpibGFjaztiYWNrZ3JvdW5kLWNvbG9yOiNhMGZmZmYiPgogICBqbmljZTA4LWlwcDEzLXdhLXphLTAzNjEKICA8L2I+CiA8L2JvZHk+CjwvaHRtbD4K|<---