--->|<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "//www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="ko" xml:lang="ko" xmlns="//www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="no-cache" http-equiv="Cache-Control"/>
  <meta content="0" http-equiv="Expires"/>
  <meta content="no-cache" http-equiv="Pragma"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="http://everbikini.com/" property="og:type"/>
  <meta content="http://www.everbikini.com/web/upload/free_design/logologo.png" property="og:image"/>
  <div id="wp_tg_cts" style="display:none;">
  </div>
  <meta content="http://everbikini.com/product/공식몰-콤부쏘다-콤부차-스파클링-음료-14포x5box/148/" property="og:url">
   <meta content="[공식몰] 콤부쏘다, 콤부차 스파클링 음료 [14포x5box]" property="og:title">
    <meta content="#콤부차 #저칼로리 #사과맛 #체리맛 #레몬맛" property="og:description">
     <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
     <meta content="product" property="og:type"/>
     <meta content="http://everbikini.com/web/product/big/201902/a67140d3d295d3c09fd1ccb70f32078b.png" property="og:image"/>
     <meta content="24900" property="product:price:amount"/>
     <meta content="KRW" property="product:price:currency"/>
     <meta content="24651" property="product:sale_price:amount"/>
     <meta content="KRW" property="product:sale_price:currency"/>
     <title>
      [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </title>
     <meta content="PRODUCT_DETAIL" name="path_role"/>
     <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
     <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
     <meta content="/product/detail.html" name="design_html_path"/>
    </meta>
   </meta>
  </meta>
 </head>
 <body bottommargin="0" leftmarign="0" rightmargin="0" style="overflow-x:hidden;" topmargin="0">
  <div style="position:fixed; left:20px; bottom:40px; z-index:9900;">
   <span id="fade3">
    <div style="position:absolute; margin-left:0px; margin-top:40px;">
     [area1][keywordx][pkeyx]<li>[pkeyx]</li>[area1][mkey1][linkx]
    </div>
    [ahref]
    
   </span>
  </div>
  <div style="position:fixed; right:20px; bottom:150px; z-index:9900;">
  </div>
  <map id="map" name="map">
   <area coords="0,0,89,95" href="/order/basket.html" shape="rect"/>
   <area coords="0,95,89,175" href="/product/recent_view_product.html" shape="rect"/>
   <area coords="0,175,89,255" href="/myshop/order/list.html" shape="rect"/>
   <area coords="0,255,89,340" href="/board/event/list.html?board_no=2&amp;category_no=1" shape="rect"/>
   <area coords="0,340,89,420" href="/solution.html" shape="rect">
    <h1>
     [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
    </h1>
   </area>
   <area coords="0,480,89,520" href="#top" shape="rect"/>
   <area coords="0,525,89,555" href="#bottom" shape="rect"/>
  </map>
  [ahref]
  
  <div id="bg2">
   <div id="skipNavigation">
    <p>
     <a href="y">
      전체상품목록 바로가기
     </a>
    </p>
    <p>
     [ahref]
     
    </p>
   </div>
   [ahref]
   
   <div id="header">
    <div class="basic_wrap">
     <div class="inner">
      <div class="nav_basic">
       <ul>
        <li class="xans-element- xans-layout xans-layout-statelogoff">
         [ahref]
         
        </li>
        <li class="xans-element- xans-layout xans-layout-statelogoff">
         [linkx]
         
        </li>
        <li>
         <a href="/myshop/order/list.html">
          주문/배송조회
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
      <div class="nav_board">
       <ul class="xans-element- xans-layout xans-layout-boardinfo" style="display:none;">
        <li class="xans-record-">
         <a href="/board/notice/1/">
          NOTICE
         </a>
        </li>
        <li class="xans-record-">
         [ahref]
         
        </li>
        <li class="xans-record-">
         [linkx]
         
        </li>
        <li class="xans-record-">
         상품후기<li>[area1][mkey1]</li><li>[pkeyx]</li><li>[area1][keywordx]</li>
        </li>
        <li class="xans-record-">
         [ahref]
         
        </li>
        <li class="xans-record-">
         [linkx]
         
        </li>
        <li class="xans-record-">
         [ahref]
         
        </li>
        <li class="xans-record-">
         <a href="/board/자주묻는질문/3/">
          자주묻는질문
         </a>
        </li>
        <li class="xans-record-">
         [ahref]
         
        </li>
        <li class="xans-record-">
         [ahref]
         
        </li>
       </ul>
       <ul>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/everbikini_" target="_blank">
         </a>
        </li>
        <li>
         <a href="/EVERBIKINI" target="_blank">
         </a>
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="xans-element- xans-layout xans-layout-logotop" style="position:absolute; width:173px; margin-top:-95px; left:50%; margin-left:-86.5px; text-align:center; z-index:20;">
     [ahref]
     
    </div>
    <div class="xans-element- xans-layout xans-layout-category" id="category">
     <div class="position gnb">
      <ul>
       <li>
       </li>
       <li class="xans-record-" style="margin-left:-2px;">
        [ahref]
        
       </li>
       <li class="xans-record-">
        [linkx]
        
       </li>
       <li class="xans-record-">
        [linkx]
        
       </li>
       <li class="xans-record-">
        [ahref]
        
       </li>
       <li class="xans-record-">
        [linkx]
        
       </li>
       <li class="xans-record-">
        <a href="/board/event/list.html?board_no=2&amp;category_no=1">
         이벤트
        </a>
       </li>
       <li class="xans-record-">
        [linkx]
        
       </li>
       <li class="xans-record-">
        [linkx]
        
       </li>
       <li class="xans-record-">
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="snb">
      <div>
       <ul>
        <li>
         <ul>
          <li style="margin-top:-20px;">
          </li>
         </ul>
        </li>
        <li>
         <ul>
          <li>
           [ahref]
           
          </li>
         </ul>
        </li>
        <li>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/product/list.html?cate_no=91">
            베이직
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </li>
        <li>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </li>
        <li>
         <ul>
          <li>
           <a href="/product/list.html?cate_no=71">
            한입뷰티
           </a>
          </li>
          <li>
           <a href="/product/list.html?cate_no=65">
            음료
           </a>
          </li>
          <li>
           <a href="/product/list.html?cate_no=66">
            간식
           </a>
          </li>
         </ul>
        </li>
        <li>
         <ul>
          [ahref][area1][mkey1][pkeyx][area1][mkey1][pkeyx][linkx][pkeyx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1][area1][keywordx][area1][mkey1]
         </ul>
        </li>
        <li>
         <ul>
          <li>
           <a href="/board/event/list.html?board_no=2&amp;category_no=1">
            진행중 이벤트
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/product/list.html?cate_no=99">
            기획상품
           </a>
          </li>
         </ul>
        </li>
        <li>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/article/notice/1/33224">
            우수후기 발표
           </a>
          </li>
         </ul>
        </li>
        <li>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/board/gallery/list.html?board_no=8">
            키니TV
           </a>
          </li>
          <li>
           <a href="/board/news/list.html?board_no=1002">
            TV/보도자료
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/productinfo.html">
            제품가이드
           </a>
          </li>
         </ul>
        </li>
        <li>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
   <form action="/product/search.html" enctype="multipart/form-data" id="searchBarForm" method="get" name="" target="_self">
    <div class="xans-element- xans-layout xans-layout-searchheader" style="position:absolute; text-align:center; width:238px; left:50%; margin-left:303px; margin-top:-118px; z-index:200;">
     <fieldset>
      <legend>
       검색
      </legend>
     </fieldset>
    </div>
   </form>
   <div style="position:absolute; text-align:center; width:238px; left:50%; margin-left:303px; margin-top:-117px; z-index:2;">
   </div>
   <div style="position:absolute; text-align:center; width:69px; left:50%; margin-left:545px; margin-top:-122px; z-index:20;">
    [linkx]
    
   </div>
   <div class="visual">
    <div class="xans-element- xans-photoslide2 xans-photoslide2-slide-12 xans-photoslide2-slide xans-photoslide2-12 main_flexslider2" style="position:absolute; width:1920px; left:50%; margin-left:-960px;">
     <div class="slider-wrapper theme-default">
      <div class="ribbon">
      </div>
      <div class="nivoSlider" id="nivoSlider12" rel="12" style="
                            background : url(//app-storage-008.cafe24.com/photoslide2/everbikini/2019/04/03/802aaa4db3cb3a20e964ea9a7f72ab4b.jpg) no-repeat;
                            position : relative;
                            overflow : hidden;
                            width : 1920px;
                            height : 442px; ">
       <a class="nivohref" href="/board/event/read.html?no=46487&amp;board_no=2" rel="87" style="display:block;">
       </a>
       [ahref]
       
       [ahref]
       
       [ahref]
       
       [ahref]
       
       [ahref]
       
       [linkx]
       
       [linkx]
       
      </div>
     </div>
    </div>
   </div>
   <div id="wrap" style="margin-top:490px;">
    <div id="container">
     <div id="contents">
      <div class="xans-element- xans-product xans-product-headcategory path">
       <span>
        현재 위치
       </span>
       <ol>
        <li>
         [linkx]
         
        </li>
        <li class="">
         [linkx]
         
        </li>
        <li class="">
         [linkx]
         
        </li>
        <li class="displaynone">
         [ahref]
         
        </li>
        <li class="displaynone">
         <strong>
          [linkx]
          
         </strong>
        </li>
       </ol>
      </div>
      <div class="xans-element- xans-product xans-product-detail">
       <div class="headingArea" style="position:absolute; width:540px; margin-left:658px;">
        <h2>
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h2>
        <span class="delivery displaynone">
         (해외배송 가능상품)
        </span>
        <span class="icon">
        </span>
        <div class="supply displaynone">
         <span>
         </span>
         <a href="e" onclick="">
         </a>
        </div>
       </div>
       <div class="detailArea">
        <div class="xans-element- xans-product xans-product-image imgArea">
         <div class="keyImg">
          <div class="thumbnail">
           [linkx]
           
           <div id="zoom_wrap">
           </div>
          </div>
         </div>
         <div class="xans-element- xans-product xans-product-addimage listImg">
          <ul>
           <li class="xans-record-">
           </li>
           <li class="xans-record-" style="margin-left:10px;">
           </li>
           <li class="xans-record-" style="margin-left:10px;">
           </li>
           <li class="xans-record-" style="margin-left:10px;">
           </li>
          </ul>
         </div>
         <div class="color displaynone">
         </div>
         <div class="likeButton displaynone">
          <button type="button">
           <span class="title">
            좋아요
           </span>
           <span class="count">
           </span>
          </button>
         </div>
        </div>
        <div class="infoArea">
         [area1][keywordx]<li>[pkeyx]</li>[ahref]<li>[area1][keywordx]</li>
        </div>
       </div>
       <div style="background-color:#f9f9f9; position:relative; height:520px; width:1920px; left:50%; margin-left:-960px; margin-top:50px; text-align:center;">
        <center>
         <div class="xans-element- xans-product xans-product-relation detailProductSlide xans-record-" id="prdRelated" style="width:1200px;">
          <div class="relation">
           <div class="title">
            <h3 style="margin-top:10px; font-size:22px; font-weight:normal;">
             <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
            </h3>
           </div>
           <div class="xans-element- xans-product xans-product-relationlist">
            <ul class="prdList grid5">
             <li class="item xans-record-">
              <div class="box">
               [ahref]
               
               <p class="prdName" style="font-size:15px;">
                [ahref]
                
               </p>
               <ul>
                <li>
                 <strong style="font-size:19px;">
                  16,000원
                 </strong>
                </li>
               </ul>
              </div>
             </li>
             <li class="item xans-record-">
              <div class="box">
               [linkx]
               
               <p class="prdName" style="font-size:15px;">
                [ahref]
                
               </p>
               <ul>
                <li>
                 <strong style="font-size:19px;">
                  119,000원
                 </strong>
                </li>
               </ul>
              </div>
             </li>
             <li class="item xans-record-">
              <div class="box">
               [linkx]
               
               <p class="prdName" style="font-size:15px;">
                [linkx]
                
               </p>
               <ul>
                <li>
                 <strong style="font-size:19px;">
                  13,900원
                 </strong>
                </li>
               </ul>
              </div>
             </li>
             <li class="item xans-record-">
              <div class="box">
               [linkx]
               
               <p class="prdName" style="font-size:15px;">
                [linkx]
                
               </p>
               <ul>
                <li>
                 <strong style="font-size:19px;">
                  12,900원
                 </strong>
                </li>
               </ul>
              </div>
             </li>
             <li class="item xans-record-">
              <div class="box">
               [linkx]
               
               <p class="prdName" style="font-size:15px;">
                [ahref]
                
               </p>
               <ul>
                <li>
                 <strong style="font-size:19px;">
                  54,000원
                 </strong>
                </li>
               </ul>
              </div>
             </li>
            </ul>
           </div>
          </div>
         </div>
        </center>
       </div>
       <div style="position:relative; margin-top:70px;">
        <div class="reviewArea" id="ec-board-zoom-wrapper" style="display:none;">
        </div>
        <div async_module="smartreview_dispZoom" async_type="template" class="reviewArea" id="ec-board-zoom">
         <div async_section="after" style="display:none;">
          <div class="dimmed">
          </div>
          <div class="zoomLayer">
           <h2>
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="imgView" id="sliderWrap">
            <ul async_module="smartreview_dispFiles" async_type="template" class="slides">
             <li>
              {$*img_src}
             </li>
             <li>
              {$*img_src}
             </li>
            </ul>
            <div class="paging">
             <button class="btnPrev" type="button">
              이전
             </button>
             <button class="btnNext" type="button">
              다음
             </button>
            </div>
           </div>
           <div class="reviewThumb">
            <div class="thumbList">
             <p class="count">
             </p>
             <div id="zoomfakeScroll">
              <ul async_module="smartreview_dispFiles" async_type="template">
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
           </div>
           <button class="btnClose ec-board-list-zoom-close" type="button">
            닫기
           </button>
          </div>
         </div>
        </div>
        <div async_module="smartreview_dispRating" class="reviewArea">
         <div async_section="after" class="ec-board-files" style="display:none;">
          <div class="gradeArea {$*rating_display}">
           <div class="status ec-board-rating-grade {$*exist_display}">
            <strong class="score">
             {$*rating_avg}
            </strong>
            {$*display_bulletin_rating_medium_tpl}
            <p class="desc">
             (
             <strong>
              {$*writing_cnt}
             </strong>
             개 리뷰 평점)
            </p>
           </div>
           <div class="thumbList {$*exist_display}">
            <div async_module="smartreview_dispFiles" async_type="template">
             <div class="ec-board-files ec-board-files-list {$*exist_display}">
              <ul>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
              </ul>
             </div>
             <p class="empty {$*empty_display}">
              리뷰 사진을 기다리고 있습니다.
             </p>
            </div>
           </div>
           <p class="empty {$*empty_display}">
            아직 상품리뷰가 없습니다.
            <br/>
            상품을 구매하고 리뷰를 작성해보세요.
           </p>
          </div>
         </div>
        </div>
        <div class="ec-board-list-multiple-list-wrapper">
         <div async_module="smartreview_dispList" class="reviewArea">
          <div async_section="before">
           <div class="loading">
           </div>
          </div>
          <div async_section="after" style="display:none;">
           <div async_module="smartreview_dispDetailReview">
            <div class="btnArea">
             [linkx]
             
             [ahref]
             
            </div>
           </div>
           <div class="reviewSearch">
            <ul class="sorting">
             <li class="selected">
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li class="{$*display_rating_visible_class}">
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
            <div class="ctrl">
             <label>
              {$*display_is_photo_only_html} 포토리뷰만 보기
             </label>
             <div class="searchWrap">
              {$*display_keyword_type_html}
              <div class="search">
               <button class="btnSearch ec-board-list-search-keyword" type="submit">
                검색
               </button>
              </div>
             </div>
            </div>
           </div>
           <div class="searchArea">
            <button class="btnOpen ec-board-list-search-detail {$*display_search_button_visible_class}" type="button">
             상세검색 열기
            </button>
            <div class="searchList ec-board-list-additems">
             <table border="1" summary="">
              <caption>
               상세검색
              </caption>
              <colgroup>
               <col style="width:123px;"/>
               <col style="width:auto;"/>
              </colgroup>
              <tbody async_module="smartreview_dispListSearch">
               <tr>
                <th scope="row">
                 {$*item_name}
                </th>
                <td>
                 <div class="item {$*display_item_wrap_id}">
                  <span class="label">
                   <label>
                    전체
                   </label>
                  </span>
                 </div>
                </td>
               </tr>
               <tr>
                [ahref][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][ahref][ahref][pkeyx][pkeyx][area1][mkey1][pkeyx][area1][mkey1][area1][keywordx]
               </tr>
              </tbody>
             </table>
            </div>
           </div>
           <div class="reviewList ec-board-list-items-data {$*display_list_block_visible_class}">
            <ul async_module="smartreview_dispListItems">
             <li class="grid ec-board-list-item" data-bulletin-no="{$*bulletin_no}" style="display:none;">
              <div class="reviewInfo">
               <div class="reviewImg {$*display_bulletin_thumbnail_visible_class}">
                [ahref]
                
                <div class="gradeLayer" title="{$*rating}">
                 <div class="ec-board-grade ec-board-star medium">
                  {$*display_bulletin_rating_medium_tpl}
                 </div>
                 <div class="gradeBg">
                 </div>
                </div>
               </div>
               <div class="prdOption typeSimple {$*product_option_info_display} {$*product_option_info_visible_display}">
                <p class="normal {$*normal_product_info_display}">
                 <span class="option">
                  {$*display_product_option_info}
                 </span>
                </p>
                <ul class="set {$*set_product_info_display}">
                 {$*display_product_set_info}
                </ul>
               </div>
               <span class="icon {$*display_mobile_icon_visible_class}">
                {$*display_mobile_icon_url}
               </span>
               <span class="icon {$*display_new_icon_visible_class}">
                {$*display_new_icon_url}
               </span>
               [linkx]
               
               <div class="community">
                [ahref]
                
                <div class="social">
                 <button class="btnLike {$*display_like_selected} ec-board-list-sns-share-button-{$*bulletin_no}" type="button">
                  좋아요
                 </button>
                 <button class="btnShare {$*display_sns_share_visible_class}" type="button">
                  공유하기
                 </button>
                 <div class="shareLayer">
                  <ul>
                   <li>
                    [ahref]
                    
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                   <li class="{$*display_sns_share_instagram_class}">
                    [ahref]
                    
                   </li>
                  </ul>
                  <span class="edge">
                  </span>
                 </div>
                </div>
               </div>
              </div>
              <div class="prdInfo {$*display_product_info_visible_class}">
               <p class="reviewThumb">
                [linkx]
                
               </p>
               <div class="summary">
                [linkx]
                
                <div class="prdOption typeSimple {$*product_option_info_display}">
                 <p class="normal {$*normal_product_info_display}">
                  <span class="option">
                   {$*display_product_option_info}
                  </span>
                 </p>
                 <ul class="set {$*set_product_info_display}">
                  {$*display_product_set_info}
                 </ul>
                </div>
                <div class="info">
                 <dl class="{$*display_rating_visible_class}">
                  <dt>
                   평점
                  </dt>
                  <dd>
                   {$*display_product_info_rating_avg}
                  </dd>
                 </dl>
                 <dl>
                  <dt>
                   리뷰
                  </dt>
                  <dd>
                   {$*display_product_info_review_count}
                  </dd>
                 </dl>
                </div>
               </div>
              </div>
             </li>
             <li class="grid ec-board-list-item" data-bulletin-no="{$*bulletin_no}" style="display:none;">
              <div class="reviewInfo">
               <div class="reviewImg {$*display_bulletin_thumbnail_visible_class}">
                [ahref]
                
                <div class="gradeLayer" title="{$*rating}">
                 <div class="ec-board-grade ec-board-star medium">
                  {$*display_bulletin_rating_medium_tpl}
                 </div>
                 <div class="gradeBg">
                 </div>
                </div>
               </div>
               <div class="prdOption typeSimple {$*product_option_info_display} {$*product_option_info_visible_display}">
                <p class="normal {$*normal_product_info_display}">
                 <span class="option">
                  {$*display_product_option_info}
                 </span>
                </p>
                <ul class="set {$*set_product_info_display}">
                 {$*display_product_set_info}
                </ul>
               </div>
               <span class="icon {$*display_mobile_icon_visible_class}">
                {$*display_mobile_icon_url}
               </span>
               <span class="icon {$*display_new_icon_visible_class}">
                {$*display_new_icon_url}
               </span>
               [ahref]
               
               <div class="community">
                <a class="comment ec-board-list-review-read {$*display_comment_visible_class} {$*display_comment_visible_underline_class}" href="e">
                 댓글
                 <strong class="count ec-board-comment-count">
                  {$*comment_cnt}
                 </strong>
                </a>
                <div class="social">
                 <button class="btnLike {$*display_like_selected} ec-board-list-sns-share-button-{$*bulletin_no}" type="button">
                  좋아요
                 </button>
                 <button class="btnShare {$*display_sns_share_visible_class}" type="button">
                  공유하기
                 </button>
                 <div class="shareLayer">
                  <ul>
                   <li>
                    [ahref]
                    
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                   <li class="{$*display_sns_share_instagram_class}">
                    [linkx]
                    
                   </li>
                  </ul>
                  <span class="edge">
                  </span>
                 </div>
                </div>
               </div>
              </div>
              <div class="prdInfo {$*display_product_info_visible_class}">
               <p class="reviewThumb">
                <a href="/product/detail.html?product_no=%7B%24*prd_no%7D">
                 {$*display_product_image_tag}
                </a>
               </p>
               <div class="summary">
                [ahref]
                
                <div class="prdOption typeSimple {$*product_option_info_display}">
                 <p class="normal {$*normal_product_info_display}">
                  <span class="option">
                   {$*display_product_option_info}
                  </span>
                 </p>
                 <ul class="set {$*set_product_info_display}">
                  {$*display_product_set_info}
                 </ul>
                </div>
                <div class="info">
                 <dl class="{$*display_rating_visible_class}">
                  <dt>
                   평점
                  </dt>
                  <dd>
                   {$*display_product_info_rating_avg}
                  </dd>
                 </dl>
                 <dl>
                  <dt>
                   리뷰
                  </dt>
                  <dd>
                   {$*display_product_info_review_count}
                  </dd>
                 </dl>
                </div>
               </div>
              </div>
             </li>
            </ul>
           </div>
           <div class="reviewListEmpty ec-board-list-items-empty {$*display_list_empty_block_visible_class}">
            상품리뷰가 없습니다.
           </div>
           <button class="btnMore ec-board-list-more-button {$*display_list_more_button_visible_class}" type="button">
            <span>
             리뷰글 더 보기
            </span>
           </button>
          </div>
          <div async_section="error" style="display:none;">
           <div class="reviewListEmpty">
            상품리뷰가 없습니다.
           </div>
          </div>
         </div>
         <div async_module="smartreview_dispListItems" async_type="template" class="ec-board-list-items-template" style="display:none;">
          <ul async_section="after" style="display:none;">
           <li class="grid ec-board-list-item" data-bulletin-no="{$*bulletin_no}" style="display:none;">
            <div class="reviewInfo">
             <div class="reviewImg {$*display_bulletin_thumbnail_visible_class}">
              <a class="reviewThumb ec-board-list-review-read" href="e">
               {$*display_bulletin_thumbnail_url}
              </a>
              <div class="gradeLayer" title="{$*rating}">
               <div class="ec-board-grade ec-board-star medium">
                {$*display_bulletin_rating_medium_tpl}
               </div>
               <div class="gradeBg">
               </div>
              </div>
             </div>
             <div class="prdOption typeSimple {$*product_option_info_display} {$*product_option_info_visible_display}">
              <p class="normal {$*normal_product_info_display}">
               <span class="option">
                {$*display_product_option_info}
               </span>
              </p>
              <ul class="set {$*set_product_info_display}">
               {$*display_product_set_info}
              </ul>
             </div>
             <span class="icon {$*display_mobile_icon_visible_class}">
              {$*display_mobile_icon_url}
             </span>
             <span class="icon {$*display_new_icon_visible_class}">
              {$*display_new_icon_url}
             </span>
             [ahref]
             
             <div class="community">
              [linkx]
              
              <div class="social">
               <button class="btnLike {$*display_like_selected} ec-board-list-sns-share-button-{$*bulletin_no}" type="button">
                좋아요
               </button>
               <button class="btnShare {$*display_sns_share_visible_class}" type="button">
                공유하기
               </button>
               <div class="shareLayer">
                <ul>
                 <li>
                  [linkx]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                 <li class="{$*display_sns_share_instagram_class}">
                  [linkx]
                  
                 </li>
                </ul>
                <span class="edge">
                </span>
               </div>
              </div>
             </div>
            </div>
            <div class="prdInfo {$*display_product_info_visible_class}">
             <p class="reviewThumb">
              [ahref]
              
             </p>
             <div class="summary">
              [linkx]
              
              <div class="prdOption typeSimple {$*product_option_info_display}">
               <p class="normal {$*normal_product_info_display}">
                <span class="option">
                 {$*display_product_option_info}
                </span>
               </p>
               <ul class="set {$*set_product_info_display}">
                {$*display_product_set_info}
               </ul>
              </div>
              <div class="info">
               <dl class="{$*display_rating_visible_class}">
                <dt>
                 평점
                </dt>
                <dd>
                 {$*display_product_info_rating_avg}
                </dd>
               </dl>
               <dl>
                <dt>
                 리뷰
                </dt>
                <dd>
                 {$*display_product_info_review_count}
                </dd>
               </dl>
              </div>
             </div>
            </div>
           </li>
           <li class="grid ec-board-list-item" data-bulletin-no="{$*bulletin_no}" style="display:none;">
            <div class="reviewInfo">
             <div class="reviewImg {$*display_bulletin_thumbnail_visible_class}">
              [linkx]
              
              <div class="gradeLayer" title="{$*rating}">
               <div class="ec-board-grade ec-board-star medium">
                {$*display_bulletin_rating_medium_tpl}
               </div>
               <div class="gradeBg">
               </div>
              </div>
             </div>
             <div class="prdOption typeSimple {$*product_option_info_display} {$*product_option_info_visible_display}">
              <p class="normal {$*normal_product_info_display}">
               <span class="option">
                {$*display_product_option_info}
               </span>
              </p>
              <ul class="set {$*set_product_info_display}">
               {$*display_product_set_info}
              </ul>
             </div>
             <span class="icon {$*display_mobile_icon_visible_class}">
              {$*display_mobile_icon_url}
             </span>
             <span class="icon {$*display_new_icon_visible_class}">
              {$*display_new_icon_url}
             </span>
             [ahref]
             
             <div class="community">
              [ahref]
              
              <div class="social">
               <button class="btnLike {$*display_like_selected} ec-board-list-sns-share-button-{$*bulletin_no}" type="button">
                좋아요
               </button>
               <button class="btnShare {$*display_sns_share_visible_class}" type="button">
                공유하기
               </button>
               <div class="shareLayer">
                <ul>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                 <li class="{$*display_sns_share_instagram_class}">
                  [linkx]
                   [ahref]<li>[linkx]</li><li>[pkeyx]</li><li>[area1][mkey1]</li>
                  
                 </li>
                </ul>
                <span class="edge">
                </span>
               </div>
              </div>
             </div>
            </div>
            <div class="prdInfo {$*display_product_info_visible_class}">
             <p class="reviewThumb">
              [linkx]
              
             </p>
             <div class="summary">
              [ahref]
              
              <div class="prdOption typeSimple {$*product_option_info_display}">
               <p class="normal {$*normal_product_info_display}">
                <span class="option">
                 {$*display_product_option_info}
                </span>
               </p>
               <ul class="set {$*set_product_info_display}">
                {$*display_product_set_info}
               </ul>
              </div>
              <div class="info">
               <dl class="{$*display_rating_visible_class}">
                <dt>
                 평점
                </dt>
                <dd>
                 {$*display_product_info_rating_avg}
                </dd>
               </dl>
               <dl>
                <dt>
                 리뷰
                </dt>
                <dd>
                 {$*display_product_info_review_count}
                </dd>
               </dl>
              </div>
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
       </div>
       [ahref]
       
       <div style="position:absolute; width:1920px; left:50%; margin-left:-960px; height:1px; background-color:#dadada; margin-top:100px;">
       </div>
       <div style="position:absolute; width:1200px; margin-top:54px;">
        <div onclick="location.href='#scroll_1';" style="float:left; width:300px; border-bottom:3px solid #fe3a78; font-size:16px; line-height:45px; font-weight:bold; text-align:center; color:#fe3a78; cursor:pointer;">
         상세정보
        </div>
        <div onclick="location.href='#scroll_2';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         사용후기
        </div>
        <div onclick="location.href='#scroll_3';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         Q&amp;A
        </div>
        <div onclick="location.href='#scroll_4';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         구매안내
        </div>
       </div>
       <p style="margin-top:120px;">
       </p>
       <div class="supplyInfo displaynone" style="display:none;">
       </div>
       <div class="eventArea" style="display:none;">
        <div class="event">
         <div id="CommonEvent4">
          <center>
           <br/>
           <br/>
           <br/>
           <br/>
           [ahref]
           
           <br/>
           <br/>
           [linkx]
           
          </center>
         </div>
        </div>
       </div>
      </div>
      <div class="xans-element- xans-product xans-product-additional">
       <div class="ec-base-tab grid5" id="prdDetail">
        <div class="cont" style="text-align:center;">
        </div>
       </div>
       [ahref]
       
       <div style="position:absolute; width:1920px; left:50%; margin-left:-960px; height:1px; background-color:#dadada; margin-top:100px;">
       </div>
       <div style="position:absolute; width:1200px; margin-top:54px;">
        <div onclick="location.href='#scroll_1';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         상세정보
        </div>
        <div onclick="location.href='#scroll_2';" style="float:left; width:300px; border-bottom:3px solid #fe3a78; font-size:16px; line-height:45px; font-weight:bold; text-align:center; color:#fe3a78; cursor:pointer;">
         사용후기
        </div>
        <div onclick="location.href='#scroll_3';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         Q&amp;A
        </div>
        <div onclick="location.href='#scroll_4';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         구매안내
        </div>
       </div>
       <p style="margin-top:110px;">
       </p>
       <div class="ec-base-tab grid5" id="prdReview">
        <div class="board">
         <div class="reviewArea" id="ec-board-zoom-wrapper" style="display:none;">
         </div>
         <div async_module="smartreview_dispZoom" async_type="template" class="reviewArea" id="ec-board-zoom">
          <div async_section="after" style="display:none;">
           <div class="dimmed">
           </div>
           <div class="zoomLayer">
            <h2>
             [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
            </h2>
            <div class="imgView" id="sliderWrap">
             <ul async_module="smartreview_dispFiles" async_type="template" class="slides">
              <li>
               {$*img_src}
              </li>
              <li>
               {$*img_src}
              </li>
             </ul>
             <div class="paging">
              <button class="btnPrev" type="button">
               이전
              </button>
              <button class="btnNext" type="button">
               다음
              </button>
             </div>
            </div>
            <div class="reviewThumb">
             <div class="thumbList">
              <p class="count">
              </p>
              <div id="zoomfakeScroll">
               <ul async_module="smartreview_dispFiles" async_type="template">
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
               </ul>
              </div>
             </div>
            </div>
            <button class="btnClose ec-board-list-zoom-close" type="button">
             닫기
            </button>
           </div>
          </div>
         </div>
         <div async_module="smartreview_dispRating" class="reviewArea">
          <div async_section="after" class="ec-board-files" style="display:none;">
           <div class="gradeArea {$*rating_display}">
            <div class="status ec-board-rating-grade {$*exist_display}">
             <strong class="score">
              {$*rating_avg}
             </strong>
             {$*display_bulletin_rating_medium_tpl}
             <p class="desc">
              (
              <strong>
               {$*writing_cnt}
              </strong>
              개 리뷰 평점)
             </p>
            </div>
            <div class="thumbList {$*exist_display}">
             <div async_module="smartreview_dispFiles" async_type="template">
              <div class="ec-board-files ec-board-files-list {$*exist_display}">
               <ul>
                <li>
                 <a class="ec-board-zoom-view-btn" data-index="{$*index}" href="e">
                  {$*img_src_thumb_figure}
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <p class="empty {$*empty_display}">
               리뷰 사진을 기다리고 있습니다.
              </p>
             </div>
            </div>
            <p class="empty {$*empty_display}">
             아직 상품리뷰가 없습니다.
             <br>
              상품을 구매하고 리뷰를 작성해보세요.
             </br>
            </p>
           </div>
          </div>
         </div>
         <div class="ec-board-list-multiple-list-wrapper">
          <div async_module="smartreview_dispList" class="reviewArea">
           <div async_section="before">
            <div class="loading">
            </div>
           </div>
           <div async_section="after" style="display:none;">
            <div async_module="smartreview_dispDetailReview">
             <div class="btnArea">
              [linkx]
              
              [linkx]
              
             </div>
            </div>
            <div class="reviewSearch">
             <ul class="sorting">
              <li class="selected">
               [linkx]
               
              </li>
              <[keywordx]>
              </[keywordx]>
              <li class="{$*display_rating_visible_class}">
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
             <div class="ctrl">
              <label>
               {$*display_is_photo_only_html} 포토리뷰만 보기
              </label>
              <div class="searchWrap">
               {$*display_keyword_type_html}
               <div class="search">
                <button class="btnSearch ec-board-list-search-keyword" type="submit">
                 검색
                </button>
               </div>
              </div>
             </div>
            </div>
            <div class="searchArea">
             <button class="btnOpen ec-board-list-search-detail {$*display_search_button_visible_class}" type="button">
              상세검색 열기
             </button>
             <div class="searchList ec-board-list-additems">
              <table border="1" summary="">
               <caption>
                상세검색
               </caption>
               <colgroup>
                <col style="width:123px;"/>
                <col style="width:auto;"/>
               </colgroup>
               <tbody async_module="smartreview_dispListSearch">
                <tr>
                 <th scope="row">
                  {$*item_name}
                 </th>
                 <td>
                  <div class="item {$*display_item_wrap_id}">
                   <span class="label">
                    <label>
                     전체
                    </label>
                   </span>
                  </div>
                 </td>
                </tr>
                <tr>
                 <th scope="row">
                  {$*item_name}
                 </th>
                 <td>
                  <div class="item {$*display_item_wrap_id}">
                   <span class="label">
                    <label>
                     전체
                    </label>
                   </span>
                  </div>
                 </td>
                </tr>
               </tbody>
              </table>
             </div>
            </div>
            <div class="reviewList ec-board-list-items-data {$*display_list_block_visible_class}">
             <ul async_module="smartreview_dispListItems">
              <li class="grid ec-board-list-item" data-bulletin-no="{$*bulletin_no}" style="display:none;">
               <div class="reviewInfo">
                <div class="reviewImg {$*display_bulletin_thumbnail_visible_class}">
                 [ahref]
                 
                 <div class="gradeLayer" title="{$*rating}">
                  <div class="ec-board-grade ec-board-star medium">
                   {$*display_bulletin_rating_medium_tpl}
                  </div>
                  <div class="gradeBg">
                  </div>
                 </div>
                </div>
                <div class="prdOption typeSimple {$*product_option_info_display} {$*product_option_info_visible_display}">
                 <p class="normal {$*normal_product_info_display}">
                  <span class="option">
                   {$*display_product_option_info}<li>[area1][keywordx]</li><li>[pkeyx]</li>[area1][keywordx][area1][mkey1]
                  </span>
                 </p>
                 <ul class="set {$*set_product_info_display}">
                  {$*display_product_set_info}
                 </ul>
                </div>
                <span class="icon {$*display_mobile_icon_visible_class}">
                 {$*display_mobile_icon_url}
                </span>
                <span class="icon {$*display_new_icon_visible_class}">
                 {$*display_new_icon_url}
                </span>
                [linkx]
                
                <div class="community">
                 [ahref]
                 
                 <div class="social">
                  <button class="btnLike {$*display_like_selected} ec-board-list-sns-share-button-{$*bulletin_no}" type="button">
                   좋아요
                  </button>
                  <button class="btnShare {$*display_sns_share_visible_class}" type="button">
                   공유하기
                  </button>
                  <div class="shareLayer">
                   <ul>
                    <li>
                    </li>
                    <li>
                    </li>
                    <li class="{$*display_sns_share_instagram_class}">
                    </li>
                   </ul>
                   <span class="edge">
                   </span>
                  </div>
                 </div>
                </div>
               </div>
               <div class="prdInfo {$*display_product_info_visible_class}">
                <p class="reviewThumb">
                 <a href="/product/detail.html?product_no=%7B%24*prd_no%7D">
                  {$*display_product_image_tag}
                 </a>
                </p>
                <div class="summary">
                 <a class="heading" href="/product/detail.html?product_no=%7B%24*prd_no%7D">
                  <strong>
                   {$*product_name|cut:15,...}
                  </strong>
                 </a>
                 <div class="prdOption typeSimple {$*product_option_info_display}">
                  <p class="normal {$*normal_product_info_display}">
                   <span class="option">
                    {$*display_product_option_info}
                   </span>
                  </p>
                  <ul class="set {$*set_product_info_display}">
                   {$*display_product_set_info}
                  </ul>
                 </div>
                 <div class="info">
                  <dl class="{$*display_rating_visible_class}">
                   <dt>
                    평점
                   </dt>
                   <dd>
                    {$*display_product_info_rating_avg}
                   </dd>
                  </dl>
                  <dl>
                   <dt>
                    리뷰
                   </dt>
                   <dd>
                    {$*display_product_info_review_count}
                   </dd>
                  </dl>
                 </div>
                </div>
               </div>
              </li>
              <li class="grid ec-board-list-item" data-bulletin-no="{$*bulletin_no}" style="display:none;">
               <div class="reviewInfo">
                <div class="reviewImg {$*display_bulletin_thumbnail_visible_class}">
                 [ahref]
                 
                 <div class="gradeLayer" title="{$*rating}">
                  <div class="ec-board-grade ec-board-star medium">
                   {$*display_bulletin_rating_medium_tpl}
                  </div>
                  <div class="gradeBg">
                  </div>
                 </div>
                </div>
                <div class="prdOption typeSimple {$*product_option_info_display} {$*product_option_info_visible_display}">
                 <p class="normal {$*normal_product_info_display}">
                  <span class="option">
                   {$*display_product_option_info}
                  </span>
                 </p>
                 <ul class="set {$*set_product_info_display}">
                  {$*display_product_set_info}
                 </ul>
                </div>
                <span class="icon {$*display_mobile_icon_visible_class}">
                 {$*display_mobile_icon_url}
                </span>
                <span class="icon {$*display_new_icon_visible_class}">
                 {$*display_new_icon_url}
                </span>
                [linkx]
                
                <div class="community">
                 [linkx]
                 
                 <div class="social">
                  <button class="btnLike {$*display_like_selected} ec-board-list-sns-share-button-{$*bulletin_no}" type="button">
                   좋아요
                  </button>
                  <button class="btnShare {$*display_sns_share_visible_class}" type="button">
                   공유하기
                  </button>
                  <div class="shareLayer">
                   <ul>
                    <li>
                    </li>
                    <li>
                    </li>
                    <li class="{$*display_sns_share_instagram_class}">
                    </li>
                   </ul>
                   <span class="edge">
                   </span>
                  </div>
                 </div>
                </div>
               </div>
               <div class="prdInfo {$*display_product_info_visible_class}">
                <p class="reviewThumb">
                 [ahref]
                 
                </p>
                <div class="summary">
                 <a class="heading" href="/product/detail.html?product_no=%7B%24*prd_no%7D">
                  <strong>
                   {$*product_name|cut:15,...}
                  </strong>
                 </a>
                 <div class="prdOption typeSimple {$*product_option_info_display}">
                  <p class="normal {$*normal_product_info_display}">
                   <span class="option">
                    {$*display_product_option_info}
                   </span>
                  </p>
                  <ul class="set {$*set_product_info_display}">
                   {$*display_product_set_info}
                  </ul>
                 </div>
                 <div class="info">
                  <dl class="{$*display_rating_visible_class}">
                   <dt>
                    평점
                   </dt>
                   <dd>
                    {$*display_product_info_rating_avg}
                   </dd>
                  </dl>
                  <dl>
                   <dt>
                    리뷰
                   </dt>
                   <dd>
                    {$*display_product_info_review_count}
                   </dd>
                  </dl>
                 </div>
                </div>
               </div>
              </li>
             </ul>
            </div>
            <div class="reviewListEmpty ec-board-list-items-empty {$*display_list_empty_block_visible_class}">
             상품리뷰가 없습니다.
            </div>
            <button class="btnMore ec-board-list-more-button {$*display_list_more_button_visible_class}" type="button">
             <span>
              리뷰글 더 보기
             </span>
            </button>
           </div>
           <div async_section="error" style="display:none;">
            <div class="reviewListEmpty">
             상품리뷰가 없습니다.
            </div>
           </div>
          </div>
          <div async_module="smartreview_dispListItems" async_type="template" class="ec-board-list-items-template" style="display:none;">
           <ul async_section="after" style="display:none;">
            <li>[area1][mkey1]</li>[area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref]
           </ul>
          </div>
         </div>
        </div>
       </div>
       [ahref]
       
       <div style="position:absolute; width:1920px; left:50%; margin-left:-960px; height:1px; background-color:#dadada; margin-top:100px;">
       </div>
       <div style="position:absolute; width:1200px; margin-top:54px;">
        <div onclick="location.href='#scroll_1';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         상세정보
        </div>
        <div onclick="location.href='#scroll_2';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         사용후기
        </div>
        <div onclick="location.href='#scroll_3';" style="float:left; width:300px; border-bottom:3px solid #fe3a78; font-size:16px; line-height:45px; font-weight:bold; text-align:center; color:#fe3a78; cursor:pointer;">
         Q&amp;A
        </div>
        <div onclick="location.href='#scroll_4';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         구매안내
        </div>
       </div>
       <p style="margin-top:110px;">
       </p>
       <div class="ec-base-tab grid5" id="prdQnA">
        <div class="board">
         <p class="nodata">
          게시물이 없습니다[pkeyx][area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][keywordx][area1][mkey1][linkx][area1][mkey1][area1][keywordx][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][mkey1][area1][keywordx][area1][keywordx]
         </p>
         <p class="ec-base-button typeBorder">
          <span class="gRight">
           <a class="btnNormal" href="/board/product/write.html?board_no=6&amp;product_no=148&amp;cate_no=1&amp;display_group=46">
            상품문의하기
           </a>
           [ahref]
           
          </span>
         </p>
        </div>
       </div>
       [ahref]
       
       <div style="position:absolute; width:1920px; left:50%; margin-left:-960px; height:1px; background-color:#dadada; margin-top:100px;">
       </div>
       <div style="position:absolute; width:1200px; margin-top:54px;">
        <div onclick="location.href='#scroll_1';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         상세정보
        </div>
        <div onclick="location.href='#scroll_2';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         사용후기
        </div>
        <div onclick="location.href='#scroll_3';" style="float:left; width:300px; border-bottom:0px solid #fe3a78; font-size:15px; line-height:45px; font-weight:normal; text-align:center; color:#1f1e1e; cursor:pointer;">
         Q&amp;A
        </div>
        <div onclick="location.href='#scroll_4';" style="float:left; width:300px; border-bottom:3px solid #fe3a78; font-size:16px; line-height:45px; font-weight:bold; text-align:center; color:#fe3a78; cursor:pointer;">
         구매안내
        </div>
       </div>
       <div style="position:relative; width:1920px; left:50%; margin-left:-960px; margin-top:101px; background-color:#fcfcfc;">
        <center>
         <div style="position:relative; width:1200px; text-align:left;">
          <div style="width:100%; border-bottom:1px solid #cccccc; font-size:22px; line-height:50px;">
           <br>
            결제안내
           </br>
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           결제정보
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 고액결제의 경우 안전을 위해 카드사에서 확인전화를 드릴 수도 있습니다.
           <br>
            - 확인과정에서 도난 카드의 사용이나 타인 명의의 주문등 정상적인 주문이 아니라고 판단될 경우 임의로 주문을 보류 또는 취소할 수 있습니다.
            <br>
             - 무통장 입금은 상품 구매 대금은 PC뱅킹, 인터넷뱅킹, 텔레뱅킹 혹은 가까운 은행에서 직접 입금하시면 됩니다.
             <br>
              - 주문시 입력한 입금자명과 실제입금자의 성명이 반드시 일치하여야 하며, 7일 이내로 입금을 하셔야 하며 입금되지 않은 주문은 자동취소 됩니다.
             </br>
            </br>
           </br>
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           무통장 입금
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 무통장 입금은 입금 후 30분 내로 자동으로 이뤄집니다. 입금 직후 미확인으로 보이시더라도 잠시만 기다려 주시면 자동으로 처리되어 출고 준비에 들어가니 안심하고 기다려
  주시기 바랍니다.
           <br>
            - 입금자 확인을 위하여 반드시 주문 시 기입한 입금자명으로 입금해 주시기 바랍니다.
            <br>
             - 간혹 구매자와 입금자명이 다르거나, 동명이인의 구매자나 입금자가 있을 경우 자동 입금 확인이 안 되는 경우도 있으니, 본인의 이름이 조금 흔한 편이시라면
  이름 뒤에 전화번호 4자리를 함께 적어주시기 바랍니다. (예 : 김지현0405) 위와 같은 상황을 방지할 수 있습니다.
             <br>
              - 입금예정일로부터 7일 이내에 입금 확인이 되지 않을 경우 주문이 자동적으로 취소됩니다.
              <br>
               - 그 밖의 사유로 입금확인이 더디게 되시는 분이 계시다면 언제든 에버비키니 고객센터로 문의하시기 바랍니다.
              </br>
             </br>
            </br>
           </br>
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc; font-size:22px; line-height:50px;">
           <br>
            배송안내
           </br>
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           포장과정
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 에버비키니의 전 제품의 포장 과정은 고화질 HD CCTV 카메라로 촬영되고 있습니다.
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           배송방법
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 택배 / CJ대한통운
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           포장지역
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 전국
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           배송비용
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 30,000원 이상 구매시 무료배송 (제주도 3,000원 / 도서산간지역 4,500원)
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           배송기간
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 발송일 기준 2일 ~ 5일(단, 공휴일, 기념일 등 제외 / 일시 품절 또는 주문 폭주, 택배사의 사정으로 배송이 1~2일 늦어질 수도 있습니다.)
           <br>
            - 당일 오후 3시 이전 주문 건은 입금 분에 한해서 당일 출고를 원칙으로 합니다. (주말/공휴일 제외)
           </br>
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           기타사항
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 도서, 산간 오지 등 교통이 불편한 지역은 지역에 따라 2~3일 추가 소요 (추석, 설, 연말연시 등 접수물량이 많은 경우에 1~2일 지연될 수 있음)
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc; font-size:22px; line-height:50px;">
           <br>
            반품 교환 안내
           </br>
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           신청기간
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 교환/반품 신청은 배송 완료 후 7일 이내 가능합니다.
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           반품/교환 택배비
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           <li>[area1][mkey1]</li>[area1][keywordx]<li>[linkx]</li>
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           반품/교환이 불가능한 경우
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 배송이 완료 된 후 7일이 경과한 경우
           <br>
            - 고객님의 책임으로 상품이 손실 및 훼손된 경우
            <br>
             - 시간이 경과하여 재판매가 불가하거나 상품의 가치가 훼손된 경우
             <br>
              - 상품박스 및 포장, 뚜껑 등 파우치를 개봉하였거나 개봉 후 내용물을 사용한 경우
              <br>
               - 상품의 내용물을 개봉하지 않았더라도 상품의 박스 및 포장 등을 훼손하거나 분실된 경우
              </br>
             </br>
            </br>
           </br>
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           환불문의
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 무통장 환불 건은 접수 이후 처리까지 1~3일 소요됩니다. (주말 및 공휴일 제외)
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           교환/반품 주소
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 경기도 포천시 가산면 가산로 152(방축리)바동
           <br>
            - 반품/교환 시 에버비키니 지정택배인 CJ대한통운 택배를 이용해 주시기 바랍니다. (타 택배 이용시 추가 운임비용은 고객님께서 부담하셔야 합니다.)
           </br>
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           기타사항
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 주문 건 폭주로 인해 결제 완료 이후 주문내역 및 주소변경은 불가하오니, 주문 시 이 부분 꼭 확인하시고 결제하시기 바랍니다.
           <br/>
           (선택사항 변경, 주소 변경, 연락처 변경, 수령자 변경 등) 주문내역 및 주소 오기재로 인한 반품 및 교환시에는 왕복 운임비는 고객님 부담입니다.
           <br/>
           - 주문 후 취소는 출고 준비가 완료 중인 상태에서는 취소가 불가능 하며, 제품 수령 후 반품 신청을 해주셔야 합니다. 이때, 단순 변심 사유의 반품은 고객님께서 운임비를
  부담해 주셔야 합니다.
           <br/>
           - 제품을 받아보시고 주문하신 것과 다르거나 기타 문의사항이 있으시면 고객센터(070-5101-3000)로 연락 주시기 바랍니다.
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc; font-size:22px; line-height:50px;">
           <br/>
           주의사항
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           섭취 시 주의사항
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 특이체질 및 알레르기 체질인 경우 개인에 따라 과민반응을 나타낼 수 있으므로 확인 하신 후 섭취하십시오.
           <br/>
           - 제품 개봉 또는 섭취 시 포장재에 의한 상처를 주의하시기 바랍니다.
           <br/>
           - 섭취 목적으로 개봉된 제품은 즉시 드십시오.
           <br/>
           - 원료성분에 의해 간혹 침전물이 생길 수 있으나, 변질이 아니 오니 안심하고 잘 흔들어 드십시오.
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <div style="float:left; width:15%; font-size:14px; margin-top:15px;">
           게시판 주의사항
          </div>
          <div style="float:left; width:85%; font-size:14px; margin-top:15px;">
           - 게시판의 성격과 맞지 않는 글이나, 광고, 홍보 목적의 글이 게시되는 경우 별도의 통보 없이 게시글이 삭제 또는 이동됩니다.
           <br/>
           - 정직한 후기 전달을 위해 회원 가입 후, 실제 구매 회원님의 후기만 게시됩니다.
          </div>
          <div style="width:100%; border-bottom:1px solid #cccccc;">
          </div>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
          <br/>
         </div>
        </center>
       </div>
       <div id="NaverChk_Button">
       </div>
       <p style="margin-top:-70px;">
       </p>
      </div>
     </div>
    </div>
   </div>
   [linkx]
   
   <div id="footer">
    <div class="inner">
     <div class="xans-element- xans-layout xans-layout-footer">
      <ul class="utilMenu">
       <li class="home">
        <a href="/shopinfo/company.html">
         브랜드스토리[linkx][area1][keywordx][area1][keywordx][ahref][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][area1][mkey1][area1][keywordx][area1][mkey1][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][pkeyx][ahref][linkx][ahref][area1][mkey1]
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
      <div style="position:absolute; width:180px; left:50%; margin-left:-600px; margin-top:-30px;">
       Beauty total mall EVERBIKINI
      </div>
      <div style="position:absolute; width:180px; left:50%; margin-left:460px; margin-top:-30px;">
      </div>
      <center>
       <div style="position:relative; width:1200px; height:192px; margin-top:0px;">
        <div style="float:left; padding:40px 0 0 0; width:400px; height:152px; text-align:left;">
         <p style="font-size:16px;">
          고객센터
         </p>
         <p style="font-size:20px; font-weight:bold; margin-top:8px;">
          070-5101-3000
         </p>
         <p style="font-size:13px; line-height:22px; margin-top:10px;">
          평
          <font style="letter-spacing:0.3px;">
          </font>
          일 am10:00 ~ pm06:00
          <br/>
          점심시간 pm12:00 ~ pm01:20  주말·법정공휴일 휴무
         </p>
        </div>
        <div style="float:left; padding:40px 0 0 0; width:399px; height:152px; border-left:1px solid #e5e5e5; text-align:left;">
         <p style="font-size:16px; margin-left:40px;">
          계좌정보
         </p>
         <p style="font-size:20px; font-weight:bold; margin-left:40px; margin-top:8px;">
         </p>
         <p style="font-size:13px; line-height:22px; margin-left:40px; margin-top:10px;">
          예금주 (주)비타민마을<li>[area1][mkey1]</li><li>[pkeyx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[pkeyx]</li>
         </p>
        </div>
        <div style="float:left; padding:40px 0 0 0; width:399px; height:152px; border-left:1px solid #e5e5e5; text-align:left;">
         <p style="font-size:16px; margin-left:40px;">
          배송조회 및 반품주소
         </p>
         <p style="font-size:20px; font-weight:bold; margin-left:40px; margin-top:8px;">
          [linkx]
          
         </p>
         <p style="font-size:13px; line-height:22px; margin-left:40px; margin-top:10px;">
          11168 경기도 포천시 가산면 가산로 152 (방축리) 바동
         </p>
        </div>
       </div>
      </center>
      <p class="address">
       <br/>
       (주)비타민마을 11168 경기도 포천시 가산면 가산로 152 방축리 바동
       <br/>
       대표 김세환    사업자번호 231-81-06761    통신판매업 신고 제 2014-경기포천-0233 호
       <a href="/bizCommPop.do?wrkr_no=2318106761" target="_blank">
        [사업자정보확인]
       </a>
       <br/>
       개인정보보호책임자 : 김세환(vsolution0@gmail.com)    광고/제휴 문의 : 070-5101-3001(lim.sy@vitaminvillage.co.kr)
       <br/>
       <br/>
       에버비키니 쇼핑몰은 고객님의 안전거래를 위해 현금 등 모든거래 결제시 LG U+
       <a href="/ms/escrow/s_escrowYn.do?mertid=CF_everbikini" target="_blank">
        전자결제의 매매보호(에스크로)서비스
       </a>
       를 적용하고 있습니다.
       <br/>
       <br/>
       <font style="color:#e94582;">
        에버비키니 홈페이지 내의 모든 기획및 콘텐츠에 대한 저작권은 에버비키니에 있습니다.
        <br/>
        유사한 콘텐츠를 만들거나 기획내용을 무단 도용 할 경우 법적인 처벌을 받습니다.
       </font>
       <br/>
       <br/>
       Copyright © 2017 에버비키니. All rights reserved.
      </p>
     </div>
    </div>
   </div>
   <div id="progressPaybar" style="display:none;">
    <div class="layerProgress" id="progressPaybarBackground">
    </div>
    <div id="progressPaybarView">
     <div class="box">
      <p class="graph">
       <span>
       </span>
       <span>
       </span>
      </p>
      <p class="txt">
       본 결제 창은 결제완료 후 자동으로 닫히며,결제 진행 중에 본 결제 창을 닫으시면
       <br/>
       주문이 되지 않으니 결제 완료 될 때 까지 닫지 마시기 바랍니다.
      </p>
     </div>
    </div>
   </div>
   <div class="reviewArea" id="ec-board-zoom-wrapper" style="display:none;">
   </div>
   <div async_module="smartreview_dispZoom" async_type="template" class="reviewArea" id="ec-board-zoom">
    <div async_section="after" style="display:none;">
     <div class="dimmed">
     </div>
     <div class="zoomLayer">
      <h2>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="imgView" id="sliderWrap">
       <ul async_module="smartreview_dispFiles" async_type="template" class="slides">
        <li>
         {$*img_src}
        </li>
        <li>
         {$*img_src}
        </li>
       </ul>
       <div class="paging">
        <button class="btnPrev" type="button">
         이전
        </button>
        <button class="btnNext" type="button">
         다음
        </button>
       </div>
      </div>
      <div class="reviewThumb">
       <div class="thumbList">
        <p class="count">
        </p>
        <div id="zoomfakeScroll">
         <ul async_module="smartreview_dispFiles" async_type="template">
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </div>
       </div>
      </div>
      <button class="btnClose ec-board-list-zoom-close" type="button">
       닫기
      </button>
     </div>
    </div>
   </div>
   <div class="reviewArea" id="ec-board-read-wrapper" style="display:none;">
    <div class="loadingBar">
     <p>
      처리중입니다. 잠시만 기다려 주세요.
     </p>
    </div>
   </div>
   <div async_module="smartreview_dispRead" async_type="template" class="reviewArea">
    <div async_section="before" style="display:none;">
     <div class="loadingBar">
      [area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][mkey1][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </div>
    </div>
    <div async_section="after" style="display:none;">
     <div id="ec-board-review-read">
      <div class="dimmed">
      </div>
      <div class="reviewWrap ec-board-review-wrap">
       <div class="reviewLayer typeRead">
        <h2>
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h2>
        <div class="reviewContent">
         <div class="prdInfo">
          <p class="reviewThumb">
           [ahref]
           
          </p>
          <div class="summary">
           <p class="icon">
            {$*display_product_new_icon} {$*display_product_recommand_icon} {$*display_product_soldout_icon} {$*display_product_stock_icon}
           </p>
           [linkx]
           
           <p class="price">
            {$*product_price} {$*product_tax_type_text}
           </p>
           <div class="info">
            <dl>
             <dt>
              리뷰
             </dt>
             <dd>
              {$*product_review_count}
             </dd>
            </dl>
            <dl class="{$*product_rating_display}">
             <dt>
              평점
             </dt>
             <dd>
              {$*product_rating}
             </dd>
            </dl>
           </div>
          </div>
         </div>
         <div async_module="smartreview_dispReadMileage" async_type="template" class="ec-board-mileage-wrapper">
          <div async_section="after" class="mileage" style="display:none;">
           <p class="name">
            {$*display_group_icon}
            [ahref]
            
           </p>
           <p class="desc {$*desc_todo_display}">
            <span class="label">
             {$*mileage_input_tag}
            </span>
            <span class="label">
             {$*mileage_input_tag}
            </span>
           </p>
           [ahref]
           
           <p class="desc {$*desc_done_display}">
            <strong>
             {$*done_price}{$*done_price_tail}
            </strong>
            <span class="date">
             {$*done_date}
            </span>
           </p>
          </div>
         </div>
         <div async_module="smartreview_dispReadAddItem" async_type="template" class="{$*display_adding_item}">
          <div async_section="after" class="addItem" style="display:none;">
           <table border="1" summary="">
            <caption>
             추가항목
            </caption>
            <colgroup>
             <col style="width:110px;"/>
             <col style="width:auto;"/>
            </colgroup>
            <tbody>
             <tr class="{$*adding_item_info_display}">
              <th scope="row">
               {$*item_name}
              </th>
              <td>
               {$*item_value}
              </td>
             </tr>
             <tr class="{$*adding_item_info_display}">
              <th scope="row">
               {$*item_name}
              </th>
              <td>
               {$*item_value}
              </td>
             </tr>
             <tr class="{$*product_option_info_display}">
              <th scope="row">
               선택한 옵션
              </th>
              <td>
               <div class="prdOption">
                <p class="normal {$*normal_product_info_display}">
                 <span class="option">
                  {$*display_product_option_info}
                  <strong class="etc {$*normal_product_order_quantity_display}">
                   외 {$*display_normal_product_order_quantity}개 구매
                  </strong>
                 </span>
                </p>
                <ul class="set {$*set_product_info_display}">
                 {$*display_product_set_info}
                </ul>
                <p class="etc {$*set_product_info_etc_display}">
                 <span class="etcCount {$*set_product_others_count_display}">
                  외 {$*display_set_product_others_count}개 구성상품 포함
                  <strong class="subInfo {$*set_product_order_quantity_display}">
                   외 {$*display_set_product_order_quantity}개 구매
                  </strong>
                 </span>
                </p>
               </div>
              </td>
             </tr>
            </tbody>
           </table>
          </div>
          <div async_section="error" style="display:none;">
          </div>
         </div>
         <div class="view">
          <div class="text ec-board-content">
           {$*display_content}
          </div>
          <div async_module="smartreview_dispFiles" async_type="template" class="{$*view_display}">
           [ahref]
           
           <br/>
           <a class="ec-board-zoom-view-btn" data-index="{$*index}" href="e">
            {$*img_src}
           </a>
           <br/>
          </div>
         </div>
         <div class="social">
          <button class="btnLike ec-board-like {$*display_like_selected}" data-no="{$*no}" type="button">
           좋아요
          </button>
          <button class="btnShare ec-board-share {$*sns_share_display}" type="button">
           공유하기
          </button>
          <div class="shareLayer">
           <ul>
            <li>
             <a class="ec-board-share-facebook" data-no="{$*no}" href="e">
              페이스북
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li class="{$*sns_share_instagram_display}">
             [ahref]
             
            </li>
           </ul>
           <span class="edge">
           </span>
          </div>
         </div>
         <div class="miniButton">
          <span class="left {$*admin_display}">
           해당글을
           [ahref]
           
          </span>
          [linkx]
          
          [linkx]
          
         </div>
         <div async_module="smartreview_dispComment" async_type="template" class="ec-board-comment-wrapper">
          <div async_section="before">
           <div class="loading">
           </div>
          </div>
          <div async_section="after" style="display:none;">
           {$*csrf}
           <div class="commentWrite {$*no_right_class}">
            <p class="count">
             댓글
             <strong class="ec-board-comment-count">
              {$*count_comment}
             </strong>
             개
            </p>
            <div async_module="smartreview_dispCommentWrite" async_type="template" class="writeForm">
             <div async_section="before">
              <div class="loading">
              </div>
             </div>
             <div async_section="after" style="display:none;">
              [linkx]
              
             </div>
            </div>
           </div>
           <div async_module="smartreview_dispCommentList" async_type="template" class="commentList ec-board-comment-list">
            <div async_section="before">
             <div class="loading">
             </div>
            </div>
            <div async_section="after" style="display:none;">
             <ul class="{$*exist_display}">
              <li class="ec-board-comment-layer" data-comment_no="{$*no}">
               <p class="summary">
                <span class="ec-board-comment-icon">
                 {$*display_group_icon}{$*display_nick_icon}
                </span>
                [ahref]
                
                <span class="date ec-board-comment-date">
                 {$*write_date}
                </span>
               </p>
               <div class="comment ec-board-comment-content">
                {$*display_content}
               </div>
               <div class="writeForm ec-board-comment-modify-content" style="display:none;">
                <a class="btnModify ec-board-comment-modify-btn" href="e">
                </a>
               </div>
               <div class="button">
                <button class="btnComment modify {$*modify_display} ec-board-comment-modify-view-btn" type="button">
                 수정
                </button>
                <button class="btnComment delete {$*delete_display} ec-board-comment-delete-btn" type="button">
                 삭제
                </button>
                <button class="btnComment cancel ec-board-comment-modify-cancel-btn" style="display:none;" type="button">
                 취소
                </button>
               </div>
              </li>
              <li class="ec-board-comment-layer" data-comment_no="{$*no}">
               <p class="summary">
                <span class="ec-board-comment-icon">
                 {$*display_group_icon}{$*display_nick_icon}
                </span>
                <a class="{$*display_member_admin_link_class}" href="D">
                 <strong class="name ec-board-comment-writer">
                  {$*display_writer}
                 </strong>
                </a>
                <span class="date ec-board-comment-date">
                 {$*write_date}
                </span>
               </p>
               <div class="comment ec-board-comment-content">
                {$*display_content}
               </div>
               <div class="writeForm ec-board-comment-modify-content" style="display:none;">
                [linkx]
                
               </div>
               <div class="button">
                <button class="btnComment modify {$*modify_display} ec-board-comment-modify-view-btn" type="button">
                 수정
                </button>
                <button class="btnComment delete {$*delete_display} ec-board-comment-delete-btn" type="button">
                 삭제
                </button>
                <button class="btnComment cancel ec-board-comment-modify-cancel-btn" style="display:none;" type="button">
                 취소
                </button>
               </div>
              </li>
             </ul>
             <div class="commentListEmpty {$*empty_display}">
              작성된 댓글이 없습니다.
             </div>
            </div>
           </div>
           <button class="btnMore {$*more_display} ec-board-comment-more-btn" style="display:none;" type="button">
            <span>
             더 보기
            </span>
           </button>
          </div>
         </div>
        </div>
        <div class="fixedBar">
         <div class="writerInfo">
          <h3 class="writer">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h3>
          <div class="ec-board-grade ec-board-grade-read ec-board-star large">
          </div>
          <div class="info">
           <dl>
            <dt>
             리뷰 조회수[area1][mkey1][area1][mkey1]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li>
            </dt>
            <dd>
             {$*count_hit}
            </dd>
           </dl>
           <dl>
            <dt>
             리뷰의 댓글<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[ahref]</li><li>[pkeyx]</li>
            </dt>
            <dd class="ec-board-comment-count">
             {$*count_comment}
            </dd>
           </dl>
           <dl>
            <dt>
             이 리뷰가 좋아요
            </dt>
            <dd class="ec-board-like-count">
             {$*count_like}
            </dd>
           </dl>
          </div>
         </div>
         <div class="close">
          <button class="btnClose ec-board-list-read-close" type="button">
           닫기
          </button>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="reviewArea">
   <div id="ec-board-write-wrapper" style="display:none;">
   </div>
   <div async_module="smartreview_dispWrite" async_type="template">
    <div async_section="before" style="display:none;">
     <div class="loadingBar">
      <p>
       처리중입니다. 잠시만 기다려 주세요.
      </p>
     </div>
    </div>
    <div async_section="after" style="display:none;">
     <div id="ec-board-review-write">
      <div class="dimmed">
      </div>
      <div class="reviewLayer typeWrite ec-board-review-wrap">
       <h2>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
       <div class="content">
        <div class="prdInfo">
         <p class="reviewThumb">
          [linkx]
          
         </p>
         <div class="summary">
          <p class="icon">
           {$*display_product_new_icon} {$*display_product_recommand_icon} {$*display_product_soldout_icon} {$*display_product_stock_icon}
          </p>
          <strong class="heading">
           {$*product_name|cut:50,...}
          </strong>
          <p class="price">
           {$*product_price} {$*product_tax_type_text}
          </p>
          <div class="info">
           <dl>
            <dt>
             리뷰
            </dt>
            <dd>
             {$*product_review_count}
            </dd>
           </dl>
           <dl class="{$*product_rating_display}">
            <dt>
             평점
            </dt>
            <dd>
             {$*product_rating}
            </dd>
           </dl>
           [ahref]
           
          </div>
         </div>
        </div>
        <div class="ec-board-grade ec-board-grade-write ec-board-star large">
        </div>
        <div class="attachList empty">
         <ul>
          <li>
           <label class="btnAdd" for="ec-board-review-upload1">
           </label>
          </li>
         </ul>
         <label class="btnAddEmpty" for="ec-board-review-upload0">
         </label>
        </div>
        <div async_module="smartreview_dispWriteAddItem" async_type="template" class="{$*display_adding_item}">
         <div async_section="before" style="display:none;">
          <div class="loading">
          </div>
         </div>
         <div async_section="after" class="addItem" style="display:none;">
          <table border="1" summary="">
           <caption>
            추가항목
           </caption>
           <colgroup>
            <col style="width:110px;"/>
            <col style="width:auto;"/>
           </colgroup>
           <tbody>
            <tr class="{$*adding_item_info_display}">
             <th scope="row">
              {$*item_name}
             </th>
             <td>
              {$*item_value}
             </td>
            </tr>
            <tr class="{$*adding_item_info_display}">
             <th scope="row">
              {$*item_name}
             </th>
             <td>
              {$*item_value}
             </td>
            </tr>
            <tr class="{$*product_option_info_display}">
             <th scope="row">
              선택한 옵션
             </th>
             <td>
              <div class="prdOption">
               <p class="normal {$*normal_product_info_display}">
                <span class="option">
                 {$*display_product_option_info}
                 <strong class="etc {$*normal_product_order_quantity_display}">
                  외 {$*display_normal_product_order_quantity}개 구매
                 </strong>
                </span>
               </p>
               <ul class="set {$*set_product_info_display}">
                {$*display_product_set_info}
               </ul>
               <p class="etc {$*set_product_info_etc_display}">
                <span class="etcCount {$*set_product_others_count_display}">
                 외 {$*display_set_product_others_count}개 구성상품 포함
                 <strong class="subInfo {$*set_product_order_quantity_display}">
                  외 {$*display_set_product_order_quantity}개 구매
                 </strong>
                </span>
               </p>
              </div>
             </td>
            </tr>
           </tbody>
          </table>
         </div>
         <div async_section="error" style="display:none;">
         </div>
        </div>
        <div class="contentWarp">
         {$*csrf}
         <div class="contentBox">
         </div>
        </div>
        <p class="wordCount">
         <strong class="blind">
          글자수
         </strong>
         <span class="ec-board-current-text-count">
         </span>
         <span class="ec-board-current-text-tail">
         </span>
        </p>
        <div async_module="smartreview_dispWriteHashTag" async_type="template" class="{$*display_hash_tag}">
         <div async_section="before" style="display:none;">
          <div class="loading">
          </div>
         </div>
         <div async_section="after" class="recommend" style="display:none;">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <div class="tags">
           <span class="btnHash">
            {$*hashtag}
           </span>
           <span class="btnHash">
            {$*hashtag}
           </span>
          </div>
         </div>
         <div async_section="error" style="display:none;">
         </div>
        </div>
        <div class="postSns {$*use_sns_display}">
         <h3>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h3>
         <span class="checkDesign">
          <label for="ec-board-post-sns">
           허용
          </label>
         </span>
        </div>
        <div class="noMember {$*use_is_login_display}">
         <h3>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h3>
         <div class="termArea">
          <span class="checkDesign">
           <label class="ec-board-term-agree">
            개인정보 수집 및 이용동의
           </label>
          </span>
          <button class="ec-board-button-agree btnFold" type="button">
           내용보기
          </button>
         </div>
        </div>
        <div class="btnArea">
         [linkx]
         
        </div>
       </div>
       <div class="close">
        <button class="btnClose" id="ec-board-review-write-close-button" type="button">
         닫기
        </button>
       </div>
      </div>
     </div>
    </div>
    <div async_section="error" style="display:none;">
     error
    </div>
   </div>
  </div>
  <div class="reviewArea">
   <div id="ec-board-write-wrapper" style="display:none;">
   </div>
   <div async_module="smartreview_dispModify" async_type="template">
    <div async_section="before" style="display:none;">
     <div class="loadingBar">
      <p>
       처리중입니다. 잠시만 기다려 주세요.
      </p>
     </div>
    </div>
    <div async_section="after" style="display:none;">
     <div id="ec-board-review-write">
      <div class="dimmed">
      </div>
      <div class="reviewLayer typeWrite ec-board-review-wrap">
       <h2>
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h2>
       <div class="content">
        <div class="prdInfo">
         <p class="reviewThumb">
          <a class="ec-board-product-link" href="/product/detail.html?product_no=%7B%24*product_no%7D">
           {$*img_product_tiny_image}
          </a>
         </p>
         <div class="summary">
          <p class="icon">
           {$*display_product_new_icon} {$*display_product_recommand_icon} {$*display_product_soldout_icon} {$*display_product_stock_icon}
          </p>
          <strong class="heading">
           {$*product_name|cut:50,...}
          </strong>
          <p class="price">
           {$*product_price} {$*product_tax_type_text}
          </p>
          <div class="info">
           <dl>
            <dt>
             리뷰
            </dt>
            <dd>
             {$*product_review_count}
            </dd>
           </dl>
           <dl class="{$*product_rating_display}">
            <dt>
             평점
            </dt>
            <dd>
             {$*product_rating}
            </dd>
           </dl>
           [linkx]
           
          </div>
         </div>
        </div>
        <div class="ec-board-grade ec-board-grade-write ec-board-star large">
        </div>
        <div async_module="smartreview_dispModifyFile" async_type="template">
         <div async_section="before" style="display:none;">
          <div class="loading">
          </div>
         </div>
         <div async_section="after">
          <div class="attachList empty">
           <ul>
            <li class="{$*imageAssign}">
             {$*img_url}
             <button class="btnDelete" type="button">
              삭제
             </button>
            </li>
            <li class="{$*imageAssign}">
             {$*img_url}
             <button class="btnDelete" type="button">
              삭제
             </button>
            </li>
           </ul>
           <label class="btnAdd" for="ec-board-review-upload1" style="display:none;">
            사진추가
           </label>
           <label class="btnAddEmpty" for="ec-board-review-upload0" style="display:none;">
            사진추가
           </label>
          </div>
         </div>
         <div async_section="error" style="display:none;">
         </div>
        </div>
        <div async_module="smartreview_dispModifyAddItem" async_type="template" class="{$*display_adding_item}">
         <div async_section="before" style="display:none;">
          <div class="loading">
          </div>
         </div>
         <div async_section="after" class="addItem" style="display:none;">
          <table border="1" summary="">
           <caption>
            추가항목
           </caption>
           <colgroup>
            <col style="width:110px;"/>
            <col style="width:auto;"/>
           </colgroup>
           <tbody>
            <tr class="{$*adding_item_info_display}">
             <th scope="row">
              {$*item_name}
             </th>
             <td>
              {$*item_value}
             </td>
            </tr>
            <tr class="{$*adding_item_info_display}">
             <th scope="row">
              {$*item_name}
             </th>
             <td>
              {$*item_value}
             </td>
            </tr>
            <tr class="{$*product_option_info_display}">
             <th scope="row">
              선택한 옵션
             </th>
             <td>
              <div class="prdOption">
               <p class="normal {$*normal_product_info_display}">
                <span class="option">
                 {$*display_product_option_info}
                 <strong class="etc {$*normal_product_order_quantity_display}">
                  외 {$*display_normal_product_order_quantity}개 구매
                 </strong>
                </span>
               </p>
               <ul class="set {$*set_product_info_display}">
                {$*display_product_set_info}
               </ul>
               <p class="etc {$*set_product_info_etc_display}">
                <span class="etcCount {$*set_product_others_count_display}">
                 외 {$*display_set_product_others_count}개 구성상품 포함
                 <strong class="subInfo {$*set_product_order_quantity_display}">
                  외 {$*display_set_product_order_quantity}개 구매
                 </strong>
                </span>
               </p>
              </div>
             </td>
            </tr>
           </tbody>
          </table>
         </div>
         <div async_section="error" style="display:none;">
         </div>
        </div>
        <div class="contentWarp">
         {$*csrf}
         <div class="contentBox">
         </div>
        </div>
        <p class="wordCount">
         <strong class="blind">
          글자수
         </strong>
         <span class="ec-board-current-text-count">
         </span>
         <span class="ec-board-current-text-tail">
         </span>
        </p>
        <div async_module="smartreview_dispModifyHashTag" async_type="template" class="{$*display_hash_tag}">
         <div async_section="before" style="display:none;">
          <div class="loading">
          </div>
         </div>
         <div async_section="after" class="recommend" style="display:none;">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <div class="tags">
           <span class="btnHash">
            {$*hashtag}
           </span>
           <span class="btnHash">
            {$*hashtag}
           </span>
          </div>
         </div>
         <div async_section="error" style="display:none;">
         </div>
        </div>
        <div class="postSns {$*use_sns_display}">
         <h3>
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h3>
         <span class="checkDesign">
          <label for="ec-board-post-sns">
           허용
          </label>
         </span>
        </div>
        <div class="noMember {$*use_is_login_display}">
         <h3>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h3>
         <div class="termArea">
          <span class="checkDesign">
           <label class="ec-board-term-agree">
            개인정보 수집 및 이용동의
           </label>
          </span>
          <button class="ec-board-button-agree btnFold" type="button">
           내용보기
          </button>
         </div>
        </div>
        <div class="btnArea">
         [linkx]
         
        </div>
       </div>
       <div class="close">
        <button class="btnClose" id="ec-board-review-write-close-button" type="button">
         닫기
        </button>
       </div>
      </div>
     </div>
    </div>
    <div async_section="error" style="display:none;">
     error
    </div>
   </div>
  </div>
  <div async_module="smartreview_DispReviewPopup" class="reviewArea">
   <div async_section="after" style="display:none;">
    <div id="ec-board-review-popup" style="display:none;">
     <div class="reviewLayer typeLead">
      <h2>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <p class="benefitInfo">
       <span class="name">
        {$*member_name}
       </span>
       님, 상품리뷰를 등록하시면 다양한
       <br/>
       적립금 혜택을 받으실 수 있습니다.
      </p>
      <div class="content">
       <div async_module="smartreview_DispReviewPopupData">
        <div class="possible ec-board-able">
         <h3>
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h3>
         <span class="count">
          (총
          <strong>
           {$*review_writable_count}
          </strong>
          건)
         </span>
         <div class="possible ec-board-able-list">
          <ul>
           <li class="ec-board-able-btn" data-item-code="{$*item_code}" data-order-id="{$*order_id}" data-product-no="{$*product_no}">
            [ahref]
            
           </li>
           <li class="ec-board-able-btn" data-item-code="{$*item_code}" data-order-id="{$*order_id}" data-product-no="{$*product_no}">
            <a href="e">
             {$*list_image_url}
            </a>
           </li>
          </ul>
         </div>
         <p class="paging {$*review_page_display}">
          <button class="btnPrev" id="ec-board-review-popup-pagination-prev-button" type="button">
           이전
          </button>
          <button class="btnNext" id="ec-board-review-popup-pagination-next-button" type="button">
           다음
          </button>
         </p>
        </div>
       </div>
       <div id="ec-board-review-write-wrapper" style="display:none;">
       </div>
      </div>
      <div class="close">
       <strong class="today">
        {$*display_popup_close_block_html}
        <label for="popup_close_type">
         {$*display_popup_close_type}
        </label>
       </strong>
       <button class="btnClose" id="ec-board-review-popup-close-button" type="button">
        닫기
       </button>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div id="ec-board-review-write-template">
   <div async_module="smartreview_dispWritePopup" async_type="template">
    <div async_section="after" style="display:none;">
     <div class="prdInfo">
      <p class="reviewThumb">
       [ahref]
       
      </p>
      <div class="summary">
       <p class="icon">
        {$*display_product_new_icon} {$*display_product_recommand_icon} {$*display_product_soldout_icon} {$*display_product_stock_icon}
       </p>
       <strong class="heading">
        {$*product_name|cut:50,...}
       </strong>
       <p class="price">
        {$*product_price} {$*product_tax_type_text}
       </p>
       <div class="info">
        <dl>
         <dt>
          리뷰
         </dt>
         <dd>
          {$*product_review_count}
         </dd>
        </dl>
        <dl class="{$*product_rating_display}">
         <dt>
          평점
         </dt>
         <dd>
          {$*product_rating}
         </dd>
        </dl>
        <a class="btnOther {$*use_other_select_display}" href="e" onclick="window.open('/board/smartreview/other_select.html{$*other_select_param}','','width=600,height=670');return false;">
        </a>
       </div>
      </div>
     </div>
     <div class="ec-board-grade ec-board-grade-write ec-board-star large">
     </div>
     <div class="attachList empty">
      <ul>
       <li>
        <label class="btnAdd" for="ec-board-review-upload1">
        </label>
       </li>
      </ul>
      <label class="btnAddEmpty" for="ec-board-review-upload0">
      </label>
     </div>
     <div async_module="smartreview_dispWriteAddItem" async_type="template" class="{$*display_adding_item}">
      <div async_section="before" style="display:none;">
       <div class="loading">
       </div>
      </div>
      <div async_section="after" class="addItem" style="display:none;">
       <table border="1" summary="">
        <caption>
         추가항목
        </caption>
        <colgroup>
         <col style="width:110px;"/>
         <col style="width:auto;"/>
        </colgroup>
        <tbody>
         <tr class="{$*adding_item_info_display}">
          <th scope="row">
           {$*item_name}
          </th>
          <td>
           {$*item_value}
          </td>
         </tr>
         <tr class="{$*adding_item_info_display}">
          <th scope="row">
           {$*item_name}
          </th>
          <td>
           {$*item_value}
          </td>
         </tr>
         <tr class="{$*product_option_info_display}">
          <th scope="row">
           선택한 옵션
          </th>
          <td>
           <div class="prdOption">
            <p class="normal {$*normal_product_info_display}">
             <span class="option">
              {$*display_product_option_info}
              <strong class="etc {$*normal_product_order_quantity_display}">
               외 {$*display_normal_product_order_quantity}개 구매
              </strong>
             </span>
            </p>
            <ul class="set {$*set_product_info_display}">
             {$*display_product_set_info}
            </ul>
            <p class="etc {$*set_product_info_etc_display}">
             <span class="etcCount {$*set_product_others_count_display}">
              외 {$*display_set_product_others_count}개 구성상품 포함
              <strong class="subInfo {$*set_product_order_quantity_display}">
               외 {$*display_set_product_order_quantity}개 구매
              </strong>
             </span>
            </p>
           </div>
          </td>
         </tr>
        </tbody>
       </table>
      </div>
      <div async_section="error" style="display:none;">
      </div>
     </div>
     <div class="contentWarp">
      {$*csrf}
      <div class="contentBox">
      </div>
     </div>
     <p class="wordCount">
      <strong class="blind">
       글자수
      </strong>
      <span class="ec-board-current-text-count">
      </span>
      <span class="ec-board-current-text-tail">
      </span>
     </p>
     <div async_module="smartreview_dispWriteHashTag" async_type="template" class="{$*display_hash_tag}">
      <div async_section="before" style="display:none;">
       <div class="loading">
       </div>
      </div>
      <div async_section="after" class="recommend" style="display:none;">
       <h3>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h3>
       <div class="tags">
        <span class="btnHash">
         {$*hashtag}
        </span>
        <span class="btnHash">
         {$*hashtag}
        </span>
       </div>
      </div>
      <div async_section="error" style="display:none;">
      </div>
     </div>
     <div class="postSns {$*use_sns_display}">
      <h3>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <span class="checkDesign">
       <label for="ec-board-post-sns">
        허용
       </label>
      </span>
     </div>
     <div class="noMember {$*use_is_login_display}">
      <h3>
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <div class="termArea">
       <span class="checkDesign">
        <label class="ec-board-term-agree">
         개인정보 수집 및 이용동의
        </label>
       </span>
       <button class="ec-board-button-agree btnFold" type="button">
        내용보기
       </button>
      </div>
     </div>
     <div class="btnArea">
      [ahref]
      
     </div>
    </div>
    <div async_section="error" style="display:none;">
     error
    </div>
   </div>
  </div>
  <div async_module="smartreview_DispAutoLoad">
  </div>
  <div id="multi_option" style="display:none;">
  </div>
  <form id="frm_image_zoom" style="display:none;">
  </form>
  <div id="fap_common_top_script" style="display:none;">
   <noscript>
   </noscript>
  </div>
  <div id="fap_product_detail_script" style="display:none;">
  </div>
  <div id="tgg_product_detail_script" style="display:none;">
   <span name="wp_detection" style="display: none;" tag="i">
    148
   </span>
   <span name="wp_detection" style="display: none;" tag="t">
    [공식몰] 콤부쏘다, 콤부차 스파클링 음료 [14포x5box]
   </span>
   <span name="wp_detection" style="display: none;" tag="p">
    24900
   </span>
  </div>
  <div id="tgg_common_bottom_script" style="display:none;">
   <div id="wp_tg_cts" style="display:none;">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0363
  </b>
 </body>
</html>
|<---