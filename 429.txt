--->|<!DOCTYPE html>
<html lang="ko" xmlns:og="http://opengraphprotocol.org/schema/">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
  <meta content="#00a680" name="theme-color"/>
  <meta content="telephone=no" name="format-detection"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="al:ios:app_name"/>
  <meta content="284876795" property="al:ios:app_store_id"/>
  <meta content="284876795" name="twitter:app:id:ipad" property="twitter:app:id:ipad"/>
  <meta content="284876795" name="twitter:app:id:iphone" property="twitter:app:id:iphone"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="al:ios:url"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:app:url:ipad" property="twitter:app:url:ipad"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:app:url:iphone" property="twitter:app:url:iphone"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords">
   <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description">
    <meta content="삼양 검은모래 해변 - 제주 - 삼양 검은모래 해변의 리뷰 - 트립어드바이저" property="og:title">
     <meta content="삼양 검은모래 해변,제주: 152건 중에서 73위를 차지한 관광명소인 삼양 검은모래 해변에 관한 34 건의 리뷰와 38 건의 사진을 체크하세요." property="og:description">
      <meta content="https://media-cdn.tripadvisor.com/media/photo-s/07/dc/bc/21/caption.jpg" property="og:image">
       <meta content="550" property="og:image:width">
        <meta content="413" property="og:image:height">
         <meta content="tripadvisor:place_" property="og:type"/>
         <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
         <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
         <meta content="100000982334629" property="fb:admins"/>
         <meta content="162729813767876" property="fb:app_id"/>
         <meta content="https://static.tacdn.com/img2/branding/rebrand/TA_brand_logo_square.png" name="twitter:image"/>
         <meta content="no-cache" http-equiv="pragma">
          <meta content="no-cache,must-revalidate" http-equiv="cache-control"/>
          <meta content="0" http-equiv="expires"/>
          <meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"/>
          <meta content="ko" http-equiv="content-language"/>
          <meta content="app-id=284876795" name="apple-itunes-app"/>
         </meta>
        </meta>
       </meta>
      </meta>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body class="rebrand_2017 desktop_web Attraction_Review js_logging" data-tab="TABS_TOP" id="BODY_BLOCK_JQUERY_REFLOW">
  <div class="header">
   <div class="masthead">
    <div class="ppr_rup ppr_priv_global_nav" data-placement-name="global_nav" id="taplc_global_nav_0">
     <div class="global-nav-no-refresh" id="global-nav-no-refresh-1">
      <div class="ppr_rup ppr_priv_global_nav_menus" data-placement-name="global_nav_menus" id="taplc_global_nav_menus_0">
       <div class="hidden">
        <div class="global-nav-menus-container">
         <div class="tabsBar">
          <ul class="tabs" onclick="">
           <li class="tabItem hvrIE6">
            [ahref]
            
           </li>
           <li class="tabItem hvrIE6">
            [linkx]
            
           </li>
           <li class="tabItem hvrIE6">
            <li>[area1][keywordx]</li>[area1][mkey1]<li>[area1][mkey1]</li>[ahref]<li>[area1][mkey1]</li>
           </li>
           <li class="nonTabItem">
            <a class="fftuLink" href="/pages/first_visit.html" onclick="ta.util.cookie.setPIDCookie(4893)">
             <span class="fftuText">
              처음 방문하신 분들께
             </span>
            </a>
           </li>
          </ul>
         </div>
        </div>
        <ul class="global-nav-links-menu-more">
        </ul>
       </div>
       <div class="global-nav-overlays-container">
       </div>
      </div>
      <div class="ppr_rup ppr_priv_global_nav_dropdowns" data-placement-name="global_nav_dropdowns" id="taplc_global_nav_dropdowns_0">
       <ul class="hidden">
        <li class="tabItem dropDown jsNavMenu">
         <ul class="subNav masthead-dropdown-tourism">
          <li class="subItem">
           [linkx]
           
          </li>
          <li class="subItem">
           <a class="subLink" href="/Hotels-g983296-Jeju_Island-Hotels.html">
            제주도 호텔
           </a>
          </li>
          <li class="subItem">
           [ahref]
           
          </li>
          <li class="subItem">
           [linkx]
           
          </li>
          <li class="subItem">
           [ahref]
           
          </li>
          <li class="subItem">
           [ahref]
           
          </li>
          <li class="subItem">
           [ahref]
           
          </li>
          <li class="subItem">
           <a class="subLink" href="/LocationPhotos-g983296-Jeju_Island.html">
            제주도 사진
           </a>
          </li>
          <li class="subItem">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="tabItem dropDown jsNavMenu">
         <ul class="subNav masthead-dropdown-hotels">
          <li class="subItem">
           [linkx]
           
          </li>
          <li class="subItem">
           <a class="subLink" href="/SmartDeals-g983296-Jeju_Island-Hotel-Deals.html">
            제주도 호텔 특가
           </a>
          </li>
          <li class="subItem">
           [ahref]
           
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            호텔 타입별[area1][mkey1][area1][mkey1][area1][mkey1]<li>[pkeyx]</li>
           </span>
           <ul class="secondSubNav">
            <li class="subItem">
             [ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][mkey1][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][keywordx][area1][keywordx]
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
            <li class="subItem">
             <a class="subLink" href="/Hotels-g983296-c3-zff29-Jeju_Island-Hotels.html">
              제주도 캠프그라운드
             </a>
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             <a class="subLink" href="/Hotels-g297885-zff14-Jeju_Jeju_Island-Hotels.html">
              제주 카지노
             </a>
            </li>
            <li class="subItem">
             <a class="subLink" href="/Hotels-g297885-zff10-Jeju_Jeju_Island-Hotels.html">
              제주 비치 호텔
             </a>
            </li>
            <li class="subItem">
             <a class="subLink" href="/Hotels-g297885-zff13-Jeju_Jeju_Island-Hotels.html">
              제주 스파 리조트
             </a>
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             <a class="subLink" href="/Hotels-g297885-zff3-Jeju_Jeju_Island-Hotels.html">
              제주 로맨틱 호텔
             </a>
            </li>
           </ul>
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            호텔 등급별
           </span>
           <ul class="secondSubNav">
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            호텔 브랜드별로[linkx][ahref][area1][mkey1][ahref][linkx][pkeyx][ahref][linkx][area1][keywordx][linkx][area1][keywordx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][pkeyx][ahref][area1][mkey1]
           </span>
           <ul class="secondSubNav">
            <li class="subItem">
             <a class="subLink" href="/Hotels-g983296-zfb9626-Jeju_Island-Hotels.html">
              제주도의 라마다 앙코르 호텔
             </a>
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            인기 있는 편의 시설
           </span>
           <ul class="secondSubNav">
            <li class="subItem">
             <a class="subLink" href="/Hotels-g297885-zfa7-Jeju_Jeju_Island-Hotels.html">
              무료 주차를 제공하는 제주 호텔
             </a>
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            제주도 인기 카테고리
           </span>
           <ul class="secondSubNav">
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             <a class="subLink" href="/HotelsList-Jeju-zfp10990552.html">
              제주의 청결한 호텔
             </a>
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            랜드마크 인근
           </span>
           <ul class="secondSubNav">
            <li class="subItem">
             [ahref]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             <a class="subLink" href="/HotelsNear-g297885-d10464444-Saebyeol_Oreum-Jeju_Jeju_Island.html">
              새별오름 주변 호텔
             </a>
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             <a class="subLink" href="/HotelsNear-g297885-d2203392-Jeju_Museum_of_Contemporary_Art-Jeju_Jeju_Island.html">
              제주 현대 미술관 주변 호텔
             </a>
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
            <li class="subItem">
             [ahref]
             
            </li>
            <li class="subItem">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            공항 인근
           </span>
           <ul class="secondSubNav">
            <li class="subItem">
             [linkx]
             
            </li>
           </ul>
          </li>
         </ul>
        </li>
        <li class="tabItem dropDown jsNavMenu">
         <ul class="subNav masthead-dropdown-restaurants">
          <li class="subItem">
           <a class="subLink" href="/Restaurants-g983296-Jeju_Island.html">
            모든 제주도 음식점
           </a>
          </li>
          <li class="subItem">
           <a class="subLink" href="/RestaurantsNear-g297885-d6876755-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html">
            삼양 검은모래 해변 근처 음식점
           </a>
          </li>
          <li class="expandSubItem">
           <span class="expandSubLink">
            인기 음식
           </span>
           <ul class="secondSubNav">
            [area1][keywordx][pkeyx][area1][mkey1][pkeyx][area1][mkey1][area1][keywordx][area1][keywordx][ahref][ahref][area1][keywordx][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][pkeyx][area1][mkey1][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           </ul>
          </li>
         </ul>
        </li>
        <li class="tabItem dropDown jsNavMenu">
         <ul class="subNav masthead-dropdown-attractions">
          <li class="subItem">
           [linkx]
           
          </li>
          <li class="subItem">
           [ahref]
           
          </li>
         </ul>
        </li>
       </ul>
      </div>
     </div>
     <div class="global-nav has-links" data-non-components="">
      <div class="global-nav-top">
       <div class="global-nav-bar global-nav-green global-nav-2018">
        <div class="ui_container global-nav-bar-container global-nav-mobile-web-rollout first-view persistent-icons global-nav-2018">
         <div class="global-nav-hamburger global-nav-icons show-left is-hidden-tablet global-nav-2018" onclick="return placementEvCall('taplc_global_nav_0', 'deferred/lateHandlers.showSidebarNav', event, this);">
          <span class="ui_icon menu-bars">
          </span>
          <div class="ui_jewel marked_for_attention unread hidden">
          </div>
         </div>
         [linkx]
         
         <div class="ppr_rup ppr_priv_global_nav_geopill is-shown-at-tablet" data-placement-name="global_nav_geopill:ar_responsive" id="taplc_global_nav_geopill_ar_responsive_0">
          <div class="global-nav-geopill global-nav-geopill-2018" data-element=".hidden" data-geonavi-enabled="true" data-id="983296" data-load-css="src/build/styleguide/ui_overlays/flyouts" data-load-init="$plc:deferred/GeoSearch.init" data-location-denied-label="트립어드바이저가 회원님의 위치에 접근이 거부되었습니다.브라우저와 트립어드바이저에게 접근 권한을 부여하고 다시 시도해주세요." data-location-label="주변" data-recently-viewed-header="최근에 본 항목" onclick="return remoteModule(event, this)">
           <span class="ui_pill inverted">
            제주도
            <span class="ui_icon caret-down">
            </span>
           </span>
           <div class="hidden">
            <div class="search-for-localization" style="display: none;">
             "{0}"검색
            </div>
            <div class="ui_text">
             <span class="ui_underline">
             </span>
            </div>
            <div class="ui_flyout_results">
            </div>
           </div>
          </div>
         </div>
         <div class="global-nav-actions-2018 global-nav-icons show-right">
          <div class="ppr_rup ppr_priv_global_nav_action_cart" data-placement-name="global_nav_action_cart" id="taplc_global_nav_action_cart_0">
          </div>
          <div class="ppr_rup ppr_priv_global_nav_action_content_collect is-shown-at-tablet" data-placement-name="global_nav_action_content_collect" id="taplc_global_nav_action_content_collect_0">
           <div title="게시">
            <div class="react-container component-widget" data-component="@ta/brand.global-nav-action-content-collect" data-component-props="page-manifest" id="component_3">
             <div class="brand-global-nav-action-content-collect-ContentCollection__container--3_q4P brand-global-nav-action-content-collect-ContentCollection__onDarkBg--oLQNM brand-global-nav-action-content-collect-ContentCollection__onDark--1eb0U brand-global-nav-action-content-collect-ContentCollection__nonComponentContainer--1tFJw" title="게시">
              <div class="brand-global-nav-action-content-collect-ContentCollection__icon--2M_7j brand-global-nav-action-content-collect-ContentCollection__onDarkBg--oLQNM brand-global-nav-action-content-collect-ContentCollection__nonComponentIcon--3eipG" title="게시">
               <span class="ui_icon plus-circle">
               </span>
               <span class="brand-global-nav-action-content-collect-ContentCollection__label--1YYud">
                게시
               </span>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="ppr_rup ppr_priv_global_nav_action_trips is-shown-at-tablet" data-placement-name="global_nav_action_trips" id="taplc_global_nav_action_trips_0">
           <[keywordx]>
           </[keywordx]>
          </div>
          <div class="ppr_rup ppr_priv_global_nav_action_inbox is-shown-at-tablet" data-placement-name="global_nav_action_inbox" id="taplc_global_nav_action_inbox_0">
           <div title="받은 메시지함">
            <div class="masthead-inbox-container">
             <div class="masthead-inbox-icon labeled-inbox-icon ui_icon comments" data-nav-2018-enabled="true">
              <div class="masthead-inbox-icon inbox-icon-label" data-nav-2018-enabled="true">
               받은 메시지함
              </div>
             </div>
             <div class="ui_jewel labeled-inbox-icon marked_for_attention hidden">
             </div>
             <div class="ui_jewel marked_for_attention inbox-jewel-test hidden">
             </div>
            </div>
            <div class="inbox-nav-contents ppr_rup ppr_priv_global_nav_action_inbox hidden">
             <div class="inbox-nav-dropdown with-login-cta">
              <div class="header">
               <div class="title">
                받은 메시지함
               </div>
               <a class="see-all" href="/Inbox" onclick="ta.trackEventOnPage('Inbox|Dropdown', 'see_all', '', '40186');">
                모두 보기
               </a>
              </div>
              <div class="inbox-lander-thread-list-item js-inbox-lander-thread-list-item loading hidden">
               <div class="loading-animation">
               </div>
               <div class="inbox-lander-thread-list-item-core-content">
                <div class="inbox-lander-thread-list-item-avatar-and-mobile-date">
                 <div class="inbox-lander-thread-list-item-avatar">
                  <div class="empty_avatar">
                  </div>
                 </div>
                </div>
                <div class="inbox-lander-thread-list-item-message">
                 <div class="inbox-lander-thread-list-item-skeleton-bar">
                 </div>
                 <div class="inbox-lander-thread-list-item-skeleton-bar">
                 </div>
                 <div class="inbox-lander-thread-list-item-skeleton-bar">
                 </div>
                </div>
               </div>
              </div>
              <div class="inbox-masthead-wrapper">
               <div class="login-cta">
                <span>
                 로그인
                </span>
                하여 여행 업데이트를 받고 다른 여행자에게 메시지를 보내세요.
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="ppr_rup ppr_priv_global_nav_action_profile is-shown-at-tablet" data-placement-name="global_nav_action_profile" id="taplc_global_nav_action_profile_0">
           <div class="global-nav-profile global-nav-utility">
            [ahref]
            
            [linkx]
            
           </div>
          </div>
          <div class="ppr_rup ppr_priv_masthead_search" data-placement-name="masthead_search" id="taplc_masthead_search_0">
           <div class="masthead-search-button-responsive" title="검색">
            <div class="masthead-search-button" onclick="return placementEvCall('taplc_masthead_search_0', 'deferred/lateHandlers.showSearchOverlay', event, this);">
             <span class="ui_icon search">
             </span>
             <span class="masthead-search-button-label">
              검색
             </span>
            </div>
            <span class="hidden">
             <div class="search_overlay_content ui_container social_typeahead_2018" data-div-classes="ppr_rup ppr_priv_masthead_search">
              <div class="dual_search_loader_container" id="DUAL_SEARCH_LOADER_CONTAINER">
               <div class="dual_search_loader_overlay">
               </div>
               <div class="dual_search_loader_visual">
                <div class="ui_spinner">
                </div>
               </div>
              </div>
              <div class="just_padding">
               <div class="no_cpu">
                <form action="/Search" class="search_form ui_columns is-multiline" id="global_nav_search_form" method="get" onsubmit="return placementEvCall('taplc_masthead_search_0', 'deferred/lateHandlers.submitForm', event, this);">
                 <div class="ui_column is-10">
                  <div class="search_line ui_columns is-multiline">
                   <div class="mainSearchContainer ui_column is-7" id="MAIN_SEARCH_CONTAINER">
                    <div class="input_box">
                     <span class="typeahead_icon what_neighbor ui_icon search">
                     </span>
                     <div class="what_with_highlight">
                      <span class="clear-text ui_icon times-circle-fill hidden" id="CLEAR_WHAT">
                      </span>
                      <span class="input_highlight">
                      </span>
                     </div>
                    </div>
                   </div>
                   <div class="geoScopeContainer ui_column is-5" id="GEO_SCOPE_CONTAINER">
                    <div class="input_box">
                     <span class="typeahead_icon where_neighbor ui_icon map-pin-fill">
                     </span>
                     <div class="where_with_highlight">
                      <span class="clear-text ui_icon times-circle-fill hidden" id="CLEAR_WHERE">
                      </span>
                      <span class="input_highlight">
                      </span>
                     </div>
                     <span class="hidden geoExample">
                      여행지를 입력하세요
                     </span>
                     <span class="where_neighbor without_dropdown ui_icon caret-down">
                     </span>
                    </div>
                   </div>
                  </div>
                 </div>
                 <div class="ui_column is-2 search_line_block">
                  <button class="search_button" id="SEARCH_BUTTON" name="sub-search" onclick="if (ta &amp;&amp; event.clientY) { document.getElementById('global_nav_search_form').elements['pid'].value=3825; }ta &amp;&amp; ta.setEvtCookie('TopNav_Search', 'Action', 'Search | ' + (event.detail === 0? 'enter' : 'click') + ' | SearchButton', 0, '/Search');return placementEvCall('taplc_masthead_search_0', 'deferred/lateHandlers.submitClicked', event, this);" type="submit">
                   <div id="SEARCH_BUTTON_CONTENT">
                    <div class="inner">
                     검색
                    </div>
                   </div>
                  </button>
                 </div>
                 <?singleSearchDeafultScope>
                </form>
               </div>
              </div>
             </div>
            </span>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0473
  </b>
 </body>
</html>
<?singleSearchBox>
<div class="ui_columns results_panel">
 <div class="ui_column is-10 ui_columns results_panel">
  <div class="what_results ui_column is-7 hidden">
  </div>
  <div class="where_results ui_column is-offset-7 is-5 hidden">
  </div>
 </div>
</div>
<div class="global-nav-links global-nav-bottom global-nav-white ui_tabs is-hidden-mobile">
 <div class="ui_container ui_columns is-gapless">
  <div class="links_container ui_column is-11">
   <div class="ppr_rup ppr_priv_global_nav_links" data-placement-name="global_nav_links" id="taplc_global_nav_links_0">
    <div class="global-nav-links-container">
     <ul class="global-nav-links-menu">
      <li class="nav-sub-item" data-ahref="L5iaVWyAvmXA3" data-element=".masthead-dropdown-tourism" onclick="placementEvCall('taplc_global_nav_links_0', 'handlers.clickAboutGeoLink', event, this);">
       <span class="head-link global-nav-link global-nav-link-2018 ui_tab">
        제주도
       </span>
      </li>
      <li class="nav-sub-item" data-element=".masthead-dropdown-hotels">
       <a class="global-nav-link global-nav-link-2018 ui_tab" data-tracking-label="hotels" href="/Hotels-g983296-Jeju_Island-Hotels.html" id="global-nav-hotels">
        <span class="ui_icon hotels">
        </span>
        호텔
       </a>
      </li>
      <li class="nav-sub-item" data-element=".masthead-dropdown-attractions">
       [linkx]
       
      </li>
      <li class="nav-sub-item" data-element=".masthead-dropdown-restaurants">
       <a class="global-nav-link global-nav-link-2018 ui_tab" data-tracking-label="restaurants" href="/Restaurants-g983296-Jeju_Island.html" id="global-nav-restaurants">
        <span class="ui_icon restaurants">
        </span>
        음식점
       </a>
      </li>
      <li class="nav-sub-item" data-element=".masthead-dropdown-flights">
       [linkx]
       
      </li>
      <li class="nav-sub-item" data-element=".masthead-dropdown-vp">
       [ahref]
       
      </li>
      <li class="nav-sub-item" data-element=".masthead-dropdown-cars">
       <a class="global-nav-link global-nav-link-2018 ui_tab" data-tracking-label="cars" href="/RentalCars-g983296-Jeju_Island.html" id="global-nav-cars">
        <span class="ui_icon parking">
        </span>
        렌터카
       </a>
      </li>
      <li class="nav-sub-item force-more" data-element=".masthead-dropdown-no_id">
       [linkx]
       
      </li>
      <li class="nav-sub-item force-more" data-element=".masthead-dropdown-no_id">
       [linkx]
       
      </li>
      <li class="nav-sub-item force-more" data-element=".masthead-dropdown-HelpDesk">
       [linkx]
       
      </li>
     </ul>
     <ul class="global-nav-links-menu-ellipsis is-top-only">
      <li class="global-nav-links-ellipsis">
       <span class="global-nav-link global-nav-link-2018 ui_tab ellipsis">
        <span class="ui_icon more-horizontal">
        </span>
       </span>
      </li>
     </ul>
    </div>
   </div>
  </div>
  <div class="message_container ui_column is-1">
  </div>
 </div>
</div>
<div class="sidebar-nav-container reorg-with-icons off-canvas is-hidden-tablet is-hidden-desktop">
 <div class="sidebar-nav-contents ui_container">
  <div class="sidebar-nav-header">
   <div class="sidebar-nav-close" onclick="return placementEvCall('taplc_global_nav_0', 'deferred/lateHandlers.hideSidebarNav', event, this);">
    <div class="ui_icon times">
    </div>
   </div>
   [linkx]
   
  </div>
  <div class="sidebar-nav-profile-container">
   <a class="ui_button secondary fullwidth mobile login-button button_container" data-page-property1="" data-page-property2="" data-page-property3="" data-page-property4="" href="/RegistrationController?flow=core_combined&amp;pid=40422&amp;returnTo=%2FAttraction_Review-g297885-d6876755-Reviews-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html&amp;fullscreen=true&amp;flowOrigin=login" onclick="return placementEvCall('taplc_global_nav_0', 'deferred/lateHandlers.hideSidebarNav', event, this);">
    로그인
   </a>
   [ahref]
   
   <ul class="sidebar-nav-profile">
    <li class="nav-sub-item remove-border">
     <div class="react-container component-widget" data-component="@ta/brand.mobile-global-nav-content-collect" data-component-props="page-manifest" id="mobile-global-nav-content-collect_component_5">
     </div>
    </li>
    <li class="nav-sub-item">
    </li>
    <li class="nav-sub-item">
     <a class="nav-sub-link" data-tracking-label="Recently_viewed" href="/Recent">
      최근에 본 항목
     </a>
    </li>
    <li class="nav-sub-item">
     [ahref]
     
    </li>
    <li class="nav-sub-item">
     [linkx]
     
    </li>
   </ul>
  </div>
  <div class="sidebar-nav-links-container">
   <div class="sidebar-nav-links">
   </div>
   <div class="sidebar-nav-links-more">
    <span class="nav-sub-link nav-sub-link-more" onclick="return placementEvCall('taplc_global_nav_0', 'deferred/lateHandlers.toggleMoreLinks', event, this);">
     더 보기
     <span class="ui_icon single-chevron-down">
     </span>
    </span>
    <ul class="sub-list">
    </ul>
   </div>
   <a class="global-nav-link" data-tracking-label="HelpDesk" href="#" id="global-nav-HelpDesk">
    도움말 센터
   </a>
  </div>
 </div>
</div>
<div class="sidebar-nav-backdrop is-hidden-tablet is-hidden-desktop" onclick="return placementEvCall('taplc_global_nav_0', 'deferred/lateHandlers.hideSidebarNav', event, this);">
</div>
<div class="global-nav-no-refresh" id="global-nav-no-refresh-2">
 <div class="ppr_rup ppr_priv_global_nav_onpage_assets is-shown-at-tablet" data-placement-name="global_nav_onpage_assets" id="taplc_global_nav_onpage_assets_0">
  <div class="inner">
   <div class="ui_container">
    <div class="ppr_rup ppr_priv_masthead_h1" data-placement-name="masthead_h1:ar_responsive" id="taplc_masthead_h1_ar_responsive_0">
     <h1 class="header heading masthead masthead_h1">
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h1>
    </div>
    <div class="ppr_rup ppr_priv_trip_planner_breadcrumbs" data-placement-name="trip_planner_breadcrumbs" id="taplc_trip_planner_breadcrumbs_0">
     <ul class="breadcrumbs">
      <li class="breadcrumb">
       [ahref]
       
       <span class="ui_icon single-chevron-right">
       </span>
      </li>
      <li class="breadcrumb">
       [linkx]
       
       <span class="ui_icon single-chevron-right">
       </span>
      </li>
      <li class="breadcrumb">
       [ahref]
       
       <span class="ui_icon single-chevron-right">
       </span>
      </li>
      <li class="breadcrumb">
       <a class="link" href="/Tourism-g297885-Jeju_Jeju_Island-Vacations.html" onclick="ta.setEvtCookie('Breadcrumbs', 'click', 'City', 4, '/Tourism-g297885-Jeju_Jeju_Island-Vacations.html');">
        <span>
         제주
        </span>
       </a>
       <span class="ui_icon single-chevron-right">
       </span>
      </li>
      <li class="breadcrumb">
       [linkx]
       
       <span class="ui_icon single-chevron-right">
       </span>
      </li>
      <li class="breadcrumb">
       삼양 검은모래 해변
      </li>
     </ul>
    </div>
   </div>
  </div>
 </div>
</div>
<div class="page">
 <div id="atf_header_wrap">
  <div class="ui_container is-fluid page-section accessible_red_3" id="atf_header">
   <div class="ppr_rup ppr_priv_header_banner_ad" data-placement-name="header_banner_ad:ar_responsive" id="taplc_header_banner_ad_ar_responsive_0">
    <div class="header_banner_ad_resp" id="header_banner_ad_resp">
     <div class="react-container component-widget" data-component="@ta/cpm.ad-target" data-component-props="page-manifest" id="component_17">
      <div class="iab_leaBoa">
       <div class="gptAd cpm-ad-target-ad-target__gptAd--15jJ4" data-size="[[728,90],[970,66]]" id="gpt-ad-728x90-970x66-a">
       </div>
      </div>
     </div>
     <div class="ldrBackupContent" style="display:none">
      <div class="ldrBkUp">
       <div class="iWrap">
       </div>
       <div class="pipe">
       </div>
       <div class="tWrap multiline">
        <b>
         비용을 절약하세요.
        </b>
        트립어드바이저는 호텔 최저가를 찾기 위해 200개 이상의 사이트를 비교합니다.
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_resp_attraction_header" data-placement-name="resp_attraction_header:ar_responsive" id="taplc_resp_attraction_header_ar_responsive_0">
    <div class="ui_columns is-multiline is-mobile contentWrapper" onclick="placementEvCall('taplc_resp_attraction_header_ar_responsive_0', 'handlers.track', null, event.target)">
     <div class="ui_column is-12-tablet is-10-mobile attractionsHeader">
      <h1 class="ui_header h1" id="HEADING">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h1>
      <div class="headerInfoWrapper">
       <div class="ratingContainer">
        [ahref]
        
       </div>
       <div class="popIndexContainer">
        <div class="prw_rup prw_common_header_pop_index popIndex left-border" data-prwidget-init="" data-prwidget-name="common_header_pop_index">
         <span class="header_popularity popIndexValidation" onclick="ta.util.cookie.setPIDCookie(15191);">
          <b class="">
           <span class="">
            73위
           </span>
          </b>
          (152곳의
          [ahref]
          
          )
         </span>
        </div>
       </div>
       <span class="is-hidden-mobile header_detail attractionCategories">
        <div class="detail">
         [linkx]
         
         ,
         <a href="/Attractions-g983296-Activities-c61-Jeju_Island.html" onclick="placementEvCall('taplc_resp_attraction_header_ar_responsive_0', 'handlers.onAttractionLinkClick', event, this, 'category', '61', '/Attractions-g983296-Activities-c61-Jeju_Island.html')">
          야외 활동
         </a>
         ,
         [ahref]
         
        </div>
       </span>
      </div>
     </div>
     <div class="ui_column is-12-tablet is-2-mobile blInfoColumn">
      <div class="attractionsBLInfo">
       <div class="prw_rup prw_common_atf_header_bl_responsive headerBL" data-prwidget-init="handlers" data-prwidget-name="common_atf_header_bl_responsive">
        <div class="blRow" data-locid="6876755" data-placetypeid="10021">
         <div class="is-hidden-mobile blEntry address ui_link" data-mapfilters="" onclick="widgetEvCall('handlers.onAddressClicked', event, this)">
          <span class="primary_icon ui_icon map-pin-fill">
          </span>
          <span class="detail">
           <span class="locality">
            제주
           </span>
          </span>
         </div>
        </div>
       </div>
       <div class="header_buttons">
        <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:6876755_component_8">
         <span>
          <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__no_decoration--arZYx trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
           <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_20--34b4_">
            <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
             <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__outline--9p6p4 trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
             </span>
             <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__outline--9p6p4 trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
             </span>
            </span>
           </span>
           <div class="ui_link trips-bookmark-icon-BookmarkIcon__children--WewBp trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
            <span class="trips-save-to-trip-SaveToTripWidget__normal--TlAX2">
             저장
            </span>
           </div>
          </div>
         </span>
        </div>
        <div class="shareCta">
         <div class="ppr_rup ppr_priv_share" data-placement-name="share" id="taplc_share_0">
          <div class="react-container" data-component="social.share-cta" data-component-props="page-manifest" id="component_6">
           <div>
            <span>
             <div class="public-share-cta-ShareCta__cta--2Xq6G">
              <span>
               <span class="ui_icon repost-fill public-share-cta-ShareCta__cta_icon--3qgo_">
               </span>
               <span class="public-share-cta-ShareCta__cta_text--38gVh">
                공유
               </span>
              </span>
             </div>
            </span>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_hsx_special_messaging" data-placement-name="hsx_special_messaging:ar_responsive" id="taplc_hsx_special_messaging_ar_responsive_0">
    <div class="" data-targetevent="update-hsx_special_messaging:ar_responsive">
     <div class="hsx_special_messaging">
      <div class="node-preserve ajax_preserve" data-ajax-preserve="preserved-hsx_special_messaging:ar_responsive">
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_resp_photo_mosaic" data-placement-name="resp_photo_mosaic:ar_responsive" id="taplc_resp_photo_mosaic_ar_responsive_0">
    <div class="atf_commerce_and_photos ui_columns is-mobile is-multiline">
     <div class="hidden photo_mosaic_info" data-geo-id="297885" data-location-id="6876755">
     </div>
     <div class="commerce_container ui_column is-4-desktop is-5-tablet is-12-mobile">
      <div class="ppr_rup ppr_priv_location_detail_review_highlight above_the_fold is-shown-at-tablet" data-placement-name="location_detail_review_highlight:ar_responsive" id="taplc_location_detail_review_highlight_ar_responsive_0">
       <div class="highlightContainer ui_container">
        <div class="heading">
         리뷰 하이라이트
        </div>
        <div class="ui_columns">
         <div class="ui_column is-12">
          <div class="reviewSelector recent_review friend_review_placeholder">
           <div class="review basic_review provider0 first">
            <div class="reviewWrap">
             <div class="quoteBlock easyClear">
              <div class="quote">
               <span class="taLnk" id="rnf1381473814" onclick="ta.plc_location_detail_review_highlight_ar_responsive_1_handlers.scrollIfPresent(565925035, '/ShowUserReviews-g297885-d6876755-r565925035-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html + #REVIEWS'); ta.trackEventOnPage('Highlight_Review', 'Recent_snippet_title', '');">
                <i>
                 “
                </i>
                정말 모래가 검은색
                <i>
                 ”
                </i>
               </span>
              </div>
             </div>
             <div class="entry">
              <p class="partial_entry">
               <span>
                멀리서 보면 그저 그럼 썰렁한 해변가 같지만 막상 해변의 모래를 보면 신기하게 검은 모래입니다.
근처 갈일이...
               </span>
               <span class="taLnk hvrIE6 trf1381473814 partnerRvw readMore" id="review_readmore_f1381473814" onclick="ta.plc_location_detail_review_highlight_ar_responsive_1_handlers.expandReview(565925035, '/ShowUserReviews-g297885-d6876755-r565925035-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html + #REVIEWS'); ta.plc_location_detail_review_highlight_ar_responsive_1_handlers.scrollIfPresent(565925035, '/ShowUserReviews-g297885-d6876755-r565925035-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html + #REVIEWS'); ta.trackEventOnPage('Highlight_Review', 'Recent_snippet_more', '');">
                더보기
               </span>
              </p>
             </div>
             <div class="wrap">
              <div class="avatarWrap">
              </div>
              <div class="userDetails">
               <div class="ratingWithDate">
                <div class="rating reviewItemInline">
                 <span class="ui_bubble_rating bubble_40">
                 </span>
                 <span class="ratingDate">
                  2018년 3월 12일에 작성.
                 </span>
                </div>
               </div>
               <div class="username">
                surfee75
               </div>
               ,
               <div class="location">
                서울, 대한민국
               </div>
               [ahref]
               
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="reviewSelector recent_review friend_review_placeholder">
           <div class="review basic_review provider0 first">
            <div class="reviewWrap">
             <div class="quoteBlock easyClear">
              <div class="quote">
               <span class="taLnk" id="rnf1510970117" onclick="ta.plc_location_detail_review_highlight_ar_responsive_1_handlers.scrollIfPresent(542909012, '/ShowUserReviews-g297885-d6876755-r542909012-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html + #REVIEWS'); ta.trackEventOnPage('Highlight_Review', 'Recent_snippet_title', '');">
                <i>
                 “
                </i>
                검은모래
                <i>
                 ”
                </i>
               </span>
              </div>
             </div>
             <div class="entry">
              <p class="partial_entry">
               <span>
                진짜 모래가 검은색이에요ㅎㅎㅎ
일부러 가실 필요는 없을듯 하고 일정 맞으시면 한번 들리셔서 구경해보시길 추천...
               </span>
               <span class="taLnk hvrIE6 trf1510970117 partnerRvw readMore" id="review_readmore_f1510970117" onclick="ta.plc_location_detail_review_highlight_ar_responsive_1_handlers.expandReview(542909012, '/ShowUserReviews-g297885-d6876755-r542909012-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html + #REVIEWS'); ta.plc_location_detail_review_highlight_ar_responsive_1_handlers.scrollIfPresent(542909012, '/ShowUserReviews-g297885-d6876755-r542909012-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html + #REVIEWS'); ta.trackEventOnPage('Highlight_Review', 'Recent_snippet_more', '');">
                더보기
               </span>
              </p>
             </div>
             <div class="wrap">
              <div class="avatarWrap">
              </div>
              <div class="userDetails">
               <div class="ratingWithDate">
                <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[linkx]<li>[ahref]</li>[pkeyx]
               </div>
               <div class="username">
                luvvparis
               </div>
               [linkx]
               
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        [ahref]
        
       </div>
      </div>
     </div>
     <div class="tab_bar_info">
     </div>
     <div class="ui_column ui_columns is-gapless mosaic_photos is-8-desktop is-7-tablet is-12-mobile">
      <div class="ui_column is-9-desktop is-12-tablet is-12-mobile large_photo_wrapper" data-tab="TABS_PHOTOS">
       <div class="prw_rup prw_common_basic_image photo_widget attractions_large landscape" data-prwidget-init="" data-prwidget-name="common_basic_image">
        <div>
        </div>
       </div>
       <div class="see_all_count_wrap" onclick="ta.plc_resp_photo_mosaic_ar_responsive_0_handlers.openPhotoViewer();">
        <span class="see_all_count">
         <span class="ui_icon camera">
         </span>
         <span class="details">
          모든 사진(38장)
         </span>
        </span>
       </div>
       <div class="entry_cta_wrap" onclick="ta.plc_resp_photo_mosaic_ar_responsive_0_handlers.openPhotoViewerEntry();">
        <span class="entry_cta">
         <span class="ui_icon expand">
         </span>
         전체 보기
        </span>
       </div>
       <div class="badge_wrapper">
        <div class="prw_rup prw_common_detail_location_badge" data-prwidget-init="" data-prwidget-name="common_detail_location_badge">
        </div>
       </div>
      </div>
      <div class="ui_column is-3-desktop is-hidden-mobile mini_photo_wrapper">
       <div class="mini_photo">
        <div class="prw_rup prw_common_basic_image photo_widget small landscape" data-prwidget-init="" data-prwidget-name="common_basic_image">
         <div>
         </div>
        </div>
       </div>
       <div class="mini_photo">
        <div class="prw_rup prw_common_basic_image photo_widget small landscape" data-prwidget-init="" data-prwidget-name="common_basic_image">
         <div>
         </div>
        </div>
       </div>
       <div class="mini_photo">
        <div class="prw_rup prw_common_basic_image photo_widget small landscape" data-prwidget-init="" data-prwidget-name="common_basic_image">
         <div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_sticky_header" data-placement-name="sticky_header:ar_responsive" id="taplc_sticky_header_ar_responsive_0">
    <div class="react-container" data-component="@ta/attractions.ar-persistent-header" data-component-props="page-manifest" id="component_7">
    </div>
   </div>
  </div>
 </div>
 <div class="delineation accessible_red_3" id="MAIN">
  <div class="ui_container is-fluid page-section" id="atf_meta">
  </div>
  <div class="ui_container is-fluid page-section" id="btf_wrap">
   <div class="ppr_rup ppr_priv_resp_shopping_premium_content" data-placement-name="resp_shopping_premium_content" id="taplc_resp_shopping_premium_content_0">
    <div class="react-container" data-component="@ta/shopping.premium-shopping" data-component-props="page-manifest" id="component_29">
     <div class="shopping-premium-shopping-PremiumShopping__premiumContent--GxZA-">
      <div class="ui_columns is-multiline is-gapless-vertical is-mobile">
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_location_detail_overview_resp" data-placement-name="location_detail_overview_resp:ar_responsive" id="taplc_location_detail_overview_resp_ar_responsive_0">
    <div class="ui_section no-bg block_wrap" data-tab="TABS_OVERVIEW">
     <div class="ui_columns overviewWrapper">
      <div class="ui_column is-4-desktop overviewCard leftWell is-hidden-mobile">
       <div class="wrapperDiv">
        <div class="ppr_rup ppr_priv_location_detail_reviews_card" data-placement-name="location_detail_reviews_card" id="taplc_location_detail_reviews_card_0">
         <div class="section title">
          여행자 개요
         </div>
         <div class="section rating">
          <span class="overallRating">
           3.5
          </span>
          [ahref]
          
          <a class="seeAllReviews autoResize" data-target-tab="TABS_REVIEWS" href="S">
           34개 리뷰
          </a>
         </div>
         <div class="section histogram">
          <div class="prw_rup prw_common_ratings_histogram_overview overviewHistogram" data-prwidget-init="handlers" data-prwidget-name="common_ratings_histogram_overview">
           <ul class="ratings_chart">
            <li class="chart_row clickable" onclick="widgetEvCall('handlers.click', event, this, '5', 'Excellent')">
             <span class="row_label row_cell">
              아주좋음
             </span>
             <span class="row_bar row_cell">
              <span class="bar">
               <span class="fill" style="width:20%;">
               </span>
              </span>
             </span>
             <span class="row_count row_cell">
              20%
             </span>
            </li>
            <li class="chart_row clickable" onclick="widgetEvCall('handlers.click', event, this, '4', 'Very good')">
             <span class="row_label row_cell">
              좋음
             </span>
             <span class="row_bar row_cell">
              <span class="bar">
               <span class="fill" style="width:32%;">
               </span>
              </span>
             </span>
             <span class="row_count row_cell">
              32%
             </span>
            </li>
            <li class="chart_row highlighted clickable" onclick="widgetEvCall('handlers.click', event, this, '3', 'Average')">
             <span class="row_label row_cell">
              보통
             </span>
             <span class="row_bar row_cell">
              <span class="bar">
               <span class="fill" style="width:29%;">
               </span>
              </span>
             </span>
             <span class="row_count row_cell">
              29%
             </span>
            </li>
            <li class="chart_row clickable" onclick="widgetEvCall('handlers.click', event, this, '2', 'Poor')">
             <span class="row_label row_cell">
              별로
             </span>
             <span class="row_bar row_cell">
              <span class="bar">
               <span class="fill" style="width:17%;">
               </span>
              </span>
             </span>
             <span class="row_count row_cell">
              17%
             </span>
            </li>
            <li class="chart_row clickable" onclick="widgetEvCall('handlers.click', event, this, '1', 'Terrible')">
             <span class="row_label row_cell">
              최악
             </span>
             <span class="row_bar row_cell">
              <span class="bar">
               <span class="fill" style="width:2%;">
               </span>
              </span>
             </span>
             <span class="row_count row_cell">
              2%
             </span>
            </li>
           </ul>
          </div>
         </div>
         <div class="section reviewSnippets defer">
         </div>
        </div>
       </div>
      </div>
      <div class="ui_column is-12-mobile is-4-desktop overviewCard centerWell">
       <div class="wrapperDiv">
        <div class="ppr_rup ppr_priv_location_detail_about_card" data-placement-name="location_detail_about_card" id="taplc_location_detail_about_card_0">
         <div class="react-container" data-component="@ta/attractions.attraction-detail-about-card" data-component-props="page-manifest" id="component_18">
          <div class="attractions-attraction-detail-about-card-AttractionDetailAboutCard__aboutCardWrapper--OZX-a">
           <div class="attractions-attraction-detail-about-card-AttractionDetailAboutCard__section--1_Efg attractions-attraction-detail-about-card-AttractionDetailAboutCard__title--6-Ao-">
            소개
           </div>
           <div class="attractions-attraction-detail-about-card-AttractionDetailAboutCard__section--1_Efg">
            <div class="public-weather-WeatherContainer__title--1XCmY">
             현지 날씨
            </div>
            <div class="public-weather-WeatherContainer__subtitle--2d5nd">
             [pkeyx]<li>[area1][keywordx]</li><li>[pkeyx]</li>[pkeyx]
            </div>
            <div class="public-weather-WeatherContainer__weatherDisplaySection--2BNJc">
             <div class="public-weather-WeatherContainer__temperatureDisplaySection--1e6H-">
              <div class="public-weather-WeatherContainer__month--1CJ0U">
               <div class="public-weather-MonthDisplay__temperatures--110QH">
                <div class="public-weather-MonthDisplay__high--TrUdk">
                 <span>
                  27°
                 </span>
                </div>
                <div class="public-weather-MonthDisplay__low--2m1w1">
                 <span>
                  22°
                 </span>
                </div>
               </div>
               <div class="public-weather-MonthDisplay__text--1KKPy">
                8월
               </div>
              </div>
              <div class="public-weather-WeatherContainer__month--1CJ0U">
               <div class="public-weather-MonthDisplay__temperatures--110QH">
                <div class="public-weather-MonthDisplay__high--TrUdk">
                 <span>
                  23°
                 </span>
                </div>
                <div class="public-weather-MonthDisplay__low--2m1w1">
                 <span>
                  18°
                 </span>
                </div>
               </div>
               <div class="public-weather-MonthDisplay__text--1KKPy">
                9월
               </div>
              </div>
              <div class="public-weather-WeatherContainer__month--1CJ0U">
               <div class="public-weather-MonthDisplay__temperatures--110QH">
                <div class="public-weather-MonthDisplay__high--TrUdk">
                 <span>
                  19°
                 </span>
                </div>
                <div class="public-weather-MonthDisplay__low--2m1w1">
                 <span>
                  13°
                 </span>
                </div>
               </div>
               <div class="public-weather-MonthDisplay__text--1KKPy">
                10월
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="ui_column is-12-mobile is-4-desktop overviewCard rightWell">
       <div class="wrapperDiv">
        <div class="ppr_rup ppr_priv_location_detail_contact_card" data-placement-name="location_detail_contact_card:ar_responsive" id="taplc_location_detail_contact_card_ar_responsive_0">
         <div class="section title">
          문의하기
         </div>
         <div class="section map-widget clickable" data-track="map" onclick="placementEvCall('taplc_location_detail_contact_card_ar_responsive_0', 'handlers.openMap', event, this);">
          <div class="prw_rup prw_common_responsive_static_map_image staticMap" data-prwidget-init="handlers" data-prwidget-name="common_responsive_static_map_image">
           <div class="contentChoice" data-contentchoice="STATIC_MAP_WIDGETS/RESPONSIVE_AJAX_BASED_AR" style="display: none">
           </div>
          </div>
         </div>
         <div class="contactInfo" data-context="Attraction_Review" data-locid="6876755">
          <div class="detail_section address">
           <span class="textAlignWrapper address">
            <span class="ui_icon map-pin-fill">
            </span>
            <span>
             <span class="locality">
              제주
             </span>
            </span>
           </span>
          </div>
         </div>
         <div class="improveListing tabletDisplay">
          <div class="prw_rup prw_common_improve_this_listing" data-prwidget-init="handlers" data-prwidget-name="common_improve_this_listing">
           [linkx]
           
          </div>
         </div>
         <div class="improveListing mobileDisplay">
          <div class="prw_rup prw_common_improve_this_listing" data-prwidget-init="handlers" data-prwidget-name="common_improve_this_listing">
           <div class="improve_this_listing" data-location-id="6876755" data-servlet-name="Attraction_Review">
            <div class="improve_this_listing_text" onclick="(ta.prwidgets.getjs(this,'handlers')).showReportOptions('report_incorrect_info_click', 'DB0EB3F728FD4F9557872CE1DE693961');">
             이 리스팅 정보 개선하기
            </div>
            <div class="overlay">
             <div class="ui_modal_card">
              <div class="modal-background" onclick="require('lib/jquery-amd')(this).parents('.ui_modal_card').removeClass('is-active')">
              </div>
              <div class="modal-card">
               <div class="ui_close_x" onclick="require('lib/jquery-amd')(this).parents('.ui_modal_card').removeClass('is-active')">
               </div>
               <div class="modal-card-head">
                <p class="modal-card-title">
                 이 리스팅 정보 개선하기
                </p>
               </div>
               <div class="modal-card-body">
                <div class="thank_you_text hidden">
                 감사합니다. 트립어드바이저로 접수되었습니다.
                </div>
                <div class="report_options">
                 <ul>
                  <li class="ui_radio item">
                  </li>
                  <li class="ui_radio item">
                  </li>
                  <li class="ui_radio item">
                  </li>
                 </ul>
                </div>
               </div>
               <div class="modal-card-foot">
                <div class="next ui_button primary fullwidth large" onclick="(ta.prwidgets.getjs(this,'handlers')).determineBehavior();">
                 다음
                </div>
                <div class="close ui_button primary fullwidth large hidden" onclick="(ta.prwidgets.getjs(this,'handlers')).removeWidget();">
                 닫기
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_location_detail_tag_questions" data-placement-name="location_detail_tag_questions:ar_responsive" id="taplc_location_detail_tag_questions_ar_responsive_0">
    <div class="ui_section block_wrap is-hidden-mobile">
     <div class="prw_rup prw_common_tag_questions blOffer" data-prwidget-init="handlers" data-prwidget-name="common_tag_questions">
      <div class="questions" data-location-id="6876755" data-security-token="TNI1625!AE4N6nA+0KG1zcfjZD2ceT+dsEurarWTAcR/rCJfQTs8BK/1ciDj8pyB/VoYT1Is3aShBsPoygl2cCdGrSR65MXOjmKGJHLWDI89wirhlKj1Q4q+u791qYO5cv9LeaFKGveZyHUujoq4nh6XKhvqNNdMFAMwm9fBuxCc6sqR9Bdv">
       <div class="question hidden" data-id="12472">
        <span class="questionText">
         이 장소 또는 액티비티에
         <span>
          운동복
         </span>
         을 추천하시겠어요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="11296">
        <span class="questionText">
         이 장소 또는 액티비티에서
         <span>
          음식이 제공
         </span>
         되나요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="11309">
        <span class="questionText">
         이 장소 또는 액티비티의 가격이
         <span>
          저렴
         </span>
         한가요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="11312">
        <span class="questionText">
         이 장소 또는 액티비티를
         <span>
          흥미진진하고 스릴을 찾는
         </span>
         경험으로 추천하시겠어요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li><li>[linkx]</li>[ahref]
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="12494">
        <span class="questionText">
         이 장소 또는 액티비티에 추천하는
         <span>
          복장 규정
         </span>
         이 있나요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="12165">
        <span class="questionText">
         <span>
          일몰
         </span>
         을 구경하기에 가장 좋은 장소 또는 액티비티에 해당하나요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="12170">
        <span class="questionText">
         <span>
          인원이 많은 그룹(6명 이상)
         </span>
         으로 여행할 때 꼭 해봐야 할 경험인가요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="12158">
        <span class="questionText">
         이 관광명소가 좋은
         <span>
          피크닉 장소
         </span>
         인가요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="11301">
        <span class="questionText">
         이 장소 또는 액티비티에서
         <span>
          휠체어
         </span>
         를 사용하는 사람들이 편안하게 지낼 수 있나요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="question hidden" data-id="11310">
        <span class="questionText">
         이 장소 또는 액티비티의 가격이
         <span>
          비싼
         </span>
         가요?
        </span>
        <span class="answers">
         <span class="answer" data-value="YES">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           네
          </span>
         </span>
         <span class="answer" data-value="NO">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           아니오
          </span>
         </span>
         <span class="answer" data-value="UNSURE">
          <span class="ui_icon checkbox-border">
          </span>
          <span class="text">
           모름
          </span>
         </span>
        </span>
       </div>
       <div class="finalMessage hidden">
        <span class="messageText">
         도움을 주셔서 감사합니다!
        </span>
        [ahref]
        
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_attraction_review_shopping_shelf" data-placement-name="attraction_review_shopping_shelf:ar_responsive" id="taplc_attraction_review_shopping_shelf_ar_responsive_0">
    <div class="react-container" data-component="@ta/shopping.shelf" data-component-props="page-manifest" id="component_15">
    </div>
   </div>
   <div class="ppr_rup ppr_priv_resp_hr_ad_wrapper" data-placement-name="resp_hr_ad_wrapper:ar_responsive_upper_block" id="taplc_resp_hr_ad_wrapper_ar_responsive_upper_block_0">
    <div class="column_wrap ui_columns is-multiline reviewsAndAdsBlock">
     <div class="content_column ui_column is-8-desktop is-12">
      <div class="ppr_rup ppr_priv_location_reviews_container_resp" data-placement-name="location_reviews_container_resp:location_resp" id="taplc_location_reviews_container_resp_location_resp_0">
       <div class="ratings_and_types block_wrap ui_section" data-tab="TABS_REVIEWS" id="REVIEWS">
        <div class="prw_rup prw_common_location_content_header_resp" data-prwidget-init="handlers" data-prwidget-name="common_location_content_header_resp">
         <div class="block_header block_title" data-reviewsscrolltarget="">
          <div class="title_text">
           리뷰
           <span class="reviews_header_count">
            (34)
           </span>
          </div>
          <div class="title_cta">
           [linkx]
           
           <div class="prw_rup prw_common_review_point_campaign button_war lanCTA pointCampaign" data-prwidget-init="handlers" data-prwidget-name="common_review_point_campaign">
            <div class="iconContainer asiana placetypeReview">
             [ahref]
             
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="ppr_rup ppr_priv_detail_filters" data-placement-name="detail_filters:ar_responsive" id="taplc_detail_filters_ar_responsive_0">
         <div class="filters-all" data-targetevent="update-detail_filters:ar_responsive">
          <div class="collapsible is-shown-at-tablet" data-breakpoint="tablet">
           <div class="collapsibleContent ppr_rup ppr_priv_detail_filters">
            <div class="header is-hidden-tablet">
             <div class="ui_header h2">
              리뷰 필터하기
             </div>
             <div class="ui_header h4 counts">
              22개 결과
             </div>
             <div class="ui_close_x" onclick="placementEvCall('taplc_detail_filters_ar_responsive_0', 'handlers.done', event, this);">
             </div>
            </div>
            <div class="ui_columns filters">
             <div class="prw_rup prw_filters_detail_checkbox ui_column separated is-5" data-prwidget-init="handlers" data-prwidget-name="filters_detail_checkbox">
              <div class="node-preserve" data-ajax-preserve="preserved-filters_detail_checkbox_trating_true">
               <div class="name ui_header h2" onclick="widgetEvCall('handlers.toggleCollapse', event, this);">
                여행자 평가
                <span class="selection-preview">
                </span>
                <span class="collapse_mark">
                 <span class="ui_icon caret-down">
                 </span>
                 <span class="ui_icon caret-up">
                 </span>
                </span>
               </div>
               <div class="content">
                <div class="choices" data-name="ta_rating" data-param="trating">
                 <div class="ui_checkbox item" data-tracker="5" data-value="5">
                  <label class="row_label label" for="filters_detail_checkbox_trating__5">
                   아주좋음
                  </label>
                  <span class="row_bar_cell">
                   <li>[ahref]</li><li>[ahref]</li>[linkx][ahref][pkeyx]
                  </span>
                  <span class="row_num is-shown-at-tablet">
                   6
                  </span>
                 </div>
                 <div class="ui_checkbox item" data-tracker="4" data-value="4">
                  <label class="row_label label" for="filters_detail_checkbox_trating__4">
                   좋음
                  </label>
                  <span class="row_bar_cell">
                   <span class="row_bar is-shown-at-tablet" onclick="document.getElementById('filters_detail_checkbox_trating__4').click()">
                    <span class="row_fill" style="width:40.90909090909091%;">
                    </span>
                   </span>
                  </span>
                  <span class="row_num is-shown-at-tablet">
                   9
                  </span>
                 </div>
                 <div class="ui_checkbox item" data-tracker="3" data-value="3">
                  <label class="row_label label" for="filters_detail_checkbox_trating__3">
                   보통
                  </label>
                  <span class="row_bar_cell">
                   <span class="row_bar is-shown-at-tablet" onclick="document.getElementById('filters_detail_checkbox_trating__3').click()">
                    <span class="row_fill" style="width:22.727272727272727%;">
                    </span>
                   </span>
                  </span>
                  <span class="row_num is-shown-at-tablet">
                   5
                  </span>
                 </div>
                 <div class="ui_checkbox item" data-tracker="2" data-value="2">
                  <label class="row_label label" for="filters_detail_checkbox_trating__2">
                   별로
                  </label>
                  <span class="row_bar_cell">
                   <span class="row_bar is-shown-at-tablet" onclick="document.getElementById('filters_detail_checkbox_trating__2').click()">
                    <span class="row_fill" style="width:9.090909090909092%;">
                    </span>
                   </span>
                  </span>
                  <span class="row_num is-shown-at-tablet">
                   2
                  </span>
                 </div>
                 <div class="ui_checkbox item" data-tracker="1" data-value="1">
                  <label class="row_label label" for="filters_detail_checkbox_trating__1">
                   최악
                  </label>
                  <span class="row_bar_cell">
                   <span class="row_bar is-shown-at-tablet" onclick="document.getElementById('filters_detail_checkbox_trating__1').click()">
                   </span>
                  </span>
                  <span class="row_num is-shown-at-tablet">
                   0
                  </span>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class="prw_rup prw_filters_detail_checkbox ui_column separated is-2" data-prwidget-init="handlers" data-prwidget-name="filters_detail_checkbox">
              <div class="node-preserve" data-ajax-preserve="preserved-filters_detail_checkbox_filterSegment_true">
               <div class="name ui_header h2" onclick="widgetEvCall('handlers.toggleCollapse', event, this);">
                여행자 유형
                <span class="selection-preview">
                </span>
                <span class="collapse_mark">
                 <span class="ui_icon caret-down">
                 </span>
                 <span class="ui_icon caret-up">
                 </span>
                </span>
               </div>
               <div class="content">
                <div class="choices" data-name="traveler_filter" data-param="filterSegment">
                 <div class="ui_checkbox item" data-tracker="Family" data-value="3">
                  <label class="row_label label" for="filters_detail_checkbox_filterSegment__3">
                   가족
                  </label>
                 </div>
                 <div class="ui_checkbox item" data-tracker="Couples" data-value="2">
                  <label class="row_label label" for="filters_detail_checkbox_filterSegment__2">
                   커플
                  </label>
                 </div>
                 <div class="ui_checkbox item" data-tracker="Solo" data-value="5">
                  <label class="row_label label" for="filters_detail_checkbox_filterSegment__5">
                   나홀로 여행
                  </label>
                 </div>
                 <div class="ui_checkbox item" data-tracker="Business" data-value="1">
                  <label class="row_label label" for="filters_detail_checkbox_filterSegment__1">
                   비지니스
                  </label>
                 </div>
                 <div class="ui_checkbox item" data-tracker="Friends" data-value="4">
                  <label class="row_label label" for="filters_detail_checkbox_filterSegment__4">
                   친구
                  </label>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class="prw_rup prw_filters_detail_checkbox ui_column separated is-2" data-prwidget-init="handlers" data-prwidget-name="filters_detail_checkbox">
              <div class="node-preserve" data-ajax-preserve="preserved-filters_detail_checkbox_filterSeasons_true">
               <div class="name ui_header h2" onclick="widgetEvCall('handlers.toggleCollapse', event, this);">
                기간
                <span class="selection-preview">
                </span>
                <span class="collapse_mark">
                 <span class="ui_icon caret-down">
                 </span>
                 <span class="ui_icon caret-up">
                 </span>
                </span>
               </div>
               <div class="content">
                <div class="choices" data-name="season" data-param="filterSeasons">
                 <div class="ui_checkbox item" data-tracker="3,4,5" data-value="1">
                  <label class="row_label label" for="filters_detail_checkbox_filterSeasons__1">
                   3~5월
                  </label>
                 </div>
                 <div class="ui_checkbox item" data-tracker="6,7,8" data-value="2">
                  <label class="row_label label" for="filters_detail_checkbox_filterSeasons__2">
                   6~8월
                  </label>
                 </div>
                 <div class="ui_checkbox item" data-tracker="9,10,11" data-value="3">
                  <label class="row_label label" for="filters_detail_checkbox_filterSeasons__3">
                   9~11월
                  </label>
                 </div>
                 <div class="ui_checkbox item" data-tracker="12,1,2" data-value="4">
                  <label class="row_label label" for="filters_detail_checkbox_filterSeasons__4">
                   12~2월
                  </label>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class="prw_rup prw_filters_detail_language ui_column separated is-3" data-prwidget-init="handlers" data-prwidget-name="filters_detail_language">
              [linkx]<li>[linkx]</li>[pkeyx]<li>[pkeyx]</li><li>[area1][keywordx]</li>
             </div>
            </div>
           </div>
          </div>
          <div class="noncollapsible">
           <div class="prw_rup prw_filters_detail_checkbox" data-prwidget-init="handlers" data-prwidget-name="filters_detail_checkbox">
            <div class="node-preserve is-hidden-tablet" data-ajax-preserve="preserved-filters_detail_checkbox_trating_">
             <div class="name ui_header h2">
              여행자 평가
             </div>
             <div class="content">
              <div class="choices" data-name="ta_rating" data-param="trating">
               <div class="ui_checkbox item" data-tracker="5" data-value="5">
                <label class="row_label label no_display" for="filters_detail_checkbox_trating_histogram_5">
                 아주좋음
                </label>
                <span class="row_bar_cell">
                 <span class="row_bar" onclick="document.getElementById('filters_detail_checkbox_trating_histogram_5').click()">
                  <span class="row_fill" style="width:27.272727272727273%;">
                  </span>
                 </span>
                </span>
                <span class="row_num">
                 6
                </span>
               </div>
               <div class="ui_checkbox item" data-tracker="4" data-value="4">
                <label class="row_label label no_display" for="filters_detail_checkbox_trating_histogram_4">
                 좋음
                </label>
                <span class="row_bar_cell">
                 [ahref]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
                </span>
                <span class="row_num">
                 9
                </span>
               </div>
               <div class="ui_checkbox item" data-tracker="3" data-value="3">
                <label class="row_label label no_display" for="filters_detail_checkbox_trating_histogram_3">
                 보통
                </label>
                <span class="row_bar_cell">
                 <span class="row_bar" onclick="document.getElementById('filters_detail_checkbox_trating_histogram_3').click()">
                  <span class="row_fill" style="width:22.727272727272727%;">
                  </span>
                 </span>
                </span>
                <span class="row_num">
                 5
                </span>
               </div>
               <div class="ui_checkbox item" data-tracker="2" data-value="2">
                <label class="row_label label no_display" for="filters_detail_checkbox_trating_histogram_2">
                 별로
                </label>
                <span class="row_bar_cell">
                 <span class="row_bar" onclick="document.getElementById('filters_detail_checkbox_trating_histogram_2').click()">
                  <span class="row_fill" style="width:9.090909090909092%;">
                  </span>
                 </span>
                </span>
                <span class="row_num">
                 2
                </span>
               </div>
               <div class="ui_checkbox item" data-tracker="1" data-value="1">
                <label class="row_label label no_display" for="filters_detail_checkbox_trating_histogram_1">
                 최악
                </label>
                <span class="row_bar_cell">
                 <span class="row_bar" onclick="document.getElementById('filters_detail_checkbox_trating_histogram_1').click()">
                 </span>
                </span>
                <span class="row_num">
                 0
                </span>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_filters_query_resp" data-prwidget-init="handlers" data-prwidget-name="filters_query_resp">
            <div class="title">
             여행자 의견 보기:
            </div>
            <div data-index="6" data-param="q">
             <form class="query_form">
              <div class="search-input">
               <span class="ui_icon search search-icon" onclick="widgetEvCall('handlers.updateFilter', event, this, true);">
               </span>
              </div>
             </form>
            </div>
            <div class="tagdata hidden" data-tags="">
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="ppr_rup ppr_priv_detail_filter_bar" data-placement-name="detail_filter_bar:ar_responsive" id="taplc_detail_filter_bar_ar_responsive_0">
         <div class="filter_bar ui_columns is-hidden-tablet is-gapless" data-targetevent="update-detail_filter_bar:ar_responsive">
          <div class="ui_column tag_wrap is-narrow">
           <div class="filter_title">
            선택한 필터
           </div>
           <span class="ui_tag_box is-action ui_icon single-chevron-down" onclick="placementEvCall('taplc_detail_filter_bar_ar_responsive_0', 'handlers.openFilters', event, this)">
            필터
           </span>
           <span class="ui_tag_box ui_icon times filter_item" data-index="4" data-param="filterLang" data-tracker="한국어" data-value="ko" onclick="placementEvCall('taplc_detail_filter_bar_ar_responsive_0', 'handlers.removeFilter', event, this)">
            한국어
           </span>
          </div>
         </div>
        </div>
        <div class="ppr_rup ppr_priv_hotels_loading_box" data-placement-name="hotels_loading_box:ar_responsive" id="taplc_hotels_loading_box_ar_responsive_0">
         <div class="loadingBox" data-targetevent="update-hotels_loading_box:ar_responsive">
          리스트 업데이트 중...
          <br/>
          <span class="ui_loader small">
           <span>
           </span>
           <span>
           </span>
           <span>
           </span>
           <span>
           </span>
           <span>
           </span>
          </span>
         </div>
        </div>
        <div class="ppr_rup ppr_priv_location_reviews_list_resp" data-placement-name="location_reviews_list_resp:ar_responsive" id="taplc_location_reviews_list_resp_ar_responsive_0">
         <div class="listContainer hide-more-mobile" data-contextchoice="DETAIL">
          <div class="pagination-details">
           <b>
            22
           </b>
           건의 리뷰 중
           <b>
            1
           </b>
           -
           <b>
            10
           </b>
          </div>
          <div class="fullwidth is-hidden-tablet">
          </div>
          <div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="565925035">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="565925035" id="review_565925035">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_C6F7C73D4D20AF40035D0F7F3D690819-SRC_565925035" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_C6F7C73D4D20AF40035D0F7F3D690819">
                    <div class="avatarWrapper">
                     [ahref]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     surfee75
                    </div>
                    <div class="userLoc">
                     <strong>
                      서울, 대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_C6F7C73D4D20AF40035D0F7F3D690819-SRC_565925035" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     26
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     5
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_40">
                </span>
                <span class="ratingDate" title="2018년 3월 12일">
                 2018년 3월 12일에 작성.
                </span>
                <span class="viaMobile" onclick="widgetEvCall('handlers.viaMobileClick', event, this)">
                 <span class="ui_icon mobile-phone">
                 </span>
                 모바일
                </span>
                <div class="quote">
                 <a class="title" href="/ShowUserReviews-g297885-d6876755-r565925035-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html" id="rn565925035" onclick="(ta.prwidgets.getjs(this,'handlers')).reviewClick(this.href, '0');">
                  <span class="noQuotes">
                   정말 모래가 검은색
                  </span>
                 </a>
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   멀리서 보면 그저 그럼 썰렁한 해변가 같지만 막상 해변의 모래를 보면 신기하게 검...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_inline_photos_hsx" data-prwidget-init="" data-prwidget-name="reviews_inline_photos_hsx">
                 <div class="inlinePhotosWrapper">
                  <div class="photoContainer" onclick="requireEvCall('actions/openRespPhotoViewer.open',event,this,&quot;6876755&quot;,&quot;297885&quot;,&quot;307084195&quot;,&quot;2&quot;);return false;">
                   <div class="prw_rup prw_common_centered_image inlineImage" data-prwidget-init="" data-prwidget-name="common_centered_image">
                    <span class="imgWrap" style="max-width:106px;max-height:70px;">
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2018년 3월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_565925035" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,565925035,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpco3oAXoKmo0tEn1o3oAXoKmo0zH1XAkvvo0pSM1f3qnkfkmxMdxMXKbqndKKmoxMKqnkqnmxM3AKvUA0npEEeJIV1U0EJIVqiJcpV1U0Ii9VC1rZlU3XozxbzsyqIdqIKq8qnDhDbhxbEq83rmMqnxdxXycIMlcmHvoxEx5Ux5qn7HOHTpxbq8aqIqihMTwxGUCjjKd5VAyssJbixXSxMqiqQax2C3DXuOIzzZxMxGxE2aq8qi5x5C7CiqQEy3qijNZzstwEx5zC3snSCTmxMkautzCyjejDxXfqQjxd9G7uZ7koNGjnHqi9D9mhCnKzsxGqQgjyf97xMx5Oxdh');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                     1
                    </span>
                    <span class="thankUser">
                     surfee75님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="cms-wrapper">
          </div>
          <div>
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="542909012">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="542909012" id="review_542909012">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_257A71EEBBFA2F154AA869DB2F1F4762-SRC_542909012" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_257A71EEBBFA2F154AA869DB2F1F4762">
                    <div class="avatarWrapper">
                     [linkx]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     luvvparis
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_257A71EEBBFA2F154AA869DB2F1F4762-SRC_542909012" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     334
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     40
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_30">
                </span>
                <span class="ratingDate" title="2017년 11월 24일">
                 2017년 11월 24일에 작성.
                </span>
                <span class="viaMobile" onclick="widgetEvCall('handlers.viaMobileClick', event, this)">
                 <span class="ui_icon mobile-phone">
                 </span>
                 모바일
                </span>
                <div class="quote">
                 <a class="title" href="/ShowUserReviews-g297885-d6876755-r542909012-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html" id="rn542909012" onclick="(ta.prwidgets.getjs(this,'handlers')).reviewClick(this.href, '0');">
                  <span class="noQuotes">
                   검은모래
                  </span>
                 </a>
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   진짜 모래가 검은색이에요ㅎㅎㅎ
일부러 가실 필요는 없을듯 하고 일정 맞으시면 한번...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2017년 11월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_542909012" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,542909012,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcodXAKAKUX0tEn1odXAKAKUX0zH1XAkvvo0pSM1XokbkUzszs77qnbXqnUodbbv3AxM7XqnUqndk3X0npEEeJIV1U0EJIVqiJcpV1U0Ii9VC1rZlU3Xozxb7VEyvVgxGDRp3xGSqQvDzsvRHzCZxEJ5vVKxMMkIxbXxbJqIAqnnx29ixEhf3bnrqiqnuuxEiRqIxbqimu9xEuq8qI9dnKsj2LkkHG9xdujKux5qQCEoN2OqnxEhSdUAkTcJA5xbcxGS2qnwuwx2KxGxXyCuodcAqQzzXlzzHqI552mRIojcmqnicKxXxdoxbzzdlVIlEoxEli2GipIxdzCE');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                     1
                    </span>
                    <span class="thankUser">
                     luvvparis님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div>
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="541790678">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="541790678" id="review_541790678">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_CCDAA17852BAFB0E88B58CF85B356AA1-SRC_541790678" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_CCDAA17852BAFB0E88B58CF85B356AA1">
                    <div class="avatarWrapper">
                     [ahref]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     Trek809328
                    </div>
                    <div class="userLoc">
                     <strong>
                      제주, 대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_CCDAA17852BAFB0E88B58CF85B356AA1-SRC_541790678" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     132
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     5
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_40">
                </span>
                <span class="ratingDate" title="2017년 11월 18일">
                 2017년 11월 18일에 작성.
                </span>
                <span class="viaMobile" onclick="widgetEvCall('handlers.viaMobileClick', event, this)">
                 <span class="ui_icon mobile-phone">
                 </span>
                 모바일
                </span>
                <div class="quote">
                 [ahref]
                 
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   정말 모래가 검은색이에요! 진짜 신기합니다. 물은 정말 맑아요~~ 보고만 있어도 ...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2017년 10월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_541790678" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,541790678,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcodUkAK3kv0tEn1odUkAK3kv0zH1XAkvvo0pSM1ffxMbbUkvoX7bqn7Kzsvv7ovfqnvo7mo3bbU0npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3XozxbqntAqQdOEzCl7wnrIGqQGHqIiXprunEGnjSqixbVeJrq8zzLzsHl2qIKug2L5GlzzxbcbG5sklx5dDxMizzJgAvxbSMzzqnytkigIZxMnlSiubmLfc2Zx5xbbDxEAUHUxXLrpXqQqi2eCxGRx2NIbqQxXxMh9xMbxEcozCbKOn7gfhLRxEZx2qiZp3N9ezsTx5xXJdqnqIiDx5IspNKek9');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     Trek809328님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="mobile-more">
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="540566383">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="540566383" id="review_540566383">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_2AA115F19B5052EBAD74057C902B4E23-SRC_540566383" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_2AA115F19B5052EBAD74057C902B4E23">
                    <div class="avatarWrapper">
                     [ahref]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     OnAir807074
                    </div>
                    <div class="userLoc">
                     <strong>
                      부산, 대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_2AA115F19B5052EBAD74057C902B4E23-SRC_540566383" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     336
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     34
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_50">
                </span>
                <span class="ratingDate" title="2017년 11월 13일">
                 2017년 11월 13일에 작성.
                </span>
                <div class="quote">
                 [ahref]
                 
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   아침 일찍 일출을 보겠다며 바닷가로 달려간 게 삼양해수욕장이었는데 해변에 아무도 ...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2017년 7월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_540566383" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,540566383,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcodKo33mvm0tEn1odKo33mvm0zH1XAkvvo0pSM1XbbUUoqnUA7oKoXzs7bxMkdKokfAKX7dzsXm0npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3XozxbDNdodZS5sfHzs92kxdex5x2SRx5oGGtEyoMkUxXiADi2ZzsVJxXEMCC3H2Su7zzMErxdDGyItgCMXxddDeqi7qixbazCxMx55URGDvMq8pwewSqQzzqnilSbCK3hgRN3x5sLLixdoCOHAO9dhgwq8kmmbgvMkECOx5qQq8aqImqIDw9fjvdNDxb5lpqQ3fzCx5EmoxGGxdqIqQOJ');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     OnAir807074님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="mobile-more">
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="522472318">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="522472318" id="review_522472318">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_33863448308A46A029E66F2072C6B81D-SRC_522472318" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_33863448308A46A029E66F2072C6B81D">
                    <div class="avatarWrapper">
                     [ahref]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     sdlove316
                    </div>
                    <div class="userLoc">
                     <strong>
                      다롄(대련), 중국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_33863448308A46A029E66F2072C6B81D-SRC_522472318" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     858
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     61
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_40">
                </span>
                <span class="ratingDate" title="2017년 9월 8일">
                 2017년 9월 8일에 작성.
                </span>
                <div class="quote">
                 [ahref]
                 
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   이런 해변은 처음 봤습니다.
모래가 모두 검은색이네요.
공항가 가까워 떠나기 전에...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2016년 10월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_522472318" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,522472318,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcoXXdkXmUv0tEn1oXXdkXmUv0zH1XAkvvo0pSM1mmv3mddvmKvbd3bKXAzs33qnXKkXf37vUxM0npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3XozxblCuKuGpvvZJ2dqnjqQVHxdzzxb3qiXbw9TqIq8xXqnkxETypLbzsCq8mkaxXMbyMcXq8ySmGzzGsKxMnmxdzChsfk3ZkVKH7xG7qQqnGyLqnzsfVqnCuxdxGEAmX7oxGaV3s7NxXXxEEx2gtthGq8iL2xGjaHcxdUyqiZdxdInzzTTtDqQsCHqiVzs9zzE7r7qIqn7Nt2bx5ElzCfGxM7cV7xM');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     sdlove316님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="mobile-more">
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="488076846">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="488076846" id="review_488076846">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_D9931F335355FC11D8BA8773F2B993B0-SRC_488076846" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_D9931F335355FC11D8BA8773F2B993B0">
                    <div class="avatarWrapper">
                     [linkx]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     YOUNG_PINK
                    </div>
                    <div class="userLoc">
                     <strong>
                      고양, 대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_D9931F335355FC11D8BA8773F2B993B0-SRC_488076846" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     344
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     48
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_30">
                </span>
                <span class="ratingDate" title="2017년 5월 27일">
                 2017년 5월 27일에 작성.
                </span>
                <div class="quote">
                 [linkx]
                 
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   렌터카 반납할 시간이 한밤중이여서 
마지막 돌아볼 요량으로 이곳에 다녀왔습니다 
...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2017년 3월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_488076846" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,488076846,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcdvvKk3vd30tEn1dvvKk3vd30zH1XAkvvo0pSM1xMAAmUqnmmomooqnfUUxMv7bvkkmqnX7AAm7K0npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3Xozxbqnx5Rxbqn3ZGqIfxGzCJjRxdpxExXcqIrGsRiqisarxdE7h3fxEx5qnVHJafeTbkeZiC3xXwSzzwhJNmettax2cxbJMzsUNHqnpsncvkrzzndqijCOvflfzzKjsxEtzsxdHJXvNpxGAJCpXqQlzC5oXm2x2ry7zzLmImuRaOk5noAhIM7ozsVeMihzzgayxXxbhVx2msCGSyqiixEKh');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     YOUNG_PINK님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="mobile-more">
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="419012465">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="419012465" id="review_419012465">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_2AD63E089FC48AF99896B443619D7440-SRC_419012465" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_2AD63E089FC48AF99896B443619D7440">
                    <div class="avatarWrapper">
                     [ahref]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     COPYnWRiter
                    </div>
                    <div class="userLoc">
                     <strong>
                      제주도, 대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_2AD63E089FC48AF99896B443619D7440-SRC_419012465" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     113
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     29
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_50">
                </span>
                <span class="ratingDate" title="2016년 9월 16일">
                 2016년 9월 16일에 작성.
                </span>
                <span class="viaMobile" onclick="widgetEvCall('handlers.viaMobileClick', event, this)">
                 <span class="ui_icon mobile-phone">
                 </span>
                 모바일
                </span>
                <div class="quote">
                 [ahref]
                 
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   검은모래 해변은 해질 때 반영이 예뻐요.
예쁜 바다 고양이들과 바닷가 데크에서 쉬...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_inline_photos_hsx" data-prwidget-init="" data-prwidget-name="reviews_inline_photos_hsx">
                 <div class="inlinePhotosWrapper">
                  <div class="photoContainer" onclick="requireEvCall('actions/openRespPhotoViewer.open',event,this,&quot;6876755&quot;,&quot;297885&quot;,&quot;217764807&quot;,&quot;2&quot;);return false;">
                   <div class="prw_rup prw_common_centered_image inlineImage" data-prwidget-init="" data-prwidget-name="common_centered_image">
                    <span class="imgWrap" style="max-width:106px;max-height:70px;">
                     <noscript>
                      >
                     </noscript>
                    </span>
                   </div>
                  </div>
                  <div class="photoContainer" onclick="requireEvCall('actions/openRespPhotoViewer.open',event,this,&quot;6876755&quot;,&quot;297885&quot;,&quot;217764806&quot;,&quot;2&quot;);return false;">
                   <div class="prw_rup prw_common_centered_image inlineImage" data-prwidget-init="" data-prwidget-name="common_centered_image">
                    <span class="imgWrap" style="max-width:106px;max-height:70px;">
                     <noscript>
                      >
                     </noscript>
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2016년 9월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_419012465" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,419012465,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcdUAKUXd3o0tEn1dUAKUXd3o0zH1XAkvvo0pSM1XbxM3mzsKvAqnfdvbqnAAvA37ddm3UAxMkddK0npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3XozxbxMlxd9RzzIdxXoytMmixMC5NxbExGx573wwxdJpKwx52NxMpxGrxEzzapVblxGVZzzxEVx5JuOxEsZJmteO3qnHzsZhMzzwxEzCqIUvbqimkxXKyKSIxXCXqiqI93qnx5vKa9zsjGqImxGyxMJsDVvX5Rw5oxM9HAXgxES93GqIx5wcmTiDVqi7ixdbmjmkMoTjDx5KxET3Tlcsx5AswxXnyS');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     COPYnWRiter님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="mobile-more">
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="405451573">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="405451573" id="review_405451573">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_7235B855BD0973EF33D43169BD1AB37F-SRC_405451573" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_7235B855BD0973EF33D43169BD1AB37F">
                    <div class="avatarWrapper">
                     [linkx]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     Vacation807813
                    </div>
                    <div class="userLoc">
                     <strong>
                      대구, 대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_7235B855BD0973EF33D43169BD1AB37F-SRC_405451573" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     699
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     83
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_40">
                </span>
                <span class="ratingDate" title="2016년 8월 15일">
                 2016년 8월 15일에 작성.
                </span>
                <div class="quote">
                 <a class="title" href="/ShowUserReviews-g297885-d6876755-r405451573-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html" id="rn405451573" onclick="(ta.prwidgets.getjs(this,'handlers')).reviewClick(this.href, '0');">
                  <span class="noQuotes">
                   제주시에 위치한 해수욕장
                  </span>
                 </a>
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   백사장이 검은 모래로 뒤덮혀 있는 해수욕장으로 재주시안에 인접해 있어 접근성은 좋...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2016년 8월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_405451573" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,405451573,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcdKodoUokm0tEn1dKodoUokm0zH1XAkvvo0pSM1kXmo7voo7xMKAkmzsqnmmxMdmU3A7xMUb7mkqn0npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3XozxbxMnucMq8K3xbx5zstaDx2zCLxd9Gx2SDnUTqQdVRzzxXzzkqIfxbxXxEqi5MLLEqnAamSx5czCcxb7qIqixGxMuzCx5uzziKbNq8XoxXiussqItTqid2x5loxGIGobJKelq8awuzsqnCCEuqIxbxMxXqQbxMtuJxbakTZsSXubszzMcqQqnXRx5eVMdzCDJS3Xsx5Thx2Dqniqnq8EUnzszCczCbsoqQaxbAxMazs');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     Vacation807813님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="mobile-more">
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="383642751">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="383642751" id="review_383642751">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_D22E22F1B0A801101BC5DB74FAAB5449-SRC_383642751" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_D22E22F1B0A801101BC5DB74FAAB5449">
                    <div class="avatarWrapper">
                     [ahref]
                     
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     Getaway807672
                    </div>
                    <div class="userLoc">
                     <strong>
                      대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_D22E22F1B0A801101BC5DB74FAAB5449-SRC_383642751" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     141
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     3
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_40">
                </span>
                <span class="ratingDate" title="2016년 6월 18일">
                 2016년 6월 18일에 작성.
                </span>
                <div class="quote">
                 <a class="title" href="/ShowUserReviews-g297885-d6876755-r383642751-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html" id="rn383642751" onclick="(ta.prwidgets.getjs(this,'handlers')).reviewClick(this.href, '0');">
                  <span class="noQuotes">
                   공항과 가까운 해변
                  </span>
                 </a>
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   공항과 가까운 해변이라
렌트카 반납하기전에 다녀왔는데
모래가 까매서 신기하더라고요...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2016년 6월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_383642751" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,383642751,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcmvm3dXkoU0tEn1mvm3dXkoU0zH1XAkvvo0pSM1xMXXzsXXqnU7KbvKUUKU7foxM7kdqnbb7oddA0npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3XozxbfixdgZHbZCzCxMxbx5zsgkXTejRgHToVx5gCqIJzCx5q8ODKDHwqIphUxXcolzsKDxGEUqQhGsjqILIbXNsx2DGnNbx5zzZfuxX3y9XSGTqIEedw5stvsDvr5qQx5ZbqINqQEoMqQx2h2qiIZiL7msR35qiMvCxdTtxbzChXiJqifqizsaOpMvqIqiifg2qn5yq8GCZuKVvilJelSIqn');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     Getaway807672님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="mobile-more">
           <div class="fullwidth is-hidden-tablet">
           </div>
           <div class="info hidden" data-expansionsoftgate="false">
           </div>
           <div class="review-container" data-collapsed="true" data-deferred="false" data-reviewid="357715378">
            <div class="prw_rup prw_reviews_review_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_review_resp">
             <div class="reviewSelector" data-reviewid="357715378" id="review_357715378">
              <div class="rev_wrap ui_columns is-multiline">
               <div class="ui_column is-2 memberInfoColumn">
                <div class="prw_rup prw_reviews_member_info_resp" data-prwidget-init="handlers" data-prwidget-name="reviews_member_info_resp">
                 <div class="member_info">
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_34CC722DC8B40406B8E597A8C16BC986-SRC_357715378" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="avatar profile_34CC722DC8B40406B8E597A8C16BC986">
                    <div class="avatarWrapper">
                     <a>
                      <div class="prw_rup prw_common_basic_image avatarImage" data-prwidget-init="" data-prwidget-name="common_basic_image">
                       <div class="ui_avatar resp">
                       </div>
                      </div>
                     </a>
                    </div>
                   </div>
                   <div class="info_text" onclick="widgetEvCall('handlers.usernameClick', event, this);">
                    <div>
                     dddaisy1
                    </div>
                    <div class="userLoc">
                     <strong>
                      서울, 대한민국
                     </strong>
                    </div>
                   </div>
                  </div>
                  <div class="memberOverlayLink clickable" data-anchorwidth="90" id="UID_34CC722DC8B40406B8E597A8C16BC986-SRC_357715378" onclick="widgetEvCall('handlers.initMemberOverlay', event, this);">
                   <div class="memberBadgingNoText is-shown-at-tablet">
                    <span class="ui_icon pencil-paper">
                    </span>
                    <span class="badgetext">
                     319
                    </span>
                    <span class="ui_icon thumbs-up-fill">
                    </span>
                    <span class="badgetext">
                     40
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="ui_column is-9">
                <span class="ui_bubble_rating bubble_40">
                </span>
                <span class="ratingDate" title="2016년 3월 23일">
                 2016년 3월 23일에 작성.
                </span>
                <div class="quote">
                 [ahref]
                 
                </div>
                <div class="prw_rup prw_reviews_text_summary_hsx" data-prwidget-init="handlers" data-prwidget-name="reviews_text_summary_hsx">
                 <div class="entry">
                  <p class="partial_entry">
                   유명해서 지나는길에 함 들려봤어요~ 
제주공항에서 가깝거든요~~~ 검은 모래사장이...
                   <span class="taLnk ulBlueLinks" onclick="widgetEvCall('handlers.clickExpand',event,this);">
                    더 보기
                   </span>
                  </p>
                 </div>
                </div>
                <div class="prw_rup prw_reviews_stay_date_hsx" data-prwidget-init="" data-prwidget-name="reviews_stay_date_hsx">
                 <span class="stay_date_label">
                  체험 날짜:
                 </span>
                 2015년 9월
                </div>
                <div class="prw_rup prw_reviews_vote_line_hsx" data-prwidget-deferred="deferred/clicks" data-prwidget-init="handlers" data-prwidget-name="reviews_vote_line_hsx">
                 <div class="tooltips wrap">
                  <span class="taLnk no_cpu ui_icon flag-fill" data-content="이 리뷰 내용에 문제가 있나요?" data-position="above" data-tooltip="" id="ReportIAP_357715378" onclick="ta.prwidgets.call('deferred/clicks.clickReport',event,this,357715378,'member');return false;" onmouseover="widgetEvCall('handlers.hoverReport',event,this);return false;">
                  </span>
                 </div>
                 <div class="helpful redesigned hsx_helpful">
                  <span class="thankButton hsx_thank_button" onclick="ta.prwidgets.call('deferred/clicks.clickThank',event,this,'LeJIVqd4EVIpECri1GII2t6mbqgqguuuxizSxinixi9EqgbIIEJnISiCQQoqnQQeVsSVuqHyXAkvvoqHM3vk3kooqHxfqHhJagJCyQQoqnQQ7cJn9QQoqnQQhJCMQQoqnQQ7VJnGqHx2VOpQQoqnQQx2VOpQQoqnQQltcJCMxiGIac6XoXmqoTpcmokkUomkv0tEn1mokkUomkv0zH1XAkvvo0pSM1mdffkXXxMfv7dKdK37vzsoAkbvfU37fAv30npEEeJIV1K0EJIVqiJcpV1U0Ii9VC1rZlU3XozxbNowcgzC3xXqivMDxM5RUMsEwxX7HwfX937lUqQx5axEnxMlqIqIduX5vxdOKxE9yDmbCqiqn5qnfmxb7e5x52hxGzsmtJiqn75MEdxdxXzCqnEjqIqIU7zCyIrdnjfuqnDKtekxEJE3hMzCgxdx5mxG7OlxGSAqQHnSGmcZMEq8mGqizCRkMo7kCTE22UqiN3kscxXqii9nxXjxGIxXDECea');return false;">
                   <span class="helpful_text">
                    <span class="ui_icon thumbs-up-fill emphasizeWithColor">
                    </span>
                    <span class="numHelp emphasizeWithColor">
                    </span>
                    <span class="thankUser">
                     dddaisy1님, 감사합니다.
                    </span>
                   </span>
                   <div class="buttonShade hidden">
                   </div>
                  </span>
                 </div>
                </div>
                <div class="loadingShade hidden">
                 <div class="ui_spinner">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="see-more-mobile ui_button primary" onclick="placementEvCall('taplc_location_reviews_list_resp_ar_responsive_0', 'handlers.viewMore', event, this)">
           리뷰 더보기
          </div>
          <div class="mobile-more">
           <div class="prw_rup prw_common_responsive_pagination" data-prwidget-init="handlers" data-prwidget-name="common_responsive_pagination">
            <div class="unified ui_pagination">
             <a class="nav previous ui_button secondary disabled">
              이전
             </a>
             <a class="nav next taLnk ui_button primary" data-offset="10" data-page-number="2" href="/Attraction_Review-g297885-d6876755-Reviews-or10-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html" onclick="widgetEvCall('handlers.paginate', event, this); widgetEvCall('handlers.trackClick', event, this, 'pagination_next', '2');">
              다음
             </a>
             <div class="pageNumbers">
              [linkx]
              
              [linkx]
              
              [linkx]
              
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="bottom_anchor">
      </div>
     </div>
     <div class="ad_column_sticky ui_column is-4 is-shown-at-desktop">
      <div class="top_anchor">
      </div>
      <div class="stickyAds">
       <div class="prw_rup prw_common_ad_resp_breakpoint" data-prwidget-init="handlers" data-prwidget-name="common_ad_resp_breakpoint">
        <div class="ad iab_medRec is-shown-at-desktop responsive no_reserve_margins">
         <div class="adInner gptAd inactive" data-breakpoint="" data-size="[[300, 250], [300, 600]]" id="gpt-ad-300x250-300x600-a">
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="ad_column_full ui_column is-12 is-hidden-desktop">
      <div class="prw_rup prw_common_ad_resp_breakpoint" data-prwidget-init="handlers" data-prwidget-name="common_ad_resp_breakpoint">
       <div class="ad iab_r is-hidden-tablet responsive no_reserve_margins">
        <div class="adInner gptAd inactive" data-breakpoint="" data-size="[320, 50]" id="gpt-ad-320x50-a">
        </div>
       </div>
      </div>
      <div class="prw_rup prw_common_ad_resp_breakpoint" data-prwidget-init="handlers" data-prwidget-name="common_ad_resp_breakpoint">
       <div class="ad iab_leaBoa is-hidden-mobile is-hidden-desktop responsive no_reserve_margins">
        <div class="adInner gptAd inactive" data-breakpoint="" data-size="[728, 90]" id="gpt-ad-728x90-a">
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_resp_hr_ad_wrapper" data-placement-name="resp_hr_ad_wrapper:ar_responsive_lower_block" id="taplc_resp_hr_ad_wrapper_ar_responsive_lower_block_0">
    <div class="column_wrap ui_columns is-multiline reviewsAndAdsBlock">
     <div class="content_column ui_column is-8-desktop is-12">
      <div class="ppr_rup ppr_priv_resp_hr_nearby" data-placement-name="resp_hr_nearby:ar_responsive" id="taplc_resp_hr_nearby_ar_responsive_0">
       <div class="block_wrap ui_section">
        <div class="block_header block_title" data-tab="TABS_LOCATION" id="NEARBY_TAB">
         인근
        </div>
        <div class="ui_columns neighborhood">
         <div class="ui_column is-12 mapTile map-open-trigger" onclick="placementEvCall('taplc_resp_hr_nearby_ar_responsive_0', 'handlers.mapClick', event, this);">
          <div class="prw_rup prw_common_responsive_static_map_image map-widget" data-prwidget-init="handlers" data-prwidget-name="common_responsive_static_map_image">
           <div class="contentChoice" data-contentchoice="STATIC_MAP_WIDGETS/RESPONSIVE_AJAX_BASED_AR" style="display: none">
           </div>
          </div>
         </div>
        </div>
        <div class="grids is-shown-at-tablet">
         <div class="prw_rup prw_common_btf_nearby_poi_grid grid-widget" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_grid">
          <span class="sectionTitle">
           주변 호텔
          </span>
          [ahref]
          
          <div class="ui_columns is-multiline nearbyGrid">
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.52204132080078" data-lng="126.58708953857422" data-locid="9457639" data-name="블랙샌즈호텔" data-pinhoverimg="/img2/maps/icons/pin_lg_HotelOver.png" data-pinimg="/img2/maps/icons/pin_lg_Hotel.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Hotel_Review-g297885-d9457639-Reviews-Black_Sands_Hotel-Jeju_Jeju_Island.html', 'xsell_hotel');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-l/0a/f8/1f/5a/caption.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                블랙샌즈호텔
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 3.5" class="ui_bubble_rating bubble_35" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                13건의 리뷰
               </div>
               <div class="distance">
                0.46km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:9457639_component_30">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.516151428222656" data-lng="126.58023071289062" data-locid="7053828" data-name="아빌로스" data-pinhoverimg="/img2/maps/icons/pin_lg_HotelOver.png" data-pinimg="/img2/maps/icons/pin_lg_Hotel.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Hotel_Review-g297885-d7053828-Reviews-Avillos-Jeju_Jeju_Island.html', 'xsell_hotel');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-l/07/84/de/e3/avillos.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                아빌로스
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 4" class="ui_bubble_rating bubble_40" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                13건의 리뷰
               </div>
               <div class="distance">
                1.24km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:7053828_component_31">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.51727294921875" data-lng="126.52760314941406" data-locid="12242086" data-name="호텔휘슬락" data-pinhoverimg="/img2/maps/icons/pin_lg_HotelOver.png" data-pinimg="/img2/maps/icons/pin_lg_Hotel.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Hotel_Review-g297885-d12242086-Reviews-Hotel_Whistle_Lark-Jeju_Jeju_Island.html', 'xsell_hotel');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-f/0f/6f/51/97/caption.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                호텔휘슬락
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 4.5" class="ui_bubble_rating bubble_45" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                191건의 리뷰
               </div>
               <div class="distance">
                5.54km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:12242086_component_32">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.516334533691406" data-lng="126.52751159667969" data-locid="9594370" data-name="체크인 호텔" data-pinhoverimg="/img2/maps/icons/pin_lg_HotelOver.png" data-pinimg="/img2/maps/icons/pin_lg_Hotel.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Hotel_Review-g297885-d9594370-Reviews-Check_Inn_Hotel-Jeju_Jeju_Island.html', 'xsell_hotel');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-l/09/f3/40/54/caption.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                체크인 호텔
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 3.5" class="ui_bubble_rating bubble_35" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                45건의 리뷰
               </div>
               <div class="distance">
                5.57km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:9594370_component_33">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="prw_rup prw_common_btf_nearby_poi_grid grid-widget" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_grid">
          <span class="sectionTitle">
           주변 음식점
          </span>
          [ahref]
          
          <div class="ui_columns is-multiline nearbyGrid">
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.526302337646484" data-lng="126.58737182617188" data-locid="9100907" data-name="댓츠커피" data-pinhoverimg="/img2/maps/icons/pin_lg_RestaurantOver.png" data-pinimg="/img2/maps/icons/pin_lg_Restaurant.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Restaurant_Review-g297885-d9100907-Reviews-Daet_Cheu_Coffee-Jeju_Jeju_Island.html', 'xsell_restaurant');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect no-scale" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://static.tacdn.com/img2/social/no_photo_restaurant.gif">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                댓츠커피
               </div>
               <div>
               </div>
               <div class="distance">
                0.1km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:9100907_component_19">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.52579116821289" data-lng="126.58769989013672" data-locid="9140862" data-name="커피알마" data-pinhoverimg="/img2/maps/icons/pin_lg_RestaurantOver.png" data-pinimg="/img2/maps/icons/pin_lg_Restaurant.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Restaurant_Review-g297885-d9140862-Reviews-Coffee_Alma-Jeju_Jeju_Island.html', 'xsell_restaurant');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect no-scale" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://static.tacdn.com/img2/social/no_photo_restaurant.gif">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                커피알마
               </div>
               <div>
               </div>
               <div class="distance">
                0.13km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:9140862_component_20">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.525020599365234" data-lng="126.58728790283203" data-locid="9377054" data-name="뭐하맨" data-pinhoverimg="/img2/maps/icons/pin_lg_RestaurantOver.png" data-pinimg="/img2/maps/icons/pin_lg_Restaurant.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Restaurant_Review-g297885-d9377054-Reviews-Mwohamaen-Jeju_Jeju_Island.html', 'xsell_restaurant');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect no-scale" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://static.tacdn.com/img2/social/no_photo_restaurant.gif">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                뭐하맨
               </div>
               <div>
               </div>
               <div class="distance">
                0.15km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:9377054_component_21">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.526939392089844" data-lng="126.58780670166016" data-locid="8889897" data-name="카페아프리카" data-pinhoverimg="/img2/maps/icons/pin_lg_RestaurantOver.png" data-pinimg="/img2/maps/icons/pin_lg_Restaurant.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Restaurant_Review-g297885-d8889897-Reviews-Cafe_Africa-Jeju_Jeju_Island.html', 'xsell_restaurant');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect no-scale" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://static.tacdn.com/img2/social/no_photo_restaurant.gif">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                카페아프리카
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 3" class="ui_bubble_rating bubble_30" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                1건의 리뷰
               </div>
               <div class="distance">
                0.17km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:8889897_component_22">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="prw_rup prw_common_btf_nearby_poi_grid grid-widget" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_grid">
          <span class="sectionTitle">
           주변 관광명소
          </span>
          [ahref]
          
          <div class="ui_columns is-multiline nearbyGrid">
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.544166564941406" data-lng="126.66860961914062" data-locid="550694" data-name="함덕 서우봉 해변" data-pinhoverimg="/img2/maps/icons/pin_lg_ThingToDoOver.png" data-pinimg="/img2/maps/icons/pin_lg_ThingToDo.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Attraction_Review-g297885-d550694-Reviews-Hamdeok_Beach-Jeju_Jeju_Island.html', 'ar_xsell_merch');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-f/01/45/de/8a/hamdeok-beach.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                함덕 서우봉 해변
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 4.5" class="ui_bubble_rating bubble_45" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                483건의 리뷰
               </div>
               <div class="distance">
                7.9km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:550694_component_23">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.51203155517578" data-lng="126.52649688720703" data-locid="2238839" data-name="동문 재래시장" data-pinhoverimg="/img2/maps/icons/pin_lg_ThingToDoOver.png" data-pinimg="/img2/maps/icons/pin_lg_ThingToDo.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Attraction_Review-g297885-d2238839-Reviews-Dongmun_Market-Jeju_Jeju_Island.html', 'ar_xsell_merch');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-l/02/5c/de/21/caption.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                동문 재래시장
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 4" class="ui_bubble_rating bubble_40" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                650건의 리뷰
               </div>
               <div class="distance">
                5.77km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:2238839_component_24">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.5059700012207" data-lng="126.5340347290039" data-locid="2483948" data-name="제주난타" data-pinhoverimg="/img2/maps/icons/pin_lg_ThingToDoOver.png" data-pinimg="/img2/maps/icons/pin_lg_ThingToDo.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Attraction_Review-g297885-d2483948-Reviews-Jeju_NANTA_Theatre-Jeju_Jeju_Island.html', 'ar_xsell_merch');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-l/0d/ac/ba/31/img20161108193531-largejpg.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                제주난타
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 4.5" class="ui_bubble_rating bubble_45" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                92건의 리뷰
               </div>
               <div class="distance">
                5.35km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:2483948_component_25">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
           <div class="prw_rup prw_common_btf_nearby_poi_entry ui_column is-6 poiTile" data-prwidget-init="handlers" data-prwidget-name="common_btf_nearby_poi_entry">
            <div class="poiEntryWrapper">
             <div class="ui_columns is-gapless is-mobile poiEntry shownOnMap" data-lat="33.50632095336914" data-lng="126.53152465820312" data-locid="1655315" data-name="제주 민속자연사 박물관" data-pinhoverimg="/img2/maps/icons/pin_lg_ThingToDoOver.png" data-pinimg="/img2/maps/icons/pin_lg_ThingToDo.png" onclick="(ta.prwidgets.getjs(this,'handlers')).click('/Attraction_Review-g297885-d1655315-Reviews-Jeju_Folklore_Natural_Museum-Jeju_Jeju_Island.html', 'ar_xsell_merch');">
              <div class="prw_rup prw_common_responsive_image ui_column is-4 thumbnailWrap" data-prwidget-init="" data-prwidget-name="common_responsive_image">
               <div class="aspect" style="height:80px;padding:0;">
                <div class="inner" data-lazyurl="https://media-cdn.tripadvisor.com/media/photo-l/01/68/36/bd/caption.jpg">
                </div>
               </div>
              </div>
              <div class="poiInfo ui_column is-8">
               <div class="poiName" dir="auto">
                제주 민속자연사 박물관<li>[ahref]</li>[linkx]<li>[area1][mkey1]</li>[pkeyx][area1][mkey1]
               </div>
               <div class="prw_rup prw_common_bubble_rating rating" data-prwidget-init="" data-prwidget-name="common_bubble_rating">
                <span alt="풍선 5개 중 4" class="ui_bubble_rating bubble_40" style="font-size:16px;">
                </span>
               </div>
               <div class="reviewCount">
                166건의 리뷰
               </div>
               <div class="distance">
                5.54km 떨어짐
               </div>
              </div>
             </div>
             <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:1655315_component_26">
              <span>
               <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
                 <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
                  <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                  <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
                  </span>
                 </span>
                </span>
               </div>
              </span>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="is-hidden-tablet block_wrap">
         [ahref]
         
         [ahref]
         
         <a class="all-link" href="/AttractionsNear-g297885-d6876755-Samyang_Black_Sand_Beach-Jeju_Jeju_Island.html">
          <span class="nearbyType ui_icon attractions">
          </span>
          390곳의 주변 관광명소 모두 보기
          <span class="ui_icon single-chevron-right">
          </span>
         </a>
        </div>
       </div>
      </div>
      <div class="ppr_rup ppr_priv_location_qa_resp" data-placement-name="location_qa_resp:ar_responsive" id="taplc_location_qa_resp_ar_responsive_0">
       <div class="block_wrap ui_section hasQuestions" data-tab="TABS_ANSWERS">
        <div class="block_header">
         <div class="block_title">
          Q &amp; A
         </div>
        </div>
        <form class="askQuestionForm control" method="POST">
         <div class="askExplanation">
          삼양 검은모래 해변 직원 및 이전 방문객에게서 빠른 답변을 구하세요.
         </div>
         <div class="overlayNote">
          참고: 질문은 Q &amp; A 페이지에 공개적으로 게시됩니다.
         </div>
         <fieldset>
          <ul class="errors hidden underForm">
          </ul>
          <div class="captcha_here">
           <div class="regCaptcha cl underForm" id="sharedCaptcha">
            <div class="regCaptcha captchaRecaptcha hidden cl" id="captchaRecaptcha">
             <div class="regCaptcha" id="sharedCaptcha.recaptcha_elm_corereg">
             </div>
            </div>
            <div class="regCaptcha captchaGeeTest hidden" id="captchaGeeTest">
             <label class="label regCaptcha">
              승인:
             </label>
             <div class="regCaptcha" data-captcha-id="6LceRwATAAAAAJieJ3O-iiDDW7s4TFID7OjF2Ztw" data-captcha-type="float" id="sharedCaptcha.geetest_elm_corereg" style="padding: 15px 0;">
             </div>
             <div class="hidden" data-elem-id="sharedCaptcha.geetest_elm_corereg" data-required="" data-site-key="6LceRwATAAAAAJieJ3O-iiDDW7s4TFID7OjF2Ztw" data-translation=">>> 밀어서 인증하세요 >>>" id="geeTest_common_context_data">
             </div>
            </div>
           </div>
          </div>
          <div class="underForm">
           <div class="formButtonsContainer">
            <span class="ui_button primary formSubmit" onclick="placementEvCall('taplc_location_qa_resp_ar_responsive_0','handlers.submitAskQuestion', event, this);">
             전송하기
            </span>
           </div>
           <span class="postingGuidelines" onclick="placementEvCall('taplc_location_qa_resp_ar_responsive_0','handlers.initPostingGuidelinesOverlay', '6876755');">
            게시물 가이드라인
           </span>
          </div>
         </fieldset>
        </form>
        <div class="block_body_top limit-to-one">
         <div class="prw_rup prw_common_north_star_pagination responsive" data-prwidget-init="handlers" data-prwidget-name="common_north_star_pagination">
         </div>
        </div>
        <div class="shouldUpdateOnLoad" data-should-update="true">
        </div>
       </div>
      </div>
      <div class="bottom_anchor">
      </div>
     </div>
     <div class="ad_column_sticky ui_column is-4 is-shown-at-desktop">
      <div class="top_anchor">
      </div>
      <div class="stickyAds">
       <div class="prw_rup prw_common_ad_resp_breakpoint" data-prwidget-init="handlers" data-prwidget-name="common_ad_resp_breakpoint">
        <div class="ad iab_medRec is-shown-at-desktop responsive no_reserve_margins">
         <div class="adInner gptAd inactive" data-breakpoint="" data-size="[[300, 250], [300, 600]]" id="gpt-ad-300x250-300x600-bottom">
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="ad_column_full ui_column is-12 is-hidden-desktop">
      <div class="prw_rup prw_common_ad_resp_breakpoint" data-prwidget-init="handlers" data-prwidget-name="common_ad_resp_breakpoint">
       <div class="ad iab_r is-hidden-tablet responsive no_reserve_margins">
        <div class="adInner gptAd inactive" data-breakpoint="" data-size="[320, 50]" id="gpt-ad-320x50-bottom">
        </div>
       </div>
      </div>
      <div class="prw_rup prw_common_ad_resp_breakpoint" data-prwidget-init="handlers" data-prwidget-name="common_ad_resp_breakpoint">
       <div class="ad iab_leaBoa is-hidden-mobile is-hidden-desktop responsive no_reserve_margins">
        <div class="adInner gptAd inactive" data-breakpoint="" data-size="[728, 90]" id="gpt-ad-728x90-bottom">
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_location_detail_recently_viewed" data-placement-name="location_detail_recently_viewed:ar_responsive" id="taplc_location_detail_recently_viewed_ar_responsive_0">
    <div class="ui_section block_wrap">
     <div class="prw_rup prw_shelves_shelf_widget coverpage_clarity" data-prwidget-init="handlers" data-prwidget-name="shelves_shelf_widget">
      <div class="shelf_container recommended_poi_list shelf_row_0" data-rownumber="0" data-shelf-id="1216" data-tpp="CrossSell" data-track-label="recommended_poi_list">
       <div class="shelf_header">
        <div class="shelf_title" data-tpatt="0" data-tpid="1216" data-tpp="CrossSell">
         <div class="shelf_title_container">
          <span class="title_text large">
           확인하신 항목과 관련이 있습니다
          </span>
         </div>
        </div>
       </div>
       <div class="shelf_item_container resp_scrollable">
        <div class="prw_rup prw_shelves_attraction_shelf_item_widget resp-scrollable-six" data-prwidget-init="handlers" data-prwidget-name="shelves_attraction_shelf_item_widget">
         <div class="poi" data-params="Z2o3Xy9BdHRyYWN0aW9uX1Jldmlldy1nMjk3ODg1LWQ2MzUyODQ1LVJldmlld3MtU2Vod2FfQmVhY2gtSmVqdV9KZWp1X0lzbGFuZC5odG1sX3FqWQ==" data-tpact="shelf_item_click" data-tpatt="0|poi|6352845" data-tpid="1216" data-tpp="CrossSell" onclick="widgetEvCall('handlers.shelfItemClick', event, this)">
          [linkx]
          
          <div class="detail">
           <div class="item name" data-tpatt="0|poi|6352845" data-tpid="1216" dir="auto" title="세화 해수욕장">
            [ahref]
            
           </div>
           <div class="clear">
           </div>
           <div class="item">
            <div class="rating-widget">
             <div class="prw_rup prw_common_location_rating_simple" data-prwidget-init="" data-prwidget-name="common_location_rating_simple">
              <span class="ui_bubble_rating bubble_45">
              </span>
             </div>
            </div>
            [linkx]
            
           </div>
           <div class="item">
            해변
           </div>
           <div class="item">
           </div>
          </div>
         </div>
         <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:6352845_component_9">
          <span>
           <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
            <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
             <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
              <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
              <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
             </span>
            </span>
           </div>
          </span>
         </div>
        </div>
        <div class="prw_rup prw_shelves_attraction_shelf_item_widget resp-scrollable-six" data-prwidget-init="handlers" data-prwidget-name="shelves_attraction_shelf_item_widget">
         <div class="poi" data-params="MXV2Xy9BdHRyYWN0aW9uX1Jldmlldy1nMjk3ODg1LWQxMDU4Njc0NC1SZXZpZXdzLUlob19UZXdvb19CZWFjaC1KZWp1X0planVfSXNsYW5kLmh0bWxfVmhv" data-tpact="shelf_item_click" data-tpatt="0|poi|10586744" data-tpid="1216" data-tpp="CrossSell" onclick="widgetEvCall('handlers.shelfItemClick', event, this)">
          [ahref]
          
          <div class="detail">
           <div class="item name" data-tpatt="0|poi|10586744" data-tpid="1216" dir="auto" title="이호테우해변">
            <a class="poiTitle" data-tpact="shelf_item_click" data-tpatt="0|poi|10586744" data-tpid="1216" data-tpp="CrossSell" href="/Attraction_Review-g297885-d10586744-Reviews-Iho_Tewoo_Beach-Jeju_Jeju_Island.html" onclick="widgetEvCall('handlers.shelfItemClick', event, this)" target="_blank">
             이호테우해변
            </a>
           </div>
           <div class="clear">
           </div>
           <div class="item">
            <div class="rating-widget">
             <div class="prw_rup prw_common_location_rating_simple" data-prwidget-init="" data-prwidget-name="common_location_rating_simple">
              <span class="ui_bubble_rating bubble_40">
              </span>
             </div>
            </div>
            <a class="review_count" data-tpact="shelf_item_click" data-tpatt="0|poi|10586744" data-tpid="{trackingProd  uctId}" data-tpp="CrossSell" href="/Attraction_Review-g297885-d10586744-Reviews-Iho_Tewoo_Beach-Jeju_Jeju_Island.html#REVIEWS" onclick="widgetEvCall('handlers.shelfItemClick', event, this)  " target="_blank">
             70개 리뷰
            </a>
           </div>
           <div class="item">
            해변
           </div>
           <div class="item">
           </div>
          </div>
         </div>
         <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:10586744_component_10">
          <span>
           <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
            <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
             <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
              <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
              <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
             </span>
            </span>
           </div>
          </span>
         </div>
        </div>
        <div class="prw_rup prw_shelves_attraction_shelf_item_widget resp-scrollable-six" data-prwidget-init="handlers" data-prwidget-name="shelves_attraction_shelf_item_widget">
         <div class="poi" data-params="clh2Xy9BdHRyYWN0aW9uX1Jldmlldy1nMjk3ODg1LWQ0MDk0NzY4LVJldmlld3MtUGFya19Tb3V0aGVybmxhbmQtSmVqdV9KZWp1X0lzbGFuZC5odG1sX092ZA==" data-tpact="shelf_item_click" data-tpatt="0|poi|4094768" data-tpid="1216" data-tpp="CrossSell" onclick="widgetEvCall('handlers.shelfItemClick', event, this)">
          <a class="thumbnail" data-tpact="shelf_item_click" data-tpatt="0|poi|4094768" data-tpid="1216" data-tpp="CrossSell" href="/Attraction_Review-g297885-d4094768-Reviews-Park_Southernland-Jeju_Jeju_Island.html" onclick="widgetEvCall('handlers.shelfItemClick', event, this)" target="_blank">
           <div class="prw_rup prw_common_centered_thumbnail" data-prwidget-init="" data-prwidget-name="common_centered_thumbnail">
            <div class="sizing_wrapper" style="width:200px;height:111px;">
             <div class="centering_wrapper" style="margin-top:-75px;">
             </div>
            </div>
           </div>
          </a>
          <div class="detail">
           <div class="item name" data-tpatt="0|poi|4094768" data-tpid="1216" dir="auto" title="파크 써던랜드">
            [linkx]
            
           </div>
           <div class="clear">
           </div>
           <div class="item">
            <div class="rating-widget">
             <div class="prw_rup prw_common_location_rating_simple" data-prwidget-init="" data-prwidget-name="common_location_rating_simple">
              <span class="ui_bubble_rating bubble_35">
              </span>
             </div>
            </div>
            [ahref]
            
           </div>
           <div class="item">
            테마 파크
           </div>
           <div class="item">
           </div>
          </div>
         </div>
         <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:4094768_component_11">
          <span>
           <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
            <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
             <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
              <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
              <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
             </span>
            </span>
           </div>
          </span>
         </div>
        </div>
        <div class="prw_rup prw_shelves_attraction_shelf_item_widget resp-scrollable-six" data-prwidget-init="handlers" data-prwidget-name="shelves_attraction_shelf_item_widget">
         <div class="poi" data-params="WVlUXy9BdHRyYWN0aW9uX1Jldmlldy1nMjk3ODg1LWQ5NzU1NDMzLVJldmlld3MtR3dha2ppX0d3YW11bF9CZWFjaC1KZWp1X0planVfSXNsYW5kLmh0bWxfV1Bx" data-tpact="shelf_item_click" data-tpatt="0|poi|9755433" data-tpid="1216" data-tpp="CrossSell" onclick="widgetEvCall('handlers.shelfItemClick', event, this)">
          [ahref]
          
          <div class="detail">
           <div class="item name" data-tpatt="0|poi|9755433" data-tpid="1216" dir="auto" title="곽지해수욕장">
            [ahref]
            
           </div>
           <div class="clear">
           </div>
           <div class="item">
            <div class="rating-widget">
             <div class="prw_rup prw_common_location_rating_simple" data-prwidget-init="" data-prwidget-name="common_location_rating_simple">
              <span class="ui_bubble_rating bubble_45">
              </span>
             </div>
            </div>
            [ahref]
            
           </div>
           <div class="item">
            해변
           </div>
           <div class="item">
           </div>
          </div>
         </div>
         <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:9755433_component_12">
          <span>
           <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
            <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
             <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
              <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
              <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
             </span>
            </span>
           </div>
          </span>
         </div>
        </div>
        <div class="prw_rup prw_shelves_attraction_shelf_item_widget resp-scrollable-six" data-prwidget-init="handlers" data-prwidget-name="shelves_attraction_shelf_item_widget">
         <div class="poi" data-params="c1h5Xy9BdHRyYWN0aW9uX1Jldmlldy1nMjk3ODg1LWQzODA1NDU2LVJldmlld3MtSmVqdW1va19Hd2FuYS1KZWp1X0planVfSXNsYW5kLmh0bWxfUFht" data-tpact="shelf_item_click" data-tpatt="0|poi|3805456" data-tpid="1216" data-tpp="CrossSell" onclick="widgetEvCall('handlers.shelfItemClick', event, this)">
          [linkx]
          
          <div class="detail">
           <div class="item name" data-tpatt="0|poi|3805456" data-tpid="1216" dir="auto" title="제주목 관아">
            <a class="poiTitle" data-tpact="shelf_item_click" data-tpatt="0|poi|3805456" data-tpid="1216" data-tpp="CrossSell" href="/Attraction_Review-g297885-d3805456-Reviews-Jejumok_Gwana-Jeju_Jeju_Island.html" onclick="widgetEvCall('handlers.shelfItemClick', event, this)" target="_blank">
             제주목 관아
            </a>
           </div>
           <div class="clear">
           </div>
           <div class="item">
            <div class="rating-widget">
             <div class="prw_rup prw_common_location_rating_simple" data-prwidget-init="" data-prwidget-name="common_location_rating_simple">
              <span class="ui_bubble_rating bubble_40">
              </span>
             </div>
            </div>
            [linkx]
            
           </div>
           <div class="item">
            건축물, 역사적인 장소
           </div>
           <div class="item">
           </div>
          </div>
         </div>
         <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:3805456_component_13">
          <span>
           <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
            <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
             <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
              <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
               [linkx]<li>[linkx]</li><li>[area1][mkey1]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
              </span>
              <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
             </span>
            </span>
           </div>
          </span>
         </div>
        </div>
        <div class="prw_rup prw_shelves_attraction_shelf_item_widget resp-scrollable-six" data-prwidget-init="handlers" data-prwidget-name="shelves_attraction_shelf_item_widget">
         <div class="poi" data-params="cVdSXy9BdHRyYWN0aW9uX1Jldmlldy1nMjk3ODg1LWQ5NTgzMDQ5LVJldmlld3MtR2ltbnllb25nX1Nlb25zZWdpX0JlYWNoLUplanVfSmVqdV9Jc2xhbmQuaHRtbF8zZzU=" data-tpact="shelf_item_click" data-tpatt="0|poi|9583049" data-tpid="1216" data-tpp="CrossSell" onclick="widgetEvCall('handlers.shelfItemClick', event, this)">
          [linkx]
          
          <div class="detail">
           <div class="item name" data-tpatt="0|poi|9583049" data-tpid="1216" dir="auto" title="김녕 성세기 해변">
            [ahref]
            
           </div>
           <div class="clear">
           </div>
           <div class="item">
            <div class="rating-widget">
             <div class="prw_rup prw_common_location_rating_simple" data-prwidget-init="" data-prwidget-name="common_location_rating_simple">
              <span class="ui_bubble_rating bubble_45">
              </span>
             </div>
            </div>
            [linkx]
            
           </div>
           <div class="item">
            해변
           </div>
           <div class="item">
           </div>
          </div>
         </div>
         <div class="react-container component-widget saveToTripWrapper" data-component="@ta/trips.save-to-trip" data-component-props="page-manifest" id="@ta/trips.save-to-trip:location:9583049_component_14">
          <span>
           <div class="trips-bookmark-icon-BookmarkIcon__container--1daVm trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
            <span class="ui_icon_stacked trips-bookmark-icon-BookmarkIcon__stacked_bookmark--1tNOx trips-bookmark-icon-BookmarkIcon__s_30--34HSr">
             <span class="trips-bookmark-icon-BookmarkIcon__stacked_bookmark_inner--3_Hwh">
              <span class="ui_icon heart-fill stacked trips-bookmark-icon-BookmarkIcon__innerIcon--27zbK trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
              <span class="ui_icon heart stacked trips-bookmark-icon-BookmarkIcon__outerIcon--2zQ1T trips-bookmark-icon-BookmarkIcon__heart--2jI5-">
              </span>
             </span>
            </span>
           </div>
          </span>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ppr_rup ppr_priv_attraction_review_map_wc" data-placement-name="attraction_review_map_wc" id="taplc_attraction_review_map_wc_0">
    <div class="react-container" data-component="@ta/attractions.detail-map" data-component-props="page-manifest" id="component_16">
    </div>
   </div>
   <div class="ppr_rup ppr_priv_footer_banner_ad_billboard" data-placement-name="footer_banner_ad_billboard:ar_responsive" id="taplc_footer_banner_ad_billboard_ar_responsive_0">
    <div class="footer_banner_ad_resp">
     <div class="billboard">
      <div class="react-container component-widget" data-component="@ta/cpm.ad-target" data-component-props="page-manifest" id="component_27">
       <div class="iab_bilBrd">
        <div class="gptAd cpm-ad-target-ad-target__gptAd--15jJ4 no_reserve_margins" data-size="[[970,250],[728,90]]" id="gpt-ad-970x250-728x90-b">
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>
<div class="footer">
 <div class="global_footer">
  <div class="ppr_rup ppr_priv_map_provider_loader" data-placement-name="map_provider_loader:google" id="taplc_map_provider_loader_google_0">
  </div>
  <div class="ppr_rup ppr_priv_browser_mode_tracking" data-placement-name="browser_mode_tracking" id="taplc_browser_mode_tracking_0">
  </div>
  <div class="ppr_rup ppr_priv_social_onboarding" data-placement-name="social_onboarding" id="taplc_social_onboarding_0">
   <div class="react-container" data-component="@ta/social.onboarding-controller" data-component-props="page-manifest" id="component_2">
   </div>
  </div>
  <div class="ppr_rup ppr_priv_memx_registration_dialog" data-placement-name="memx_registration_dialog" id="taplc_memx_registration_dialog_0">
   <div class="react-container" data-component="@ta/memx.registration-dialog-controller" data-component-props="page-manifest" id="component_4">
   </div>
  </div>
  <div class="ppr_rup ppr_priv_global_footer" data-placement-name="global_footer" id="taplc_global_footer_0">
   <div class="foot">
    <div class="ui_container">
     <div class="ui_columns is-multiline is-mobile">
      <div class="ui_column bottom_on_mobile is-7-tablet is-12-mobile">
       <div class="logo_slogan">
       </div>
       <div class="legal_section">
        © 2019 TripAdvisor LLC All rights reserved.
        <div class="prw_rup prw_homepage_tripadvisor_horizontal_footer_links" data-prwidget-init="handlers" data-prwidget-name="homepage_tripadvisor_horizontal_footer_links">
         [linkx]
         
         |
         [linkx]
         
         |
         [ahref]
         
         |
         <a class="ui_link footer_link" data-track-action="hamon_law" href="/pages/serviceEN.html">
          사이트 운영 방식
         </a>
        </div>
        <div class="disclaimer is-hidden-mobile">
         * TripAdvisor LLC는 예약 대행사가 아니며 사이트 이용자에게 서비스 이용료를 일절 청구하지 않습니다. (
         <span class="ui_link" id="TERMS" onclick="ta.plc_global_footer_0_handlers.getFullDisclaimerText(this)">
          더 알아보기
         </span>
         )
        </div>
        <div class="external_disclaimer is-hidden-mobile">
         TripAdvisor LLC는 외부 웹사이트의 컨텐츠에 대해 책임을 지지 않습니다. 사이트에 게재된 가격 정보에는 세금과 수수료가 포함되어 있지 않습니다.
        </div>
       </div>
      </div>
      <div class="ui_column is-2-tablet is-12-mobile">
       <div class="footer_section">
        <div class="prw_rup prw_homepage_tripadvisor_footer_links" data-prwidget-init="handlers" data-prwidget-name="homepage_tripadvisor_footer_links">
         <div class="ftrLinkHeader">
          살펴보기
         </div>
         <div class="footerLinks" onclick="(ta.prwidgets.getjs(this,'handlers')).checkForPid(event);">
          [ahref]
          
          <span class="footerLink ui_link js_click" data-id="help_center" data-track-action="help_center" data-url="/uvpages/helpCenterOverlay.html">
           도움말 센터
          </span>
         </div>
        </div>
       </div>
      </div>
      <div class="ui_column top_on_mobile is-3-tablet is-12-mobile">
       <div class="footer_section section_with_border_separator_mobile">
        <div class="prw_rup prw_homepage_footer_pickers" data-prwidget-init="handlers" data-prwidget-name="homepage_footer_pickers">
         <div class="ftrHeader">
          통화/지역
         </div>
         <div class="unified-picker" data-header="통화" data-sg-overlay="above right" onclick="(ta.prwidgets.getjs(this,'handlers')).showCurrency(event, this)">
          <span class="picker-inner">
           <span class="picker-label">
            <span class="currency_symbol">
             CN¥
            </span>
            <span>
             CNY
            </span>
           </span>
           <span class="ui_icon caret-down open-close">
           </span>
           <span class="ui_icon caret-up open-close hidden">
           </span>
          </span>
         </div>
         <div class="unified-picker" data-header="지역" data-overlay="point_of_sale_picker" data-sg-overlay="above right" onclick="widgetEvCall('handlers.showPos', event, this)">
          <span class="picker-inner">
           <span class="picker-label">
            <span>
             대한민국
            </span>
            <span class="point_of_sale_data hidden" data-current-locale="ko" data-locale-codes="" data-page-feature="">
            </span>
           </span>
           <span class="ui_icon caret-down open-close">
           </span>
           <span class="ui_icon caret-up open-close hidden">
           </span>
          </span>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="ppr_rup ppr_priv_qualtrics_survey" data-placement-name="qualtrics_survey" id="taplc_qualtrics_survey_0">
  </div>
 </div>
</div>
<div class="ppr_rup ppr_priv_facebook_autologin" data-placement-name="facebook_autologin" id="taplc_facebook_autologin_0">
 <div class="hidden" data-facebook-api-version="v3.2" data-facebook-connect-app-id="162729813767876" data-facebook-js-url="//connect.facebook.net/ko_KR/sdk.js" data-fb-auto-login="true" data-fb-fetch-access-token="" data-load-fb-js="true" id="fb_autologin_data">
 </div>
</div>
<div class="ppr_rup ppr_priv_web_performance_rum" data-placement-name="web_performance_rum" id="taplc_web_performance_rum_0">
 <div class="react-container" data-component="@ta/platform.rum" data-component-props="page-manifest" id="component_28">
 </div>
</div>
<div class="ppr_rup ppr_priv_footer_js_globals" data-placement-name="footer_js_globals" id="taplc_footer_js_globals_0">
</div>
<div class="ppr_rup ppr_priv_comscore" data-placement-name="comscore" id="taplc_comscore_0">
 <span class="dataHolder" data-id="6036461">
 </span>
 <noscript>
 </noscript>
</div>
<div class="ppr_rup ppr_priv_sync_rt_cookie" data-placement-name="sync_rt_cookie" id="taplc_sync_rt_cookie_0">
</div>
<div class="ppr_rup ppr_priv_enable_cpm_content" data-placement-name="enable_cpm_content:responsive" id="taplc_enable_cpm_content_responsive_0">
</div>
<div class="ppr_rup ppr_priv_ab_chk" data-placement-name="ab_chk" id="taplc_ab_chk_0">
</div>|<---