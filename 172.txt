--->|<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head xmlns:xi="http://www.w3.org/2001/XInclude">
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="pubmeddev" name="author"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="http://www.ncbi.nlm.nih.gov/coreutils/img/pubmed256blue.png" property="og:image"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:image:secure_url"/>
  <meta content="entrez" name="ncbi_app"/>
  <meta content="pubmed" name="ncbi_db"/>
  <meta content="abstract" name="ncbi_report"/>
  <meta content="html" name="ncbi_format"/>
  <meta content="20" name="ncbi_pagesize"/>
  <meta content="default" name="ncbi_sortorder"/>
  <meta content="1" name="ncbi_pageno"/>
  <meta content="1" name="ncbi_resultcount"/>
  <meta content="retrieve" name="ncbi_op"/>
  <meta content="abstract" name="ncbi_pdid"/>
  <meta content="CE8C8D79D5270E61_0503SID" name="ncbi_sessionid"/>
  <meta content="15389416" name="ncbi_uidlist"/>
  <meta content="all" name="ncbi_filter"/>
  <meta content="false" name="ncbi_stat"/>
  <meta content="false" name="ncbi_hitstat"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="Rolls BJ , et al." name="author"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="CE8C8D79D526E4110000000001F7014B.m_14" name="ncbi_phid"/>
  <meta content="origin-when-cross-origin" name="referrer"/>
 </head>
 <body>
  <div class="grid">
   <div class="col twelve_col nomargin shadow">
    <form action="/pubmed" enctype="application/x-www-form-urlencoded" id="EntrezForm" method="post" name="EntrezForm" onsubmit="return false;">
     <div xmlns:xi="http://www.w3.org/2001/XInclude">
      <noscript>
       <p class="nojs">
        <strong>
         Warning:
        </strong>
        The NCBI web site requires JavaScript to function.
        [ahref]
        
       </p>
      </noscript>
      <div class="universal_header" id="universal_header" xml:base="http://127.0.0.1/sites/static/header_footer/" xmlns="http://www.w3.org/1999/xhtml">
       <ul class="inline_list jig-ncbimenu ui-ncbimenu resources_list" id="navcontent">
        <li class="ui-ncbimenu-item-leaf ui-ncbimenu-item-first ui-helper-reset ui-ncbimenu-item-no-hlt">
         [ahref]
         
        </li>
        <li class="offscreen_noflow ui-ncbimenu-item-skip access">
         [linkx]
         
        </li>
        <li class="offscreen_noflow ui-ncbimenu-item-skip access">
         [linkx]
         
        </li>
        <li class="topmenu ui-helper-reset ui-ncbimenu-item-first ui-helper-reset" id="resource-menu">
         [ahref]
         
         <ul id="resources-submenu">
          <li>
           <a href="/guide/all/">
            All Resources
           </a>
          </li>
          <li>
           [linkx]
           
           <ul class="actual-resources-submenu chemicals-bioassays">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li>
           [ahref]
           
           <ul class="actual-resources-submenu dna-rna">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/WebSub/?tool=genbank" title=" Web tool for simple submissions of nucleotide sequences ">
              GenBank: BankIt
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/sutils/static/prosplign/prosplign.html" title=" Tool for aligning proteins to genomic DNA ">
              ProSplign
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/Traces/sra/sra.cgi?" title=" Database of sequences reads from next generation sequencing technologies ">
              Sequence Read Archive (SRA)
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/guide/dna-rna/">
              All DNA &amp; RNA Resources...
             </a>
            </li>
           </ul>
          </li>
          <li>
           [ahref]
           
           <ul class="actual-resources-submenu data-software">
            <li>
             <a href="/Blast.cgi" title=" Tool for finding local regions of sequence similarity ">
              BLAST (Basic Local Alignment Search Tool)
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref][linkx][ahref]
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/WebSub/?tool=genbank" title=" Web tool for simple submissions of nucleotide sequences ">
              GenBank: BankIt
             </a>
            </li>
            <li>
             <a href="/projects/Sequin/" title=" Software tool for complex submissions of nucleotide sequences ">
              GenBank: Sequin[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li><li>[ahref]</li>
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/search/search.cgi" title=" Searches PubChem Compound by chemical structure ">
              PubChem Structure Search
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/sutils/splign/" title=" Tool for aligning transcripts to genomic DNA ">
              Splign
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li>
           [linkx]
           
           <ul class="actual-resources-submenu domains-structures">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li>
           [ahref]
           
           <ul class="actual-resources-submenu genes-expression">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/books/NBK25501/ " title=" URL application programming interface for searching, linking and downloading data within NCBI's Entrez system ">
              E-Utilities
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/tools/gbench/" title=" Stand-alone application for analyzing sequence data ">
              Genome Workbench
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/guide/genes-expression/">
              All Genes &amp; Expression Resources...
             </a>
            </li>
           </ul>
          </li>
          <li>
           <a href="e">
            Genetics &amp; Medicine
           </a>
           <ul class="actual-resources-submenu genetics-medicine">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li>
           [ahref]
           
           <ul class="actual-resources-submenu genomes-maps">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/nuccore" title=" Nucleotide sequence data in GenBank and RefSeq ">
              Nucleotide Database<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[ahref]</li>[ahref][linkx]
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/Traces/sra/sra.cgi?" title=" Database of sequences reads from next generation sequencing technologies ">
              Sequence Read Archive (SRA)
             </a>
            </li>
            <li>
             <a href="/sutils/splign/" title=" Tool for aligning transcripts to genomic DNA ">
              Splign
             </a>
            </li>
            <li>
             <a href="/Traces/trace.cgi" title=" DNA chromatograms, base calls, and quality estimates for single-pass reads. ">
              Trace Archive
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li>
           [linkx]
           
           <ul class="actual-resources-submenu homology">
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/Blast.cgi?CMD=Web&amp;PAGE_TYPE=BlastDocs&amp;DOC_TYPE=Download" title=" BLAST programs for a local computer ">
              BLAST (Stand-alone)
             </a>
            </li>
            <li>
             <a href="/sutils/blink.cgi?mode=query" title=" Pre-computed reports showing proteins with similar sequences ">
              BLAST Link (BLink)
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li>
           [ahref]
           
           <ul class="actual-resources-submenu literature">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="v" title=" NCBI's monthly newsletter ">
              NCBI News &amp; Blog
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li>
           [ahref]
           
           <ul class="actual-resources-submenu proteins">
            <li>
             <a href="/biosystems/" title=" Database that groups biomedical literature, small molecules, and sequence data in terms of biological relationships. ">
              BioSystems
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li>
           [linkx]
           
           <ul class="actual-resources-submenu sequence-analysis">
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/Structure/cdd/wrpsb.cgi" title=" Locates conserved domains within a protein sequence ">
              Conserved Domain Search Service (CD Search)
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
              [ahref][area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li>
           <a href="y">
            Taxonomy
           </a>
           <ul class="actual-resources-submenu taxonomy">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             Taxonomy Common Tree<li>[area1][mkey1]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx]</li>[linkx][area1][keywordx]
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li>
           <a href="s">
            Training &amp; Tutorials
           </a>
           <ul class="actual-resources-submenu training-tutorials">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li>
           [linkx]
           
           <ul class="actual-resources-submenu variation">
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/gap" title=" Genotype/Phenotype association studies ">
              Database of Genotypes and Phenotypes (dbGaP)
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/guide/variation/">
              All Variation Resources...
             </a>
            </li>
           </ul>
          </li>
         </ul>
        </li>
        <li class="topmenu ui-helper-reset ui-ncbimenu-item-first" id="all-howtos-menu">
         [linkx][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
        </li>
        <li class="offscreen_noflow ui-ncbimenu-item-skip access">
         [linkx]
         
        </li>
       </ul>
       <div class="myncbi">
        <span id="myncbiusername" style="display:none">
         <a href="/account/settings/" id="mnu" title="Edit account settings">
         </a>
        </span>
        [linkx]
        
        [linkx]
        
        [linkx]
        
       </div>
      </div>
      <div class="header">
       <div class="res_logo">
        <h1 class="img_logo">
         <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
        </h1>
        <div class="nlm">
         <a href="/" title="National Library of Medicine">
          US National Library of Medicine
         </a>
         <a href="/" title="National Institutes of Health">
          National Institutes of Health
         </a>
        </div>
       </div>
       <div class="search">
        <div class="search_form">
         <label class="offscreen_noflow" for="database">
          Search database
         </label>
         <select id="database">
          <option value="gquery">
           All Databases
          </option>
          <option value="assembly">
           Assembly
          </option>
          <option value="biocollections">
           Biocollections
          </option>
          <option value="bioproject">
           BioProject
          </option>
          <option value="biosample">
           BioSample
          </option>
          <option value="biosystems">
           BioSystems
          </option>
          <option value="books">
           Books
          </option>
          <option value="clinvar">
           ClinVar
          </option>
          <option value="cdd">
           Conserved Domains
          </option>
          <option value="gap">
           dbGaP
          </option>
          <option value="dbvar">
           dbVar
          </option>
          <option value="gene">
           Gene
          </option>
          <option value="genome">
           Genome
          </option>
          <option value="gds">
           GEO DataSets
          </option>
          <option value="geoprofiles">
           GEO Profiles
          </option>
          <option value="gtr">
           GTR
          </option>
          <option value="homologene">
           HomoloGene
          </option>
          <option value="ipg">
           Identical Protein Groups
          </option>
          <option data-ac_dict="medgen_disease_name" value="medgen">
           MedGen
          </option>
          <option data-ac_dict="mesh_suggestions" value="mesh">
           MeSH
          </option>
          <option value="ncbisearch">
           NCBI Web Site
          </option>
          <option value="nlmcatalog">
           NLM Catalog
          </option>
          <option value="nuccore">
           Nucleotide
          </option>
          <option value="omim">
           OMIM
          </option>
          <option value="pmc">
           PMC
          </option>
          <option value="popset">
           PopSet
          </option>
          <option value="probe">
           Probe
          </option>
          <option value="protein">
           Protein
          </option>
          <option value="proteinclusters">
           Protein Clusters
          </option>
          <option value="pcassay">
           PubChem BioAssay
          </option>
          <option value="pccompound">
           PubChem Compound
          </option>
          <option value="pcsubstance">
           PubChem Substance
          </option>
          <option data-ac_dict="pm_related_queries_2" selected="selected" value="pubmed">
           PubMed
          </option>
          <option value="snp">
           SNP
          </option>
          <option value="sparcle">
           Sparcle
          </option>
          <option value="sra">
           SRA
          </option>
          <option value="structure">
           Structure
          </option>
          <option value="taxonomy">
           Taxonomy
          </option>
          <option value="toolkit">
           ToolKit
          </option>
          <option value="toolkitall">
           ToolKitAll
          </option>
          <option value="toolkitbookgh">
           ToolKitBookgh
          </option>
         </select>
         <div class="nowrap">
          <label accesskey="/" class="offscreen_noflow" for="term">
           Search term
          </label>
          <div class="nowrap">
          </div>
          <button class="button_search nowrap" cmd="go" id="search" type="submit">
           Search
          </button>
         </div>
        </div>
        <ul class="searchlinks inline_list">
         <set>
         </set>
         <li>
          [linkx]
          
         </li>
         <li class="help">
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div>
      </div>
      <div class="" id="faceted_search">
       <h2 class="offscreen_noflow">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
      </div>
      <div class="col nine_col" id="maincontent">
       <div class="content">
        <div class="results_settings one_setting" id="result_action_bar">
         <ul class="inline_list left display_settings">
          <li>
           [linkx]
           
          </li>
         </ul>
         <div class="disp_settings tabPopper" id="display_settings_menu_report">
          <fieldset class="format">
           <legend>
            Format
           </legend>
           <ul class="column_list">
            <li>
             <label for="docsum">
              Summary
             </label>
            </li>
            <li>
             <label for="docsumtext">
              Summary (text)
             </label>
            </li>
            <li>
             <label for="abstract">
              Abstract
             </label>
            </li>
            <li>
             Abstract (text)[pkeyx][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1][pkeyx][area1][keywordx][linkx][area1][keywordx][linkx][pkeyx][area1][mkey1][area1][keywordx][ahref][area1][mkey1][area1][mkey1][area1][keywordx][ahref][pkeyx][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1]
            </li>
            <li>
             <label for="medlinetext">
              MEDLINE
             </label>
            </li>
            <li>
             <label for="xmltext">
              XML
             </label>
            </li>
            <li>
             <label for="uilisttext">
              PMID List
             </label>
            </li>
           </ul>
          </fieldset>
         </div>
         <button class="button_apply ncbipopper-close-button" name="EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.SetDisplay" sid="1" style="display:none">
          Apply
         </button>
         <h4 class="content_header send_to align_right jig-ncbipopper" data-jigconfig="triggerPosition:'bottom center', destPosition : 'top center',destSelector : '#send_to_menu', hasArrow : false,             openEvent : 'click',closeEvent : 'click', isTriggerElementCloseClick: false, addCloseButton:true, groupName: 'entrez_pg', adjustFit:'none'" id="sendto">
          [linkx]
          
         </h4>
         <div class="tabPopper send_to" id="send_to_menu">
          <fieldset>
           <legend>
            Choose Destination
           </legend>
           <ul class="column_list">
            <li>
             <label for="dest_File">
              File
             </label>
            </li>
            <li>
             <label for="dest_AddToClipboard">
              Clipboard
             </label>
            </li>
            <li>
             <label for="dest_AddToCollections">
              Collections
             </label>
            </li>
            <li>
             <label for="dest_Mail">
              E-mail
             </label>
            </li>
            <li>
             <label for="dest_Order">
              Order
             </label>
            </li>
            <li>
             <label for="dest_AddToBibliography">
              My Bibliography
             </label>
            </li>
            <li>
             <label for="dest_CitationManager">
              Citation manager
             </label>
            </li>
           </ul>
          </fieldset>
          <div class="submenu file" id="submenu_File" style="display: none;">
           <p class="hidden" id="submenu_File_hint">
           </p>
           <ul>
            [area1][keywordx][pkeyx][area1][mkey1][pkeyx]
           </ul>
           <button class="button_apply file ncbipopper-close-button" cmd="File" name="EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.SendToSubmit" sid="1" type="submit">
            Create File
           </button>
          </div>
          <div class="submenu mail" id="submenu_Mail" style="display: none;">
           <p class="hidden" id="email_alert">
           </p>
           <p class="hidden" id="email_captcha_alert">
           </p>
           <ul>
            <li id="email_desc">
             1 selected item: 15389416
            </li>
            <li>
             <label for="email_format">
              Format
             </label>
             <select id="email_format" name="email_format">
              <option value="docsum">
               Summary
              </option>
              <option format="text" value="docsum">
               Summary (text)
              </option>
              <option selected="selected" value="abstract">
               Abstract
              </option>
              <option format="text" value="abstract">
               Abstract (text)
              </option>
              <option format="text" value="medline">
               MEDLINE
              </option>
              <option format="text" value="xml">
               XML
              </option>
              <option format="text" value="uilist">
               PMID List
              </option>
             </select>
             <span>
              <label for="chkSupplementalData">
               MeSH and Other Data
              </label>
             </span>
            </li>
            <li>
             <label for="email_address">
              E-mail
             </label>
            </li>
            <li>
             <label for="email_subj">
              Subject
             </label>
            </li>
            <li>
             <label for="email_add_text">
              Additional text
             </label>
            </li>
            <li id="captcha-segment">
             <div id="recaptcha_div">
             </div>
            </li>
           </ul>
           <button class="button_apply email ncbipopper-close-button" cmd="Mail" expt="" id="email_submit" name="EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.SendToSubmit" qk="1" sid="2" type="submit">
            E-mail
           </button>
           <div>
            [linkx]
            
           </div>
          </div>
          <div class="submenu addtoclipboard" id="submenu_AddToClipboard" style="display: none;">
           <p class="hidden" id="submenu_AddToClipboard_hint">
           </p>
           <button class="button_apply clipboard ncbipopper-close-button" cmd="AddToClipboard" name="EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.SendToSubmit" sid="3" type="submit">
            Add to Clipboard
           </button>
          </div>
          <div class="submenu addtocollections" id="submenu_AddToCollections" style="display: none;">
           <p class="hidden" id="submenu_AddToCollections_hint">
           </p>
           <button class="button_apply collections ncbipopper-close-button" cmd="AddToCollections" name="EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.SendToSubmit" sid="4" type="submit">
            Add to Collections
           </button>
          </div>
          <div class="submenu order" id="submenu_Order" style="display: none;">
           <button class="button_apply order ncbipopper-close-button" cmd="Order" name="EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.SendToSubmit" sid="5" type="submit">
            Order articles[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][area1][mkey1][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           </button>
          </div>
          <div class="submenu addtobibliography" id="submenu_AddToBibliography" style="display: none;">
           [ahref][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][linkx][linkx][linkx][ahref][pkeyx][area1][keywordx][ahref][area1][mkey1][area1][keywordx][area1][keywordx][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx]
          </div>
          <div class="submenu citationmanager" id="submenu_CitationManager" style="display: none;">
           <p>
            Generate a file for use with external citation management software.
           </p>
           <p class="hidden" id="submenu_CitationManager_hint">
            [ahref][linkx][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][keywordx][pkeyx][area1][mkey1][ahref][ahref][ahref][area1][keywordx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           </p>
           <button class="button_apply order ncbipopper-close-button" cmd="CitationManager" name="EntrezSystem2.PEntrez.PubMed.Pubmed_ResultsPanel.Pubmed_DisplayBar.SendToSubmit" sid="7" type="submit">
            Create File
           </button>
          </div>
         </div>
         <div>
         </div>
        </div>
        <div>
        </div>
        <div class="">
         <div>
          <span class="nowrap" id="result_sel">
          </span>
         </div>
        </div>
        <div class="empty" id="messagearea">
        </div>
        <div class="rprt_all">
         <div class="rprt abstract">
          <div class="cit">
           [ahref]
           
           2004 Oct;104(10):1570-6.
          </div>
          <h1>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h1>
          <div class="auths">
           <a href="/pubmed/?term=Rolls%20BJ%5BAuthor%5D&amp;cauthor=true&amp;cauthor_uid=15389416">
            Rolls BJ
           </a>
           <sup>
            1
           </sup>
           ,
           <a href="/pubmed/?term=Roe%20LS%5BAuthor%5D&amp;cauthor=true&amp;cauthor_uid=15389416">
            Roe LS
           </a>
           ,
           <a href="/pubmed/?term=Meengs%20JS%5BAuthor%5D&amp;cauthor=true&amp;cauthor_uid=15389416">
            Meengs JS
           </a>
           .
          </div>
          <div class="afflist">
           <h3>
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h3>
           <dl class="ui-ncbi-toggler-slave">
            <dt>
             1
            </dt>
            <dd>
             Department of Nutritional Sciences, The Pennsylvania State University, University Park, PA, USA. bjr4@psu.edu <bjr4@psu.edu>
            </dd>
           </dl>
          </div>
          <div class="abstr">
           <h3>
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h3>
           <div class="">
            <h4>
             OBJECTIVE:
            </h4>
            <p>
             We tested the effect on meal intake of varying the energy density and portion size of a compulsory first-course salad.
            </p>
            <h4>
             DESIGN:
            </h4>
            <p>
             The study used a randomized crossover design.
            </p>
            <h4>
             SUBJECTS/SETTING:
            </h4>
            <p>
             Forty-two women from the State College, PA, university community ate lunch in the laboratory once per week for 7 weeks.
            </p>
            <h4>
             INTERVENTION:
            </h4>
            <p>
             Lunch comprised one of six first-course salads, or no salad in the control condition, followed by a main course of pasta. Subjects were required to consume the entire salad, but ate as much pasta as they wanted. The salads varied in energy density (0.33, 0.67, or 1.33 kcal/g) and portion size (150 or 300 g). The energy density of the salad was reduced by changing the amount and type of dressing and cheese.
            </p>
            <h4>
             MAIN OUTCOME MEASURES: <li>[area1][mkey1]</li><li>[pkeyx]</li><li>[pkeyx]</li><li>[area1][mkey1]</li>
            </h4>
            <p>
             Energy intake and ratings of hunger, satiety, and food characteristics were measured.
            </p>
            <h4>
             STATISTICAL ANALYSES PERFORMED:
            </h4>
            <p>
             Outcomes were analyzed using a linear mixed model with repeated measures.
            </p>
            <h4>
             RESULTS:
            </h4>
            <p>
             Compared with having no first course, consuming the low-energy-dense salads reduced meal energy intake (by 7% for the small portion and 12% for the large), and consuming the high-energy-dense salads increased intake (by 8% for the small portion and 17% for the large). When two salads with the same number of calories were compared, meal intake was decreased when the large portion of the lower-energy-dense salad was consumed.
            </p>
            <h4>
             CONCLUSIONS:
            </h4>
            <p>
             Eating a low-energy-dense first course enhances satiety and reduces meal energy intake. Consuming a large portion of a low-energy-dense food at the start of a meal may be an effective strategy for weight management.
            </p>
           </div>
          </div>
          <div class="aux">
           <div class="resc">
            <dl class="rprtid">
             <dt>
              PMID:
             </dt>
             <dd>
              15389416
             </dd>
             <dt>
              DOI:
             </dt>
             <dd>
              [ahref]
              
             </dd>
            </dl>
           </div>
           <div class="resc status">
            <dl class="rprtid">
             <dd>
              [Indexed for MEDLINE]
             </dd>
            </dl>
           </div>
           <div class="links">
           </div>
           <div id="ncbi_share_pm">
            <a class="ncbi_share" data-ncbi_share_config="popup:false,shorten:true" href="#" ref="id=15389416&amp;db=pubmed" style="visibility:hidden">
             Share
            </a>
           </div>
          </div>
          <div class="other_content">
           <div class="morecit">
            <h3>
             <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
            </h3>
            <div class="ui-ncbi-toggler-slave">
             <h4>
              Publication types
             </h4>
             <ul>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
             <h4>
              MeSH terms
             </h4>
             <ul>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a abstractlink="yes" alsec="mesh" alterm="Energy Intake/physiology*" href="#">
                Energy Intake/physiology*
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a abstractlink="yes" alsec="mesh" alterm="Satiety Response/physiology*" href="#">
                Satiety Response/physiology*
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a abstractlink="yes" alsec="mesh" alterm="Weight Gain/physiology*" href="#">
                Weight Gain/physiology*
               </a>
              </li>
             </ul>
             <h4>
              Substance
             </h4>
             <ul>
              <li>
               [ahref]
               
              </li>
             </ul>
             <h4>
              Grant support
             </h4>
             <ul>
              <li>
               [ahref]
               
              </li>
              <li>
               <a abstractlink="yes" alsec="grnt" alterm="DK59853/DK/NIDDK NIH HHS/United States" href="#">
                DK59853/DK/NIDDK NIH HHS/United States
               </a>
              </li>
             </ul>
            </div>
           </div>
           <div class="morecit">
            <h3>
             [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
            </h3>
            <div class="ui-ncbi-toggler-slave">
             <div class="linkoutlist">
              <h4>
               Full Text Sources
              </h4>
              <ul>
               <li>
                [linkx]
                
               </li>
              </ul>
              <h4>
               Medical
              </h4>
              <ul>
               <li>
                <a href="/dietaryfats.html" ref="itool=Abstract&amp;PrId=3162&amp;uid=15389416&amp;db=pubmed&amp;log$=linkoutlink&amp;nlmid=7503061" target="_blank" title="Free resource">
                 Dietary Fats - MedlinePlus Health Information
                </a>
               </li>
              </ul>
              <h4>
               Miscellaneous
              </h4>
              <ul>
               <li>
                <a href="/detail/CPTC-ATM-4" ref="itool=Abstract&amp;PrId=8467&amp;uid=15389416&amp;db=pubmed&amp;log$=linkoutlink&amp;nlmid=7503061" target="_blank" title="Free resource">
                 NCI CPTC Antibody Characterization Program
                </a>
               </li>
              </ul>
             </div>
            </div>
           </div>
          </div>
          <ul class="print-log">
           <li>
           </li>
          </ul>
         </div>
        </div>
        <div id="messagearea_bottom">
        </div>
        <div class="bottom">
        </div>
       </div>
      </div>
      <div class="supplemental col three_col last">
       <h2 class="offscreen_noflow">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
       <div>
        <div class="icons portlet">
         <div class="portlet_head">
          <div class="portlet_title">
           <h3>
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h3>
          </div>
         </div>
         [linkx]
         
        </div>
        <div>
         <div id="disc_col">
          [ahref]
          
         </div>
        </div>
        <div>
        </div>
       </div>
      </div>
      <div id="NCBIFooter_dynamic">
       <div class="breadcrumbs">
        You are here:
        <span id="breadcrumb_text">
         [linkx]
         
         >
         <a href="/guide/literature/">
          Literature
         </a>
         > PubMed
        </span>
       </div>
       [linkx]
       
       <noscript>
       </noscript>
      </div>
      <div class="footer" id="footer" xml:base="http://127.0.0.1/sites/static/header_footer/" xmlns="http://www.w3.org/1999/xhtml">
       <div class="subfooter">
        <h2 class="offscreen_noflow">
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h2>
        <ul class="foot_list" id="getting_started">
         <li>
          <h3>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h3>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/books/NBK3831/">
           NCBI Help Manual
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/home/learn.shtml">
           Training &amp; Tutorials
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
        <ul class="foot_list" id="resources">
         <li>
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/guide/data-software/">
           Data &amp; Software
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/guide/proteins/">
           Proteins
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
        <ul class="foot_list" id="popular">
         <li>
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
        <ul class="foot_list" id="featured">
         <li>
          <h3>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h3>
         </li>
         <li>
          <a href="/gtr/">
           Genetic Testing Registry
          </a>
         </li>
         <li>
          <li>[area1][mkey1]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][mkey1][pkeyx]<li>[ahref]</li>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/genome/gdv/">
           Genome Data Viewer
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
        <ul class="foot_list" id="info">
         <li>
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/research/">
           Research at NCBI
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/privacy.html">
           Privacy Policy
          </a>
         </li>
        </ul>
       </div>
       <div class="offscreen_noflow" id="external-disclaimer">
        External link. Please review our
        [ahref]
        
        .
       </div>
       <div class="contact_info" id="ncbifooter">
        <div id="footer-contents-right">
         <div id="nlm_thumb_logo">
          [ahref]
          
         </div>
         <div id="nih_thumb_logo">
          [ahref]
          
         </div>
         <div id="hhs_thumb_logo">
          [ahref]
          
         </div>
         <div id="usagov_thumb_logo">
          [ahref]
          
         </div>
        </div>
        <div id="footer-contents-left">
         <p class="address vcard">
          <span class="url">
           <a class="fn url newdomain" href="v">
            National Center for
                        Biotechnology Information
           </a>
           ,
          </span>
          <span class="org url newdomain">
           <a href="/">
            U.S. National Library of Medicine
           </a>
          </span>
          <span class="adr">
           <span class="street-address">
            8600 Rockville Pike
           </span>
           ,
           <span class="locality">
            Bethesda
           </span>
           <span class="region">
            MD
           </span>
           ,
           <span class="postal-code">
            20894
           </span>
           <span class="country-name">
            USA
           </span>
          </span>
         </p>
         [ahref]
         
         |
         [ahref]
         
        </div>
       </div>
      </div>
     </div>
     <div>
      [ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][area1][mkey1][pkeyx][ahref][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][area1][mkey1][linkx]
     </div>
    </form>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0189
  </b>
 </body>
</html>|<---