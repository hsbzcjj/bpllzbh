--->|<!DOCTYPE html>
<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="lg0qcRkaLtMeKJcXsOLoptzK-2MIRJzuEtiYHZf_O2Y" name="google-site-verification"/>
  <noscript>
  </noscript>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="https://dictionary.cambridge.org/ko/external/images/CDO_logo_120x120.jpg" property="og:image"/>
 </head>
 <body class="default_layout">
  <div itemscope="" itemtype="http://schema.org/Product" style="display: none;">
   <span itemprop="name">
    sleep | 영어를 한국어로 번역: Cambridge Dictionary
   </span>
   [ahref]
   
  </div>
  <div class="overlay js-nav-trig">
  </div>
  <div class="off-canvas">
   <span class="off-canvas__close js-nav-trig">
    <i class="fcdo fcdo-close">
    </i>
   </span>
   <div class="off-canvas__pad clrd">
    [linkx]
    
   </div>
   <nav class="off-canvas__nav js-menu">
    <ul>
     <li>
      <a class="js-has-sub-nav ico-bg-abs ico-bg--chevron" href="">
       사전
      </a>
      <ul>
       <li>
        [ahref]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li class="off-canvas__nav__section">
          <strong>
           2개국어
          </strong>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [ahref]
            [area1][mkey1]<li>[area1][keywordx]</li><li>[linkx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[ahref]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           <a data-dictcode="polish-english" href="/ko/%EC%82%AC%EC%A0%84/%ED%8F%B4%EB%9E%80%EB%93%9C%EC%96%B4-%EC%98%81%EC%96%B4/" style="display: none;" title="폴란드어-영어 사전 ">
            폴란드어–영어
           </a>
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           <a data-dictcode="portuguese-english" href="/ko/%EC%82%AC%EC%A0%84/%ED%8F%AC%EB%A5%B4%ED%88%AC%EA%B0%88%EC%96%B4-%EC%98%81%EC%96%B4/" style="display: none;" title="Portuguese-English Dictionary">
            포루투칼–영어
           </a>
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [ahref]
           
          </span>
         </li>
         <li class="off-canvas__nav__section">
          <strong>
           반 2개국어
          </strong>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%95%84%EB%9E%8D%EC%96%B4/" title="Cambridge English–Arabic Dictionary">
           영어–아랍어
          </a>
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%B9%B4%ED%83%88%EB%A1%9C%EB%8B%88%EC%95%84%EC%96%B4/" title="Cambridge English–Catalan Dictionary">
           영어–카탈로니아어
          </a>
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%A4%91%EA%B5%AD%EC%96%B4-%EA%B0%84%EC%B2%B4/" title="Cambridge English–Chinese (Simplified) Dictionary">
           영어–중국어(간체)
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%B2%B4%EC%BD%94%EC%9D%98/" title="English-Czech Dictionary">
           English–Czech
          </a>
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EB%8D%B4%EB%A7%88%ED%81%AC%EC%96%B4/" title="English-Danish Dictionary">
           English–Danish
          </a>
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/" title="Cambridge English–Korean Dictionary">
           영어–한국어
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%83%9C%EA%B5%AD%EC%96%B4/" title="영국–태국어 사전">
           영어–태국어
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
      </ul>
     </li>
     <li>
      <a href="/ko/translate/">
       번역
      </a>
     </li>
     <li>
      <a href="/ko/%EB%AC%B8%EB%B2%95/%EC%98%81%EA%B5%AD%EC%8B%9D-%EB%AC%B8%EB%B2%95/">
       문법
      </a>
     </li>
    </ul>
   </nav>
   <div class="off-canvas__pad">
    <p>
     [linkx]
     
    </p>
    <div class="off-canvas__dropdown">
     [linkx]
     
     <div id="cdo-lang-opt-sideBarMenu" style="display: none;">
      <ul class="unstyled cdo-locale-selector">
       <li>
        <a href="/dictionary/english-korean/sleep" hreflang="en">
         English (UK)
        </a>
        <li>
         [linkx]
         
         <li>
          [ahref]
          
          <li>
           [linkx]
           
           <li>
            <a href="/ru/%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%B0%D0%BD%D0%B3%D0%BB%D0%BE-%D0%BA%D0%BE%D1%80%D0%B5%D0%B9%D1%81%D0%BA%D0%B8%D0%B9/sleep" hreflang="ru">
             Русский
            </a>
            <li>
             [ahref]
             
             <li>
              <a href="/de/worterbuch/englisch-koreanisch/sleep" hreflang="de">
               Deutsch
              </a>
              <li>
               [ahref]
               
               <li>
                [linkx]
                
                <li>
                 <a href="/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E9%9F%A9%E8%AF%AD/sleep" hreflang="zh-Hans">
                  中文 (简体)
                 </a>
                 <li>
                  <a href="/zht/%E8%A9%9E%E5%85%B8/%E8%8B%B1%E8%AA%9E-%E9%9F%93%E8%AA%9E/sleep" hreflang="zh-Hant">
                   正體中文 (繁體)
                  </a>
                  <li>
                   [linkx]
                   
                   <li>
                    [linkx]
                    
                    <li>
                     [ahref]
                     
                     <li>
                      [linkx]
                      
                      <li>
                       [linkx]
                       
                      </li>
                     </li>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </li>
         </li>
        </li>
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <header class="cdo-hdr js-hdr" id="header">
   <div class="cdo-hdr__pre clrd">
    <div class="cdo-hdr__soc resp resp--lrg">
     <ul class="unstyled">
      <li>
       <b>
        팔로우
       </b>
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       <a class="circle bg--tw" href="/CambridgeWords" target="_blank" title="팔로워">
        <i aria-hidden="true" class="fcdo fcdo-twitter">
        </i>
       </a>
      </li>
     </ul>
    </div>
    <div class="cdo-hdr__profile">
     [linkx]
     
     <div class="dropdown dropdown--pad-a dropdown--right">
      [area1][mkey1]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li><li>[ahref]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
     </div>
     [ahref]
     
    </div>
    [linkx]
    
    [linkx]
    
    <nav class="cdo-hdr__nav resp resp--med" id="main-nav">
     <ul>
      <li class="active">
       [linkx]
       
      </li>
      <li>
       <a href="/ko/translate/">
        번역
       </a>
      </li>
      <li>
       <a href="/ko/%EB%AC%B8%EB%B2%95/%EC%98%81%EA%B5%AD%EC%8B%9D-%EB%AC%B8%EB%B2%95/">
        문법
       </a>
      </li>
     </ul>
    </nav>
   </div>
   <div class="cdo-search" id="search_bar">
    [ahref]
    
    <form action="/ko/%EA%B2%80%EC%83%89/%EC%98%81%EC%96%B4/direct/" id="cdo-search-form">
     <div class="cdo-search__bar">
      <label class="accessibility" for="cdo-search-input">
       검색 용어
      </label>
      <div class="js-toggle" data-related-element="#search_bar">
      </div>
      <span class="cdo-search__controls">
       <button class="cdo-search__button" title="검색" type="submit">
        <i aria-hidden="true" class="fcdo fcdo-search">
        </i>
        <span class="accessibility">
         검색
        </span>
       </button>
       <button class="cdo-search__dataset js-toggle ico-bg-abs ico-bg--chevron" data-related-element="#search_bar" data-target-selector="#cdo-dataset">
        <span class="resp resp--med-i" id="cdo-search-current-dataset">
        </span>
        <i aria-hidden="true" class="fcdo fcdo-dataset">
        </i>
       </button>
      </span>
      <div class="cdo-search__mega-menu" id="cdo-dataset">
       <div class="pad-extra">
        <div class="cdo-search__mega-menu__canvas a--rev">
         <div class="cdo-search__mega-menu__col1">
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuRecent">
           최신 및 추천 단어
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuRecent">
           <ul id="cdo-dataset-prefered-list">
           </ul>
          </div>
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuDefinition">
           정의와 문법
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuDefinition">
           <p>
            자연스러운 문어체 영어와 구어체 영어에 대한 명확한 설명
           </p>
           <ul>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a data-dictcode="essential-american-english" href="#" title="에센스 미국식 영어 사전">
              Essential American English
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
         <div class="cdo-search__mega-menu__col2">
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuTranslation">
           번역
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuTranslation">
           <div class="h3">
            2개국어 사전
           </div>
           <p>
            변역 방향을 바꾸려면 화살표를 클릭하십시오.
           </p>
           <ul>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [ahref]
              
              [ahref]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              <a data-dictcode="english-french" href="#" style="display: inline;" title="영어–프랑스어 사전">
               영어–프랑스어
              </a>
              [linkx]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [linkx]
              
              [linkx]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [linkx]
              
              [ahref]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [linkx]
              
              [ahref]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[ahref][pkeyx]<li>[area1][mkey1]</li>
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              <a data-dictcode="english-portuguese" href="#" style="display: inline;" title="Cambridge English–Portuguese Dictionary">
               영어–포르투갈어
              </a>
              [ahref]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              <a data-dictcode="english-japanese" href="#" style="display: inline;" title="Cambridge English–Japanese Dictionary">
               영어–일본어
              </a>
              [linkx]
              
             </span>
            </li>
           </ul>
           <div class="h3">
            세미(Semi) 이중 외국어
           </div>
           <ul>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a data-dictcode="english-malaysian" href="#" title="영어–말레이시아어 사전">
              영어–말레이시아어
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
       <div class="cdo-search__mega-menu__foot">
        <span class="js-toggle pointer on" data-target-selector="#cdo-dataset">
         <i aria-hidden="true" class="fcdo fcdo-close" title="Close">
         </i>
        </span>
       </div>
      </div>
     </div>
     <div class="cdo-search__switches resp resp--sml">
     </div>
    </form>
   </div>
  </header>
  <div id="overlay">
  </div>
  <div class="am-default" id="ad_topslot_a">
  </div>
  <div class="contain cdo-tpl cdo-tpl-main cdo-tpl--entry">
   <div class="cdo-tpl__z cdo-tpl-main__z1">
    <div class="am-default" id="ad_leftslot">
    </div>
   </div>
   <article>
    <div class="cdo-tpl-main__zwA">
     <div class="am-default" id="ad_topslot_b">
     </div>
     <div class="cdo-tpl__z cdo-tpl-main__z2 clrd" id="page-content" role="main">
      <div class="entrybox english-korean entry-body" id="entryContent" itemscope="" itemtype="http://schema.org/WebPage" lang="en">
       <div itemprop="author" itemscope="" itemtype="http://schema.org/Organization">
        <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
       </div>
       <meta content="sleep 번역: 자다, 잠, 수면, 수면 시간. Cambridge 영어-한국어 사전 에서 자세히 알아보기." itemprop="headline"/>
       <meta content="© Cambridge University Press" itemprop="copyrightHolder"/>
       <meta content="2019" itemprop="copyrightYear"/>
       <meta content="ko" itemprop="inLanguage"/>
       <meta content="Decisions and deciding" itemprop="genre"/>
       <meta content="Disorders &amp; diseases of the heart &amp; blood" itemprop="genre"/>
       <meta content="Easiness and simplicity" itemprop="genre"/>
       <meta content="Accommodating people" itemprop="genre"/>
       <meta content="Not paying attention" itemprop="genre"/>
       <meta content="Animal physiology: sleep &amp; sleeping" itemprop="genre"/>
       <meta content="Animal physiology: bodily fluids &amp; their production" itemprop="genre"/>
       <meta content="Killing" itemprop="genre"/>
       <meta content="Recovering from illness" itemprop="genre"/>
       <meta content="Homelessness" itemprop="genre"/>
       <meta content="Zoology: veterinary medicine" itemprop="genre"/>
       <meta content="Linguistics: interjections" itemprop="genre"/>
       <div class="cdo-dblclick-area">
        <div class="entry-body">
         <h1 class="hw">
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h1>
         <span class="di-body">
          <div class="di $dict entry-body__el entry-body__el--smalltop clrd js-share-holder" itemprop="text">
           <div class="di-head normal-entry">
            <div class="h3 di-title cdo-section-title-hw">
             sleep
            </div>
            <div class="share rounded js-share">
             <span class="point">
             </span>
             [linkx]
             
             <a class="circle bg--tw socialShareLink" data-object="entry" data-social="twitter" data-url="https://twitter.com/intent/tweet?url=https%3A%2F%2Fdictionary.cambridge.org%2Fko%2F%25EC%2582%25AC%25EC%25A0%2584%2F%25EC%2598%2581%25EC%2596%25B4-%25ED%2595%259C%25EA%25B5%25AD%25EC%2596%25B4%2Fsleep&amp;text=sleep+%7C+%EC%98%81%EC%96%B4%EB%A5%BC+%ED%95%9C%EA%B5%AD%EC%96%B4%EB%A1%9C+%EB%B2%88%EC%97%AD%3A+Cambridge+Dictionary" href="/intent/tweet?url=https%3A%2F%2Fdictionary.cambridge.org%2Fko%2F%25EC%2582%25AC%25EC%25A0%2584%2F%25EC%2598%2581%25EC%2596%25B4-%25ED%2595%259C%25EA%25B5%25AD%25EC%2596%25B4%2Fsleep&amp;text=sleep+%7C+%EC%98%81%EC%96%B4%EB%A5%BC+%ED%95%9C%EA%B5%AD%EC%96%B4%EB%A1%9C+%EB%B2%88%EC%97%AD%3A+Cambridge+Dictionary" target="_blank" title="이 항목 트윗">
              <i aria-hidden="true" class="fcdo fcdo-twitter">
              </i>
             </a>
             [linkx]
             
             <div class="oflow-hide js-share-toggle">
              [ahref]
              
              [linkx]
              
              [linkx]
              
              [linkx]
              
             </div>
            </div>
           </div>
           <div class="di-body normal-entry-body">
            <span class="entry-body">
             <div class="pos-block">
              <div class="pos-head">
               <div class="pos-info">
                <span class="posgram ico-bg">
                 <span class="pos">
                  verb
                 </span>
                </span>
                <span class="pron-info">
                 <span class="uk">
                  <span class="region">
                   uk
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron/u/uks/uksla/ukslave022.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron_ogg/u/uks/uksla/ukslave022.ogg" title="sleep: listen to British English pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   sliːp
                  </span>
                  /
                 </span>
                </span>
                <span class="pron-info">
                 <span class="us">
                  <span class="region">
                   us
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron/s/sle/sleep/sleep.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron_ogg/s/sle/sleep/sleep.ogg" title="sleep: listen to American pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​[area1][mkey1]<li>[area1][keywordx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx]
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   slip
                  </span>
                  /
                 </span>
                </span>
                <span class="irreg-infls">
                 <span class="inf-group">
                  <span class="lab">
                   past tense and past participle
                  </span>
                  <span class="inf">
                   slept
                  </span>
                 </span>
                </span>
               </div>
              </div>
              <div class="pos-body">
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006298_06">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="epp-xref">
                     A1
                    </span>
                   </span>
                   <b class="def">
                    to be in the
                    [linkx]
                    
                    of
                    <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/rest" title="rest">
                     rest
                    </a>
                    when
                    [linkx]
                    
                    [linkx]
                    
                    are
                    [linkx]
                    
                    ,
                    [linkx]
                     [area1][keywordx]<li>[pkeyx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx]<li>[ahref]</li>
                    
                    <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/body" title="body">
                     body
                    </a>
                    is not
                    <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/active" title="active">
                     active
                    </a>
                    , and
                    [linkx]
                    
                    [linkx]
                    
                    is
                    [ahref]
                    
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    자다
                   </span>
                   <div class="examp emphasized">
                    <span class="eg">
                     We slept in a
                     [linkx]
                     
                     last
                     [ahref]
                     
                     .
                    </span>
                   </div>
                   <div class="examp emphasized">
                    <span class="eg">
                     Did you sleep well?
                    </span>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
               <div class="sense-block">
                <div class="sense-body">
                 <div class="phrase-block pad-indent">
                  <span class="phrase-head">
                   <span class="phrase-title">
                    <span class="phrase">
                     sleep like a log
                    </span>
                   </span>
                  </span>
                  <div class="phrase-body pad-indent">
                   <div class="def-block pad-indent" data-wl-senseid="ID_00006298_11">
                    <p class="def-head semi-flush">
                     <span class="def-info">
                      <span class="freq">
                       ›
                      </span>
                     </span>
                     <b class="def">
                      to sleep very well
                     </b>
                    </p>
                    <span class="def-body">
                     <span class="trans" lang="ko">
                      세상 모르고 자다, 잠을 잘 자다
                     </span>
                     <div class="examp emphasized">
                      <span class="eg">
                       I went to
                       [ahref]
                       
                       early and slept like a
                       <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/log" title="log">
                        log
                       </a>
                       .
                      </span>
                     </div>
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="xref phrasal_verbs margin-bottom">
                <h3 class="h4 txt-block txt-block--alt">
                 [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                </h3>
                <div class="item">
                 [ahref]
                 
                </div>
                <div class="item">
                 [linkx]
                 
                </div>
               </div>
              </div>
             </div>
             <div class="pos-block">
              <div class="pos-head">
               <div class="pos-info">
                <span class="posgram ico-bg">
                 <span class="pos">
                  noun
                 </span>
                </span>
                <span class="pron-info">
                 <span class="uk">
                  <span class="region">
                   uk
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron/u/uks/uksla/ukslave022.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron_ogg/u/uks/uksla/ukslave022.ogg" title="sleep: listen to British English pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   sliːp
                  </span>
                  /
                 </span>
                </span>
                <span class="pron-info">
                 <span class="us">
                  <span class="region">
                   us
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron/s/sle/sleep/sleep.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron_ogg/s/sle/sleep/sleep.ogg" title="sleep: listen to American pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   slip
                  </span>
                  /
                 </span>
                </span>
               </div>
              </div>
              <div class="pos-body">
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006298_08">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="epp-xref">
                     B1
                    </span>
                    <span class="gram">
                     [linkx]
                     
                    </span>
                   </span>
                   <b class="def">
                    the
                    [ahref]
                    
                    you are in when you are sleeping, or a
                    <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/period" title="period">
                     period
                    </a>
                    of
                    [ahref]
                    
                    when you are sleeping
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    잠, 수면[area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][keywordx][area1][keywordx][linkx][area1][keywordx][linkx][ahref][pkeyx][pkeyx][area1][mkey1][linkx][area1][mkey1][ahref][linkx][pkeyx][pkeyx][pkeyx][area1][keywordx][ahref]
                   </span>
                   <div class="examp emphasized">
                    <span class="eg">
                     You need to go
                     [linkx]
                     
                     and
                     <strong class="cl">
                      get some sleep
                     </strong>
                     .
                    </span>
                   </div>
                   <div class="examp emphasized">
                    <span class="eg">
                     It took me
                     [linkx]
                     
                     to
                     <strong class="cl">
                      get to sleep
                     </strong>
                     <span class="gloss">
                      (= to
                      [ahref]
                      
                      in sleeping)
                     </span>
                     .
                    </span>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006298_09">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="epp-xref">
                     B1
                    </span>
                   </span>
                   <b class="def">
                    a
                    <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/period" title="period">
                     period
                    </a>
                    of sleeping
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    수면 시간
                   </span>
                   <div class="examp emphasized">
                    <span class="eg">
                     Why don’t you
                     <strong class="cl">
                      have
                     </strong>
                     a little
                     <strong class="cl">
                      sleep
                     </strong>
                     ?
                    </span>
                   </div>
                   <div class="examp emphasized">
                    <span class="eg">
                     You need a
                     <strong class="cl">
                      good night’s sleep
                     </strong>
                     <span class="gloss">
                      (= a
                      <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/night" title="night">
                       night
                      </a>
                      when you sleep well)
                     </span>
                     .
                    </span>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
               <div class="sense-block">
                <div class="sense-body">
                 <div class="phrase-block pad-indent">
                  <span class="phrase-head">
                   <span class="phrase-title">
                    <span class="phrase">
                     go to sleep
                    </span>
                   </span>
                  </span>
                  <div class="phrase-body pad-indent">
                   <div class="def-block pad-indent" data-wl-senseid="ID_00006298_10">
                    <p class="def-head semi-flush">
                     [ahref]<li>[ahref]</li><li>[area1][mkey1]</li>[linkx]
                    </p>
                    <span class="def-body">
                     <span class="trans" lang="ko">
                      자다
                     </span>
                     <div class="examp emphasized">
                      <span class="eg">
                       Babies often go to sleep after they are
                       [ahref]
                       
                       .
                      </span>
                     </div>
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
                <div class="am-default contentslot" id="ad_contentslot_1">
                </div>
               </div>
               <div class="sense-block">
                <div class="sense-body">
                 <div class="phrase-block pad-indent">
                  <span class="phrase-head">
                   <span class="phrase-title">
                    <span class="phrase">
                     put
                     <span class="obj">
                      something
                     </span>
                     to sleep
                    </span>
                   </span>
                  </span>
                  <div class="phrase-body pad-indent">
                   <div class="def-block pad-indent" data-wl-senseid="ID_00006298_12">
                    <p class="def-head semi-flush">
                     <span class="def-info">
                      <span class="freq">
                       ›
                      </span>
                     </span>
                     <b class="def">
                      to
                      <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/kill" title="kill">
                       kill
                      </a>
                      an
                      <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/animal" title="animal">
                       animal
                      </a>
                      that is very
                      [ahref]
                      
                      or very
                      [linkx]
                      
                      so that it does not
                      [linkx]
                      
                      any more
                     </b>
                    </p>
                    <span class="def-body">
                     <span class="trans" lang="ko">
                      안락사 시키다
                     </span>
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </span>
           </div>
          </div>
         </span>
         <div class="definition-src">
          <p>
           <small>
            (
            [linkx]
            
            의 “sleep” 번역 © Cambridge University Press)
           </small>
          </p>
         </div>
        </div>
       </div>
       <div class="clrd mod mod--style5 mod--dark mod-translate">
        <div class="pad mod-translate__lang round-right-aft" id="translations">
         <div>
          <h2 class="h3">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
         </div>
         <div class="translate__options dropdown dropdown--pad-a dropdown--white">
          <span class="btn btn--dropdown js-toggle" data-target-selector="#cdo-translation-opt" id="cdo-translation-current">
          </span>
          <div class="dropdown__box rounded" id="cdo-translation-opt">
           <ul class="unstyled">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a data-dataset="english-catalan" href="#">
              카탈로니아어
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a data-dataset="english-malaysian" href="#">
              말레이시아어
             </a>
            </li>
            <li>
             터키어<li>[pkeyx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li>[area1][mkey1]<li>[ahref]</li>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a data-dataset="english-russian" href="#">
              러시아어
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
         <ul class="unstyled" id="cdo-translation-val">
          <li data-dataset="english-chinese-traditional">
           [ahref]
           
          </li>
          <li data-dataset="english-japanese">
           [linkx]
           
          </li>
          <li data-dataset="english-french">
           [linkx]
           
          </li>
          <li data-dataset="english-catalan">
           [linkx]
           
          </li>
          <li data-dataset="english-arabic">
           [linkx]
           
          </li>
          <li data-dataset="english-czech">
           [linkx]
           
          </li>
          <li data-dataset="english-danish">
           [linkx]
           
          </li>
          <li data-dataset="english-spanish-cup">
           [ahref]
           
          </li>
          <li data-dataset="english-indonesian">
           [linkx]
           
          </li>
          <li data-dataset="english-thai">
           [ahref]
           
          </li>
          <li data-dataset="english-vietnamese">
           <a class="helper ico-bg-abs ico-bg--arrow-end" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EB%B2%A0%ED%8A%B8%EB%82%A8%EC%96%B4/sleep" title="sleep: 베트남어 번역">
            <span class="point">
            </span>
            <p class="flush">
             ngủ, giấc, sự ngủ…
            </p>
           </a>
          </li>
          <li data-dataset="english-polish">
           <a class="helper ico-bg-abs ico-bg--arrow-end" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%8F%B4%EB%9E%80%EB%93%9C%EC%96%B4/sleep_1" title="sleep: 폴란드어 번역">
            <span class="point">
            </span>
            <p class="flush">
             spać…
            </p>
           </a>
          </li>
          <li data-dataset="english-malaysian">
           [ahref]
           
          </li>
          <li data-dataset="turkish">
           [ahref]
           
          </li>
          <li data-dataset="english-german">
           [ahref]
           
          </li>
          <li data-dataset="english-norwegian">
           <a class="helper ico-bg-abs ico-bg--arrow-end" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EB%85%B8%EB%A5%B4%EC%9B%A8%EC%9D%B4%EC%96%B4/sleep" title="sleep: Norwegian translation">
            <span class="point">
            </span>
            <p class="flush">
             sove, ha soveplass til, søvn…
            </p>
           </a>
          </li>
          <li data-dataset="english-portuguese">
           [linkx]
           
          </li>
          <li data-dataset="english-chinese-simplified">
           [ahref]
           
          </li>
          <li data-dataset="english-italian">
           <a class="helper ico-bg-abs ico-bg--arrow-end" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%9D%B4%ED%83%88%EB%A6%AC%EC%95%84%EC%96%B4/sleep" title="sleep: 이탈리아어 번역">
            <span class="point">
            </span>
            <p class="flush">
             dormire, sonno, dormita…
            </p>
           </a>
          </li>
          <li data-dataset="english-russian">
           [linkx]
           
          </li>
          <li data-dataset="english-spanish">
           [linkx]
           
          </li>
         </ul>
        </div>
        <div class="txt-block txt-block--padder mod-translate__tool round-right">
         <div class="h3">
          번역가가 필요한가요?
         </div>
         <p>
          [ahref]
          
         </p>
         <p>
          빨리 무료로 번역을 받아 보세요!
         </p>
        </div>
       </div>
      </div>
      <div class="clrd">
       <div class="oflow-hide">
        <div class="mod mod--border mod-browser">
         <div class="mod-browser__title center">
          <div class="center-y lower">
           <h2 class="h3">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>[linkx][area1][mkey1][area1][mkey1][ahref][area1][keywordx][ahref][pkeyx][area1][keywordx][linkx][area1][keywordx][linkx][linkx][area1][mkey1][area1][keywordx][linkx][linkx][pkeyx][linkx][linkx][linkx][area1][mkey1][pkeyx][ahref][area1][keywordx][pkeyx]
           </h2>
          </div>
         </div>
         <div class="oflow-hide scroller scroller--blur js-scroller grad-trans-pseudo">
          <div class="scroller__content js-scroller-content">
           <ul class="unstyled a--b a--rev a--alt">
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/sledge" title="sledge">
              <span class="entry_title">
               <span class="results">
                <span class="base">
                 <b class="hw">
                  sledge
                 </b>
                </span>
               </span>
              </span>
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <span class="entry_title">
              <span class="results">
               <span class="base">
                <b class="hw">
                 sleep
                </b>
               </span>
              </span>
             </span>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/sleeping-bag" title="sleeping bag">
              <span class="entry_title">
               <span class="results">
                <span class="base">
                 <b class="hw">
                  sleeping bag
                 </b>
                </span>
               </span>
              </span>
             </a>
            </li>
            <li>
             <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/sleepless" title="sleepless">
              <span class="entry_title">
               <span class="results">
                <span class="base">
                 <b class="hw">
                  sleepless
                 </b>
                </span>
               </span>
              </span>
             </a>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="clrd">
       <div class="mod float-xl">
        <div class="am-default" id="ad_btmslot_a">
        </div>
        <div class="am-default" id="ad_houseslot_b">
        </div>
       </div>
      </div>
     </div>
     <div class="cdo-tpl__z cdo-tpl-main__z3 clrd">
      <div class="mod mod--style1 pad">
       <div class="pad">
        <div class="h2 semi-flush">
         내 사전
        </div>
        <p>
         자신의 단어장과 문제를 만들어서 무료로 공유하세요!
        </p>
        <p>
         [ahref]
         
         [linkx]
         
        </p>
       </div>
      </div>
      <div class="am-default" id="ad_rightslot">
      </div>
      <div class="mod mod--style4 mod--border">
       <h2 class="h3 txt-block txt-block--alt round-top flush">
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h2>
       <div class="tabs tabs--block js-tabs-wrap clrd">
        <div class="tabs__tabs js-tabs">
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </div>
        <div class="tabs__content mod-more on" data-tab="all" id="more-results">
         <div class="pad">
          <ul class="unstyled link-list results">
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
         <a class="txt-block" href="/ko/%EA%B2%80%EC%83%89/english-korean/?q=sleep" onclick="ga('send','event', 'more-result', 'see-all-meaning' );" title="sleep의 모든 영어–한국어 의미">
          <span>
           모든 의미 보기
          </span>
          <i aria-hidden="true" class="fcdo fcdo-angle-right">
          </i>
         </a>
        </div>
        <div class="tabs__content mod-more" data-tab="pv" id="more-results-pv">
         <div class="pad">
          <ul class="unstyled link-list results">
           <li>
            [ahref]
            
           </li>
           <li>
            sleep in[ahref][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][pkeyx][ahref][pkeyx][ahref][pkeyx][area1][mkey1][area1][keywordx][area1][keywordx][pkeyx][ahref][linkx][area1][keywordx]
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
         [ahref]
         
        </div>
       </div>
      </div>
      <div class="am-default" id="ad_houseslot_a">
      </div>
      <div class="mod mod--dark mod--style2 oflow-hide">
       <div class="pad">
        <p class="h2 semi-flush alt">
         오늘의 단어
        </p>
        <p class="h4 feature-w-big wotd-hw">
         juvenile
        </p>
        <p>
         relating to a young person who is not yet old enough to be considered an adult
        </p>
       </div>
       <div class="txt-block txt-block--alt with-icons js-eqh-sticky">
        <div class="with-icons__content">
         [linkx]
         
        </div>
        <div class="with-icons__icons">
         [linkx]
         
         [linkx]
         
        </div>
       </div>
      </div>
      <div class="cols cols--half">
       <div class="'cols__col'">
        <div class="mod mod--border">
         <a class="img" href="/2019/08/07/the-balls-in-your-court-now-idioms-with-ball/" target="_blank">
         </a>
         <div class="pad">
          <p class="h2 semi-flush">
           블로그
          </p>
          <p class="leader semi-flush">
           <a class="a--alt a--rev" href="/2019/08/07/the-balls-in-your-court-now-idioms-with-ball/" target="_blank">
            The ball’s in your court now: idioms with ‘ball’
           </a>
          </p>
          <p class="meta">
           <small class="smaller">
            <time>
             August 07, 2019
            </time>
           </small>
          </p>
         </div>
         [ahref]
         
        </div>
       </div>
       <div class="'cols__col'">
        <div class="mod mod--dark mod--border mod--style3">
         [ahref]
         
         <div class="pad">
          <p class="h2 alt semi-flush">
           최신 단+C1165어
          </p>
          <p class="h4 feature-w semi-flush nw-hw">
           [linkx]
           
          </p>
          <p>
           <small class="smaller">
            <time>
             August 12, 2019
            </time>
           </small>
          </p>
         </div>
         [ahref]
         
        </div>
       </div>
      </div>
     </div>
    </div>
   </article>
  </div>
  <div class="cdo-promo">
   <div class="contain">
    <div class="cols">
     <div class="cols__col spr-b spr--promo-widget">
      [ahref]
      
     </div>
     <div class="cols__col spr-b spr--promo-apps">
      <a href="/" rel="external" title="사전 앱">
       <span class="h4">
        사전 앱
       </span>
       <p>
        오늘 당사 사전 앱을 보시고 단어가 생각나지 않는 일이 다시는 없도록 하세요.
       </p>
      </a>
     </div>
    </div>
   </div>
  </div>
  <footer class="ftr clr" id="footer">
   <div class="contain">
    <div class="ftr__nav">
     <nav>
      <ul class="cols unstyled unstyled-nest ftr__links">
       <li class="cols__col">
        [linkx]
        
        <ul>
         <li class="resp-hide--sml">
          [linkx]
          
         </li>
         <li>
          <a href="/category/new-words/" target="_blank">
           새 단어
          </a>
         </li>
         <li>
          <a href="/ko/help/">
           도움말
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li class="cols__col">
        <a class="ico-bg-abs js-accord" data-js-maxwidth="600" href="/ko/develop.html">
         개발
        </a>
        <ul>
         <li class="resp-hide--sml">
          <a href="/ko/develop.html">
           개발
          </a>
         </li>
         <li>
          <a href="/" target="_blank">
           사전 API
          </a>
         </li>
         <li>
          <a href="/ko/doubleclick.html">
           두 번 클릭 조회
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li class="cols__col">
        [linkx]
        
        <ul>
         <li class="resp-hide--sml">
          <a href="/ko/about.html">
           정보
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          Cambridge University Press[area1][mkey1][ahref][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][mkey1][area1][mkey1][area1][mkey1][linkx][linkx][linkx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][ahref][pkeyx][area1][mkey1][area1][keywordx][area1][keywordx][pkeyx][area1][mkey1]<li>[area1][mkey1]</li><li>[area1][keywordx]</li><li>[linkx]</li>[area1][mkey1][ahref]
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/about-us/terms-use/" target="_blank">
           사용 약관
          </a>
         </li>
        </ul>
       </li>
      </ul>
     </nav>
    </div>
    <div class="ftr__follow">
     <a class="btnfeat btnfeat--fb" href="/home.php?#!/pages/Cambridge-Dictionaries-Online/118775618133878" rel="external" target="_blank" title="팬이 되 주세요!">
      <i aria-hidden="true" class="fcdo fcdo-facebook">
      </i>
      <span>
       2.32 m<li>[ahref]</li><li>[pkeyx]</li>[linkx]
      </span>
      <em>
       좋아요
      </em>
      <span class="point">
      </span>
     </a>
     [linkx]
     
    </div>
    <div class="ftr__copy">
     [linkx]
     
     <p>
      © Cambridge University Press 2019
     </p>
    </div>
   </div>
  </footer>
  <div class="overlay js-overlay">
  </div>
  <ul class="unstyled notification banner">
  </ul>
  <ul class="unstyled notification popup">
  </ul>
  <noscript>
  </noscript>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0340
  </b>
 </body>
</html>
|<---