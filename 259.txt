--->|<!DOCTYPE html>
<html class="has-leaderboard country-code-ca" lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description">
   <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords">
    <meta content="JamieOliver.com" name="author">
     <meta content="050179ea6bc8e9e62d0fd9edcc154d4a" name="p:domain_verify"/>
     <meta content="27994914806" property="fb:pages"/>
     <meta content="619762044509-j5p2iaoirs7u0pveeqh0qahjj4tddk05.apps.googleusercontent.com" name="google-signin-client_id"/>
     <meta content="yes" name="mobile-web-app-capable"/>
    </meta>
   </meta>
  </meta>
 </head>
 <body>
  <div class="default" data-region="default" id="geo-region">
   <div class="site-wrapper wrap--salad">
    <header class="main-header" id="main-header">
     <div class="header-content stick">
      <div class="jo-header container-fluid" id="jo-header">
       <div class="container">
        <div class="navbar-header">
         [linkx]
         
         <div class="mobile-headline">
         </div>
        </div>
        <div class="burger-menu-mobile hidden-md hidden-sd hidden-lg">
         [ahref]
         
        </div>
        <span class="site-search hidden-md hidden-sd hidden-lg">
        </span>
        <nav class="site-nav hidden-xs hidden-sm" id="site-nav">
         <div class="nav-1">
          <ul>
           <li>
            <a class="has-submenu" data-submenu=".submenu-recipes" data-submenu-mobile="#menu-recipe-header-menu>li>a" href="/recipes/" id="gtm_nav_recipes" title="Recipes">
             Recipes
            </a>
           </li>
           <li>
            <a class="disable-link has-submenu" data-submenu=".submenu-inspire" data-submenu-mobile=".submenu-inspire .submenu-nav a" href="/" id="gtm_nav_discover" title="Discover">
             Learn
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="/Arvmd6" id="gtm_nav_shoph" title="Shop">
             Shop
            </a>
           </li>
          </ul>
         </div>
         <div class="nav-2">
          <ul>
           <li class="login-container">
           </li>
           <li class="site-search">
            <span>
            </span>
           </li>
          </ul>
         </div>
        </nav>
       </div>
       <div class="container-fluid hover-menu dropdown" id="dropdown">
        <div class="container submenu submenu-recipes">
         <div class="row">
          <div class="menu-recipe-header-menu-container">
           <ul class="menu" id="menu-recipe-header-menu">
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-103959" id="menu-item-103959">
             <a href="/recipes/category/healthy-recipes/">
              Healthy recipes
             </a>
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-103960" id="menu-item-103960">
               <a href="/recipes/category/course/healthy-soup-recipes/">
                Healthy soups
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-103961" id="menu-item-103961">
               <a href="/recipes/category/course/healthy-snack-ideas/">
                Healthy snacks
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-103962" id="menu-item-103962">
               <a href="/recipes/category/course/healthy-lunch-ideas/">
                Healthy lunches
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-103963" id="menu-item-103963">
               <a href="/recipes/category/course/quick-healthy-recipes/">
                Quick &amp; healthy
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-103964" id="menu-item-103964">
               <a href="/recipes/category/course/healthy-chicken-recipes/">
                Healthy chicken recipes
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-107380" id="menu-item-107380">
               <a href="/recipes/category/course/healthy-fish/">
                Healthy fish recipes
               </a>
              </li>
             </ul>
            </li>
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-35" id="menu-item-35">
             <a href="/recipes/category/ingredient/" title="Main Ingredient">
              Main Ingredient
             </a>
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-36" id="menu-item-36">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-38" id="menu-item-38">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-105288" id="menu-item-105288">
               [linkx]
                [area1][mkey1][area1][keywordx][pkeyx]<li>[area1][mkey1]</li><li>[pkeyx]</li>
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-39" id="menu-item-39">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-37" id="menu-item-37">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106039" id="menu-item-106039">
               [ahref]
               
              </li>
              <li class="view-more menu-item menu-item-type-custom menu-item-object-custom menu-item-41" id="menu-item-41">
               <a href="/recipes/category/ingredient/" title="ingredient View more…">
                View more…
               </a>
              </li>
             </ul>
            </li>
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-63" id="menu-item-63">
             [ahref]
             
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-65" id="menu-item-65">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-66" id="menu-item-66">
               <a href="/recipes/category/special-diets/gluten-free/" title="Gluten-free">
                Gluten-free
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-64" id="menu-item-64">
               <a href="/recipes/category/special-diets/vegan/" title="Vegan">
                Vegan
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-67" id="menu-item-67">
               Dairy-free[ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][keywordx]
              </li>
             </ul>
            </li>
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-49" id="menu-item-49">
             <a href="/recipes/category/course/" title="Meals &amp; Courses">
              Meals &amp; Courses
             </a>
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-50" id="menu-item-50">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-53" id="menu-item-53">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-51" id="menu-item-51">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-105291" id="menu-item-105291">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-52" id="menu-item-52">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-103826" id="menu-item-103826">
               <a href="/recipes/category/course/quick-fixes/">
                Quick fixes
               </a>
              </li>
              <li class="view-more menu-item menu-item-type-custom menu-item-object-custom menu-item-55" id="menu-item-55">
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-106916" id="menu-item-106916">
             [linkx]
             
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106917" id="menu-item-106917">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106918" id="menu-item-106918">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106920" id="menu-item-106920">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106921" id="menu-item-106921">
               <a href="/recipes/beautiful-baking/cookie/">
                Cookies
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106922" id="menu-item-106922">
               <a href="/recipes/beautiful-baking/bread-doughs/">
                Breads &amp; doughs
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-107597" id="menu-item-107597">
               [linkx]
               
              </li>
              <li class="view-more menu-item menu-item-type-custom menu-item-object-custom menu-item-106923" id="menu-item-106923">
               <a href="/recipes/beautiful-baking/">
                View more…
               </a>
              </li>
             </ul>
            </li>
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-103835" id="menu-item-103835">
             <a href="/family/" title="Family Food">
              Family Food
             </a>
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106569" id="menu-item-106569">
               <a href="/family/family-favourites/">
                Family favourites
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106570" id="menu-item-106570">
               <a href="/family/school-night-suppers/">
                School night suppers
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106571" id="menu-item-106571">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106572" id="menu-item-106572">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106573" id="menu-item-106573">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106574" id="menu-item-106574">
               <a href="/family/money-saving-recipes/">
                Money saving recipes
               </a>
              </li>
              <li class="view-more menu-item menu-item-type-custom menu-item-object-custom menu-item-107608" id="menu-item-107608">
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-107129" id="menu-item-107129">
             <a href="/recipes/category/occasion/" title="Special occasions">
              Special occasions
             </a>
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-108929" id="menu-item-108929">
               <a href="/recipes/category/occasion/mothers-day/">
                Mother’s Day
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-108838" id="menu-item-108838">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-107132" id="menu-item-107132">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-107131" id="menu-item-107131">
               <a href="/recipes/category/occasion/dinner-party/">
                Dinner party
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-108839" id="menu-item-108839">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-107296" id="menu-item-107296">
               [ahref]
               
              </li>
              <li class="view-more menu-item menu-item-type-custom menu-item-object-custom menu-item-48" id="menu-item-48">
               <a href="/recipes/category/occasion/" title="Dish Type View More">
                View more…
               </a>
              </li>
             </ul>
            </li>
            <li class="submenu-heading col-md-3 dropdown-element menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-77" id="menu-item-77">
             [ahref]
             
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-115031" id="menu-item-115031">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-115705" id="menu-item-115705">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-106915" id="menu-item-106915">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-81" id="menu-item-81">
               <a href="/family/jamies-super-food-family-classics/">
                Jamie’s Super Food Family Classics
               </a>
              </li>
              <li class="view-more menu-item menu-item-type-custom menu-item-object-custom menu-item-83" id="menu-item-83">
               <a href="/recipes/category/books/" title="Books View more">
                View more…
               </a>
              </li>
             </ul>
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="container submenu submenu-inspire hidden-xs hidden-sm">
         <div class="submenu-nav">
          [linkx]
          
          [linkx]
          
          [ahref]
          
          [linkx]
          
          [ahref]
          
          [ahref]
          
         </div>
         <div class="tiles features-menu">
          <div class="row">
           <div class="col-md-2 dropdown-element">
            [linkx]
            
           </div>
           <div class="col-md-2 dropdown-element">
            [linkx]
            
           </div>
           <div class="col-md-2 dropdown-element">
            <a class="inspire-me-links" href="/features/our-10-favourite-vegan-summer-recipes/" id="gtm_discover_read_3">
             Our 10 favourite vegan summer recipes
            </a>
           </div>
           <div class="col-md-2 dropdown-element">
            <a class="inspire-me-links" href="/features/7-tasty-saturday-lunch-recipes/" id="gtm_discover_read_4">
             7 tasty Saturday lunch recipes
            </a>
           </div>
           <div class="col-md-2 dropdown-element">
            <a class="inspire-me-links" href="/features/our-favourite-banana-bread-recipes/" id="gtm_discover_read_5">
             Our favourite banana bread recipes
            </a>
           </div>
           <div class="col-md-2 dropdown-element view-all">
            [ahref]
            
           </div>
          </div>
         </div>
         <div class="tiles videos-menu">
          <div class="row">
           <div class="col-md-2 dropdown-element">
            [ahref]
            
           </div>
           <div class="col-md-2 dropdown-element">
            <a class="inspire-me-links" href="/videos/ultimate-mac-cheese/" id="gtm_discover_watch_2">
             Ultimate mac &amp; cheese: Jamie Oliver
            </a>
           </div>
           <div class="col-md-2 dropdown-element">
            <a class="inspire-me-links" href="/videos/highland-mussels/" id="gtm_discover_watch_3">
             Highland mussels: Jamie Oliver
            </a>
           </div>
           <div class="col-md-2 dropdown-element">
            [linkx]
            
           </div>
           <div class="col-md-2 dropdown-element">
            [linkx]
            
           </div>
           <div class="col-md-2 dropdown-element view-all">
            <a href="/videos/" id="gtm_discover_watch_all">
             View all videos
            </a>
           </div>
          </div>
         </div>
         <div class="tiles foundation-menu">
          <div class="row">
           <div class="col-md-3 col-sd-2 col-lg-2 dropdown-element tv">
            [ahref]
            
           </div>
          </div>
         </div>
         <div class="tiles health-menu">
          <div class="row">
           <div class="col-md-3 col-sd-2 col-lg-2 dropdown-element">
            <a class="gtm_health_sub_3 inspire-me-links" href="/healthier-happier-you/">
             Quick Easy and Healthy
            </a>
           </div>
           <div class="col-md-3 col-sd-2 col-lg-2 dropdown-element">
            [linkx]
            
           </div>
          </div>
         </div>
         <div class="tiles family-menu">
          <div class="row">
           <div class="col-md-3 col-sd-2 col-lg-2 dropdown-element">
            [linkx]
            
           </div>
          </div>
         </div>
         <div class="tiles mof-menu">
          <div class="row">
           <div class="col-md-3 col-sd-2 col-lg-2 dropdown-element">
            <a href="/" target="_blank">
             Ministry of Food
            </a>
           </div>
          </div>
         </div>
        </div>
        <div class="container burger-menu submenu submenu-burger hidden-xs hidden-sm">
         <div class="row">
         </div>
        </div>
       </div>
      </div>
      <div class="container-fluid" id="search">
       <div class="container">
        <div class="search-input">
         <div class="input-wrapper">
          <i class="search-icon hidden-sm hidden-xs">
          </i>
          <form action="/search/" id="site-search" method="get">
          </form>
         </div>
        </div>
        <div class="search-close">
         <li>[ahref]</li>[ahref][pkeyx][area1][keywordx]
        </div>
       </div>
      </div>
      <div class="top-avocado">
       <div class="wrap">
        <div class="proper-ad-unit">
         <div id="proper-ad-jamieoliver_leaderboard">
         </div>
        </div>
       </div>
      </div>
     </div>
    </header>
    <section id="recipe-subcat-listing">
     <div class="container">
      <div class="row">
       <div class="col-lg-12 col-sm-12">
        <div class="cat-header">
         <h1>
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h1>
        </div>
       </div>
      </div>
      <div class="row">
       <div class="col-lg-9 col-md-8 col-sm-12">
        <div class="row recipe-row infinite-scroll">
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="proper-ad-unit mobile visible-xs recipes-avocado-mobile-inline">
          <div id="proper-ad-jamieoliver_leftrail_mobile">
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/asian-tuna-steak-salad/" id="gtm_recipe_subcat_7">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Asian tuna steak salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="proper-ad-unit mobile visible-xs recipes-avocado-mobile-inline">
          <div id="proper-ad-jamieoliver_leftrail_mobile-2">
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          [area1][mkey1]<li>[ahref]</li>[ahref]
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           <a href="/recipes/salmon-recipes/sorta-salmon-nicoise/" id="gtm_recipe_subcat_9">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              18 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Sorta salmon niçoise
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item active">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetable-recipes/italian-spring-bean-salad/" id="gtm_recipe_subcat_12">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1 hour
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Italian spring bean salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/kale-recipes/warm-winter-salad/" id="gtm_recipe_subcat_14">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Warm winter salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetable-recipes/moorish-crunch-salad/" id="gtm_recipe_subcat_16">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Moorish crunch salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/simple-green-salad-with-lemon-dressing/" id="gtm_recipe_subcat_26">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Simple green salad with lemon dressing
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/simple-sushi-salad/" id="gtm_recipe_subcat_27">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              35 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Simple sushi salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/seafood-recipes/prawn-cocktail/" id="gtm_recipe_subcat_29">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Prawn cocktail
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/salad-wedges-with-buttermilk-dressing/" id="gtm_recipe_subcat_30">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Salad wedges with buttermilk dressing
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/jools-s-chopped-salad/" id="gtm_recipe_subcat_31">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Jools’s chopped salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/rojak/" id="gtm_recipe_subcat_37">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              25 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Rojak
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/seafood-recipes/asian-seafood-salad-with-yuzu-amp-sesame-dressing/" id="gtm_recipe_subcat_38">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Asian seafood salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/sweetheart-slaw-with-passion-fruit-dressing/" id="gtm_recipe_subcat_40">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Sweetheart slaw with passion fruit dressing
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/pepper-noodle-salad/" id="gtm_recipe_subcat_41">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Pepper &amp; noodle salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/seafood-recipes/fennel-crab-orange-salad/" id="gtm_recipe_subcat_42">
            <div class="recipe-image">
             [area1][mkey1]<li>[ahref]</li>[area1][keywordx]<li>[pkeyx]</li>
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Fennel, crab &amp; orange salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/raw-spring-salad/" id="gtm_recipe_subcat_47">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Raw spring salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/beef-recipes/jamie-s-meatloaf/" id="gtm_recipe_subcat_49">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1H 10M
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Jamie’s meatloaf
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/warm-potato-salad-with-capers-and-rocket/" id="gtm_recipe_subcat_54">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Warm potato salad with capers &amp; rocket
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/bombay-potato-salad/" id="gtm_recipe_subcat_58">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Bombay potato salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/bulgur-amp-lentil-salad/" id="gtm_recipe_subcat_61">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1 hour
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Bulgur &amp; lentil salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/chicken-recipes/chicken-green-mango-thai-salad/" id="gtm_recipe_subcat_62">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1 hour
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Chicken &amp; green mango Thai salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/game-recipes/game-bird-salad-with-horseradish-dressing/" id="gtm_recipe_subcat_63">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              25 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Game bird salad with horseradish dressing[area1][mkey1][area1][keywordx][linkx][pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][pkeyx][linkx][pkeyx][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx]
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/grilled-radicchio-with-gorgonzola-dressing/" id="gtm_recipe_subcat_66">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              35 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Grilled radicchio with gorgonzola dressing
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/tomato-medley/" id="gtm_recipe_subcat_69">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Tomato medley
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/healthy-greens-box/" id="gtm_recipe_subcat_70">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Healthy greens box
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/cheese-recipes/baked-feta-tomatoes/" id="gtm_recipe_subcat_71">
            <div class="recipe-image">
             <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx]<li>[pkeyx]</li>
            </div>
            <div class="recipe-meta">
             <span class="time">
              35 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Baked feta &amp; tomatoes
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/pomegranate-glazed-mackerel-with-satsuma-fennel-salad/" id="gtm_recipe_subcat_72">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1H 10M
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Pomegranate-glazed mackerel with satsuma &amp; fennel salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/roast-vegetable-salad/" id="gtm_recipe_subcat_75">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1 hour
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Roast vegetable salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/pasta-recipes/winter-pasta-salad/" id="gtm_recipe_subcat_78">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Winter pasta salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/rice-recipes/wild-rice-brussels-sprout-super-salad/" id="gtm_recipe_subcat_79">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              45 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Wild rice &amp; Brussels sprout super salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/rice-recipes/fried-rice-with-kale-squash-chestnuts/" id="gtm_recipe_subcat_80">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1H 5M
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Fried rice with kale, squash &amp; chestnuts
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/pork-recipes/crispy-basil-salad-with-pork-pickled-carrots/" id="gtm_recipe_subcat_83">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1H 35M
             </span>
             <span class="difficulty showing-off">
              Showing off
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Crispy basil salad with pork &amp; pickled carrots
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/chicken-recipes/seared-turmeric-chicken/" id="gtm_recipe_subcat_84">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Seared turmeric chicken
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/simple-chopped-salad/" id="gtm_recipe_subcat_86">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              25 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Simple chopped salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/tasty-tabbouleh-salad/" id="gtm_recipe_subcat_89">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Tasty tabbouleh salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/seafood-recipes/prawn-papaya-salad/" id="gtm_recipe_subcat_90">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Prawn &amp; papaya salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/superfood-salad/" id="gtm_recipe_subcat_91">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Superfood salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/waldorf-salad/" id="gtm_recipe_subcat_92">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              45 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Waldorf salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/vietnamese-bun-cha-with-sticky-spicy-tofu/" id="gtm_recipe_subcat_94">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              45 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Vietnamese bun cha with sticky spicy tofu
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/roast-peach-parma-ham-salad/" id="gtm_recipe_subcat_95">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Roast peach &amp; Parma ham salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/gorgeous-gado-gado/" id="gtm_recipe_subcat_96">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Gorgeous gado-gado
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/summer-ratatouille-salad/" id="gtm_recipe_subcat_100">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              35 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Summer ratatouille salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/tomato-carpaccio/" id="gtm_recipe_subcat_101">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Tomato carpaccio
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/cheese-recipes/mozzarella-winter-fruit-salad/" id="gtm_recipe_subcat_102">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Mozzarella &amp; winter fruit salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/caesar-on-the-lighter-side/" id="gtm_recipe_subcat_106">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Caesar on the lighter side
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fruit-recipes/pear-crunch-salad/" id="gtm_recipe_subcat_108">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Pear crunch salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/turkey-recipes/turkey-salad-warm-clementine-dressing/" id="gtm_recipe_subcat_112">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Turkey salad &amp; warm clementine dressing[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[linkx]</li><li>[ahref]</li>[ahref]
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/duck-recipes/asian-squash-salad-with-crispy-duck/" id="gtm_recipe_subcat_120">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              2H 40M
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Asian squash salad with crispy duck
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fruit-recipes/cedro-lemon-bruschetta/" id="gtm_recipe_subcat_121">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Cedro lemon bruschetta
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/mighty-mackerel-with-mixed-tomato-quinoa-salad/" id="gtm_recipe_subcat_124">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Mighty mackerel
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          [area1][keywordx][area1][mkey1][linkx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][pkeyx][area1][keywordx][ahref][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx]
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/chicken-recipes/chicken-and-squash-salad/" id="gtm_recipe_subcat_127">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              1H 10M
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Chicken &amp; squash salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/pork-recipes/avocado-pancetta-pine-nut-salad/" id="gtm_recipe_subcat_128">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Avocado, pancetta &amp; pine nut salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/warm-salmon-and-jersey-royal-salad/" id="gtm_recipe_subcat_129">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Warm salmon &amp; Jersey Royal salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/keralan-tomato-salad-with-curry-leaves/" id="gtm_recipe_subcat_137">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Keralan tomato salad with curry leaves
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/cheese-recipes/summer-crunch-salad-with-walnuts-and-gorgonzola/" id="gtm_recipe_subcat_138">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             [area1][mkey1]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/new-potato-salad-with-shallots-parsley-and-vinaigrette/" id="gtm_recipe_subcat_140">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              New potato salad with shallots, parsley and vinaigrette
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/new-potato-salad-with-garlic-mayonnaise-and-cress/" id="gtm_recipe_subcat_141">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              New potato salad with garlic mayonnaise and cress
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
          <li>[area1][keywordx]</li><li>[pkeyx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fruit-recipes/tropical-fruit-salad/" id="gtm_recipe_subcat_149">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Tropical fruit salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fruit-recipes/the-easiest-sexiest-salad-in-the-world/" id="gtm_recipe_subcat_150">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              The easiest sexiest salad in the world
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/pasta-recipes/the-best-pasta-salad/" id="gtm_recipe_subcat_151">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              The best pasta salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
            <li>[ahref]</li>[linkx][pkeyx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/summer-salmon-salad/" id="gtm_recipe_subcat_154">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Summer salmon salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/street-salad-insalata-di-strada/" id="gtm_recipe_subcat_156">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              30 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Street salad (Insalata di strada)
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/simple-crunchy-side-salad/" id="gtm_recipe_subcat_158">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Simple crunchy side salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/cheese-recipes/roquefort-salad-with-warm-croutons-and-lardons/" id="gtm_recipe_subcat_160">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Roquefort salad with warm croutons and lardons
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/roast-salmon-salad/" id="gtm_recipe_subcat_161">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              50 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Roast salmon salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/roast-carrot-and-avocado-salad-with-orange-and-lemon-dressing/" id="gtm_recipe_subcat_162">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              50 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Roast carrot &amp; avocado salad with orange &amp; lemon dressing
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/raw-beetroot-salad/" id="gtm_recipe_subcat_164">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Raw beetroot salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/radicchio-and-rocket-salad-insalata-di-radicchio-e-rughetta/" id="gtm_recipe_subcat_165">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              5 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Radicchio and rocket salad (Insalata di radicchio e rughetta)
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/seafood-recipes/prawn-and-watermelon-salad/" id="gtm_recipe_subcat_167">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Prawn and watermelon salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/potato-salad-with-smoked-salmon-and-horseradish-cr-me-fraiche/" id="gtm_recipe_subcat_168">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              40 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Potato salad with smoked salmon &amp; horseradish crème fraîche
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/mexican-street-salad/" id="gtm_recipe_subcat_171">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Mexican street salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/bread-recipes/italian-tomato-and-bread-salad/" id="gtm_recipe_subcat_172">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Italian tomato and bread salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/hot-tuna-salad-with-basil-dressing/" id="gtm_recipe_subcat_174">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Hot tuna salad with basil dressing
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/harissa-sardines-with-couscous-salad/" id="gtm_recipe_subcat_176">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Harissa sardines with couscous salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/greek-salad/" id="gtm_recipe_subcat_178">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Greek salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/fresh-smoked-salmon-and-beetroot-salad/" id="gtm_recipe_subcat_179">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Fresh smoked salmon and beetroot salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/duck-recipes/five-spice-duck-salad/" id="gtm_recipe_subcat_181">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Five spice duck salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/fish-recipes/fantastic-tomato-and-fennel-salad-with-flaked-barbecued-fish/" id="gtm_recipe_subcat_183">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Fantastic tomato and fennel salad with flaked barbecued fish
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/everyday-green-chopped-salad/" id="gtm_recipe_subcat_184">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              10 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Everyday green chopped salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][mkey1][pkeyx][area1][keywordx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][ahref][area1][keywordx][linkx][pkeyx][ahref][pkeyx]
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/crunchy-raw-beetroot-salad-with-feta-and-pear/" id="gtm_recipe_subcat_186">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              20 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Crunchy raw beetroot salad with feta &amp; pear
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/vegetables-recipes/crunchy-keralan-salad/" id="gtm_recipe_subcat_187">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              15 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Crunchy Keralan salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/cheese-recipes/caprese-salad-with-grilled-peppers/" id="gtm_recipe_subcat_192">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              25 minutes
             </span>
             <span class="difficulty super-easy">
              Super easy
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Caprese salad with grilled peppers
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           <a href="/recipes/pork-recipes/candied-bacon-green-salad/" id="gtm_recipe_subcat_193">
            <div class="recipe-image">
            </div>
            <div class="recipe-meta">
             <span class="time">
              25 minutes
             </span>
             <span class="difficulty not-too-tricky">
              Not too tricky
             </span>
            </div>
            <div class="recipe-details">
             <div class="recipe-title">
              Candied bacon green salad
             </div>
            </div>
           </a>
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <h2>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="clearfix visible-md-block visible-sd-block visible-sm-block visible-xs-block">
         </div>
         <div class="clearfix visible-lg-block">
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [ahref]
           
          </div>
         </div>
         <div class="col-lg-4 col-md-6 col-xs-6 col-sm-6 recipe-col item">
          <div class="recipe-block">
           [linkx]
           
          </div>
         </div>
         <div class="col-md-12 load-more">
          [ahref]
          
         </div>
        </div>
       </div>
       <div class="col-lg-3 col-md-4 hidden-sm hidden-xs remove-left-col-padding-md">
        <div id="sticky-anchor">
        </div>
        <div class="commercial-sidebar sticky category-sidebar" id="sticky">
         <div class="proper-ad-unit ad ad-zero-margin">
          <div id="proper-ad-jamieoliver_home_side_1">
          </div>
         </div>
         <div class="related-videos">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <div class="related-videos-wrapper">
           <ul class="related-videos-list">
            <li class="">
             [ahref]
             
             <hr/>
            </li>
            <li class="">
             <a class="hover-link" href="/videos/ultimate-mac-cheese/" title="Ultimate mac &amp; cheese: Jamie Oliver">
              <span class="related-video-container">
               <span class="video-play">
               </span>
              </span>
              <span class="related-video-title">
               Ultimate mac &amp; cheese: Jamie Oliver
              </span>
             </a>
             <hr/>
            </li>
            <li class="last-item">
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
         <div class="related-features">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <div class="related-features-wrapper">
           <ul class="related-features-list">
            <li class="">
             <a class="hover-link" href="/features/how-to-make-beetroot-gravlax-from-scratch/">
              <li>[ahref]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
             </a>
             <hr/>
            </li>
            <li class="">
             <a class="hover-link" href="/features/6-tasty-way-to-use-veg-in-your-cake-recipes/">
              <span class="related-feature-title">
               6 tasty way to use veg in your cake recipes
              </span>
             </a>
             <hr/>
            </li>
            <li class="last-item">
             <a class="hover-link" href="/features/our-10-favourite-vegan-summer-recipes/">
              <span class="related-feature-title">
               Our 10 favourite vegan summer recipes
              </span>
             </a>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <hr class="no-cross"/>
    <div class="proper-ad-unit ad-sticky footer-sticky-avocado">
     <div id="proper-ad-jamieoliver_sticky_1">
     </div>
    </div>
    <div class="promo-banner" data-slot="footer">
    </div>
    <div class="container-fluid" id="footer">
     <div class="container">
      <div class="row">
       <div class="col-md-4 col-sd-3 copyright hidden-xs hidden-sm">
        © 2019 Jamie Oliver Enterprises Limited
       </div>
       <div class="col-md-4 col-sd-6 nav">
        <ul>
         <li class="gtm_footer_nav_0 menu-item menu-item-type-custom menu-item-object-custom menu-item-86" id="menu-item-86">
          [linkx]
          
         </li>
         <li class="gtm_footer_nav_1 menu-item menu-item-type-custom menu-item-object-custom menu-item-87" id="menu-item-87">
          [linkx]
          
         </li>
         <li class="gtm_footer_nav_2 menu-item menu-item-type-custom menu-item-object-custom menu-item-88" id="menu-item-88">
          [ahref]
          
         </li>
         <li class="gtm_footer_nav_4 menu-item menu-item-type-custom menu-item-object-custom menu-item-394" id="menu-item-394">
          <a href="/careers/" title="CAREERS">
           CAREERS
          </a>
         </li>
         <li class="gtm_footer_nav_5 menu-item menu-item-type-custom menu-item-object-custom menu-item-395" id="menu-item-395">
          <a href="/help/" title="CONTACT">
           CONTACT
          </a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-112023" id="menu-item-112023">
          <a href="/htmlsitemap/">
           SITEMAP
          </a>
         </li>
        </ul>
       </div>
       <div class="col-md-12 copyright visible-xs visible-sm">
        © 2019 Jamie Oliver Enterprises Limited
       </div>
       <div class="col-md-4 col-sd-3 follow">
        <ul>
         <li>
          <a class="facebook" href="/jamieoliver" id="gtm_nav_facebook" target="_blank" title="Follow on Facebook">
           [pkeyx][ahref][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][mkey1][pkeyx][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1]
          </a>
         </li>
         <li>
          <a class="instagram" href="/jamieoliver/" id="gtm_nav_instagram" target="_blank" title="Follow on Instagram">
           <svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z">
            </path>
           </svg>
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0279
  </b>
 </body>
</html>
|<---