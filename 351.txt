--->|<!DOCTYPE html>
<html>
 <head>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta charset="utf-8"/>
  <meta content="ie=edge" http-equiv="x-ua-compatible"/>
  <meta content="none" http-equiv="x-pjax-version"/>
  <meta content="the seed" name="generator"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="application-name"/>
  <meta content="yes" name="mobile-web-app-capable"/>
  <meta content="나무위키" name="msapplication-tooltip"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="msapplication-starturl"/>
  <meta content="#008275" name="theme-color"/>
  <meta content="user-scalable=no, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0, width=device-width" name="viewport"/>
  <meta content="noarchive" name="googlebot"/>
 </head>
 <body class="senkawa">
  <div class="navbar-wrapper">
   <nav class="navbar navbar-dark bg-inverse navbar-static-top">
    <a class="navbar-brand wiki-logo" href="/w/%EB%82%98%EB%AC%B4%EC%9C%84%ED%82%A4:%EB%8C%80%EB%AC%B8">
    </a>
    <ul class="nav navbar-nav">
     <li class="nav-item">
      <a class="nav-link" href="/RecentChanges" title="최근 변경">
       <span class="icon ion-compass">
       </span>
       <span class="icon-title">
        최근 변경
       </span>
      </a>
     </li>
     <li class="nav-item">
      [linkx]
      
     </li>
     <li class="nav-item dropdown">
      <a aria-expanded="false" aria-haspopup="true" class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" title="특수 기능">
       <span class="icon ion-ios-gear">
       </span>
       <span class="icon-title">
        특수 기능
       </span>
       <span class="caret">
       </span>
      </a>
      <div class="dropdown-menu right">
       [ahref]
       
       <div class="dropdown-divider">
       </div>
       <a class="dropdown-item" href="/NeededPages">
        <span class="icon ion-coffee">
        </span>
        <span class="icon-title">
         작성이 필요한 문서
        </span>
       </a>
       <a class="dropdown-item" href="/OrphanedPages">
        <span class="icon ion-sad-outline">
        </span>
        <span class="icon-title">
         고립된 문서
        </span>
       </a>
       [linkx]
       
       <a class="dropdown-item" href="/OldPages">
        <span class="icon ion-pause">
        </span>
        <span class="icon-title">
         편집된 지 오래된 문서
        </span>
       </a>
       [ahref]
       
       [ahref]
       
       <a class="dropdown-item" href="/BlockHistory">
        <span class="icon ion-eye-disabled">
        </span>
        <span class="icon-title">
         차단 내역
        </span>
       </a>
       [ahref]
       
       [linkx]
       
       [linkx]
       
      </div>
     </li>
     <li class="nav-item dropdown">
      [ahref]
      
      <div class="dropdown-menu right">
       [ahref]
       
       [linkx]
       
       <div class="dropdown-divider">
       </div>
       [ahref]
       
       [ahref]
       
       <div class="dropdown-divider">
       </div>
       [linkx]
       
       [ahref]
       
       [ahref]
       
       [ahref]
       
       [linkx]
       
       [ahref]
       
       <a class="dropdown-item" href="/b/sports">
        스포츠 채널
       </a>
       <a class="dropdown-item" href="/b/city">
        도시·지리 채널
       </a>
      </div>
     </li>
    </ul>
    <ul class="nav navbar-nav pull-right">
     <li class="nav-item dropdown user-menu-parent">
      <a aria-haspopup="true" class="nav-link dropdown-toggle user-menu" data-toggle="dropdown" href="#" title="Member Menu">
       <span class="icon ion-person">
       </span>
      </a>
      <div class="dropdown-menu user-dropdown right">
       <li>[pkeyx]</li><li>[area1][keywordx]</li>[pkeyx]
      </div>
     </li>
    </ul>
    <form class="form-inline navbar-form search-box-parent">
     <div class="input-group search-box">
      <span class="input-group-btn left-search-btns">
       [linkx]
       
      </span>
      <span class="input-group-btn right-search-btns">
       <button class="btn btn-secondary" id="searchBtn" type="button">
        <span class="icon ion-search">
        </span>
       </button>
       <button class="btn btn-secondary" id="goBtn" type="button">
        <span class="icon ion-arrow-right-c">
        </span>
       </button>
      </span>
     </div>
    </form>
   </nav>
  </div>
  <div class="content-wrapper">
   <aside class="sidebar has-site-notice">
    <div class="card recent-card">
     <h5 class="card-title">
      최근 변경
     </h5>
     <div class="link-table" id="recentChangeTable">
      [ahref]
      
     </div>
     [ahref]
     
    </div>
    <div class="test-ad-card">
     <iframe frameborder="0" height="270" marginheight="0" marginwidth="0" scrolling="no" src="//namu.live/static/ad/c/270x270.html?v=2" width="270">
     </iframe>
    </div>
    <div class="card live-list-card" data-count="20" data-slug="headline">
     <h5 class="card-title">
      헤드라인 최신글
     </h5>
     <div class="link-table">
      [linkx]
      
     </div>
     <a class="more-link" href="/b/headline">
      [더 보기]
     </a>
    </div>
    <div class="ad-card">
     <ins class="adsbygoogle" data-ad-client="ca-pub-4481395322450420" data-ad-slot="2029530375" style="display:inline-block;width:160px;height:600px">
     </ins>
    </div>
   </aside>
   <article class="container-fluid wiki-article">
    <div class="wiki-article-menu">
     <div class="btn-group" role="group">
      [ahref]
      
      [ahref]
      
      <a class="btn btn-secondary" href="/discuss/%EB%8D%B0%EC%A0%80%ED%8A%B8%20%EC%9D%B4%EA%B8%80(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" role="button">
       토론
      </a>
      [linkx]
      
      [ahref]
      
      [ahref]
      
     </div>
    </div>
    <h1 class="title">
     <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
    </h1>
    <p class="wiki-edit-date">
     최근 수정 시각:
     <time data-format="Y-m-d H:i:s" datetime="2019-08-12T14:42:22.000Z">
      2019-08-12 14:42:22
     </time>
    </p>
    <div class="adsense">
     <ins class="adsbygoogle" data-ad-client="ca-pub-4481395322450420" data-ad-format="horizontal" data-ad-slot="3379361405" data-full-width-responsive="false" style="display:block">
     </ins>
    </div>
    <div class="wiki-category">
     <h2>
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h2>
     <ul>
      <li>
       <a href="/w/%EB%B6%84%EB%A5%98:%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0/HG">
        소녀전선/HG
       </a>
      </li>
     </ul>
    </div>
    <div class="wiki-content clearfix">
     <div class="wiki-inner-content">
      <div class="wiki-table-wrap table-center" style="width:90%">
       <table class="wiki-table" style="background-color:#616161;width: 100%;border: 2px solid #333333;">
        <tbody>
         <tr>
          <td colspan="4" style="text-align:center;">
           <div class="wiki-paragraph">
            <strong>
             <span class="wiki-size size-up-5">
              <span class="wiki-color" style="color:#ffffff">
               데저트 이글
              </span>
             </span>
            </strong>
           </div>
          </td>
         </tr>
         <tr style="background-color:#fff;">
          <td colspan="2" style="text-align:center;">
           <div class="wiki-paragraph">
            <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:Desert%20EagleCHAN.jpg" rel="nofollow" title="파일:Desert EagleCHAN.jpg">
             <span class="wiki-image-align-normal" style="width:90%;">
              <span class="wiki-image-wrapper" style="width: 100%;">
               <noscript>
               </noscript>
              </span>
             </span>
            </a>
           </div>
          </td>
          <td colspan="2" style="text-align:center;">
           <div class="wiki-paragraph">
            [ahref]
            
           </div>
          </td>
         </tr>
         <tr style="background-color:#eee;">
          <td colspan="2" style="text-align:center;">
           <div class="wiki-paragraph">
            <span class="wiki-color" style="color:#333333">
             기본
            </span>
           </div>
          </td>
          <td colspan="2" style="text-align:center;">
           <div class="wiki-paragraph">
            <span class="wiki-color" style="color:#333333">
             중상
            </span>
           </div>
          </td>
         </tr>
         <tr>
          <td style="width:20%; text-align:center;">
           <div class="wiki-paragraph">
            <strong>
             <span class="wiki-color" style="color:#ffffff">
              번호
             </span>
            </strong>
           </div>
          </td>
          <td style="background-color:#fff; width:30%; text-align:center;">
           <div class="wiki-paragraph">
            No.272
           </div>
          </td>
          <td rowspan="3" style="width:20%; text-align:center;">
           <div class="wiki-paragraph">
            <strong>
             <span class="wiki-color" style="color:#ffffff">
              등급
             </span>
            </strong>
           </div>
          </td>
          <td rowspan="3" style="background-color:#ECCC2B; width:30%; text-align:center;">
           <div class="wiki-paragraph">
            <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:Girls'%20frontline_LEGENDARY.png" rel="nofollow" title="파일:Girls' frontline_LEGENDARY.png">
             <span class="wiki-image-align-normal" style="width:80px;">
              <span class="wiki-image-wrapper" style="width: 100%;">
               <noscript>
               </noscript>
              </span>
             </span>
            </a>
           </div>
          </td>
         </tr>
         <tr>
          <td style="text-align:center;">
           <div class="wiki-paragraph">
            <strong>
             <span class="wiki-color" style="color:#ffffff">
              분류
             </span>
            </strong>
           </div>
          </td>
          <td style="background-color:#fff; text-align:center;">
           <div class="wiki-paragraph">
            [linkx]
            
           </div>
          </td>
         </tr>
         <tr>
          <td style="text-align:center;">
           <div class="wiki-paragraph">
            <strong>
             <span class="wiki-color" style="color:#ffffff">
              실제 총기명
             </span>
            </strong>
           </div>
          </td>
          <td style="background-color:#fff; text-align:center;">
           <div class="wiki-paragraph">
            <a class="wiki-link-internal" href="/w/IMI%20Desert%20Eagle" title="IMI Desert Eagle">
             IMI Desert Eagle
            </a>
           </div>
          </td>
         </tr>
         <tr>
          <td style="text-align:center;">
           <div class="wiki-paragraph">
            <strong>
             <span class="wiki-color" style="color:#ffffff">
              성우
             </span>
            </strong>
           </div>
          </td>
          <td style="background-color:#fff; text-align:center;">
           <div class="wiki-paragraph">
            미정
           </div>
          </td>
          <td style="text-align:center;">
           <div class="wiki-paragraph">
            <strong>
             <span class="wiki-color" style="color:#ffffff">
              일러스트
             </span>
            </strong>
           </div>
          </td>
          <td style="background-color:#fff; text-align:center;">
           <div class="wiki-paragraph">
            [ahref]
            
           </div>
          </td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="wiki-paragraph">
       <br/>
       <div class="wiki-macro-toc" id="toc">
        <div class="toc-indent">
         <span class="toc-item">
          [ahref]
          
          . 소개
         </span>
         <span class="toc-item">
          [linkx]
          
          . 설정
         </span>
         <span class="toc-item">
          <a href="3">
           3
          </a>
          . 성능
         </span>
         <div class="toc-indent">
          <span class="toc-item">
           [ahref]
           
           . 능력치
          </span>
          <span class="toc-item">
           [linkx]
           
           .
           [linkx]
           
          </span>
          <span class="toc-item">
           <a href="3">
            3.3
           </a>
           . 평가
          </span>
         </div>
         <span class="toc-item">
          [linkx]
          
          . 작중 행적
         </span>
         <span class="toc-item">
          [linkx]
          
          . 대사
         </span>
         <span class="toc-item">
          [ahref]
          
          . 여담
         </span>
         <span class="toc-item">
          <a href="7">
           7
          </a>
          . 같이 보기
         </span>
        </div>
       </div>
       <br/>
      </div>
      <h2 class="wiki-heading">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h2>
      <div class="wiki-heading-content">
       <blockquote class="wiki-quote">
        <div class="wiki-paragraph">
         "프로듀서님... 아니, '지휘관'이라고 불러야겠죠? 안녕하십니까, 데저트 이글, 오늘 정식으로 귀하의 제작진에 합류하겠습니다. 앞으로 많은 지도를 부탁드립니다."
        </div>
       </blockquote>
       <div class="wiki-paragraph">
        <br/>
        [ahref]
        
        에서 이벤트 보상으로 추가되는 신규 권총 인형.
        <br/>
       </div>
      </div>
      <h2 class="wiki-heading">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="wiki-heading-content">
       <blockquote class="wiki-quote">
        <div class="wiki-paragraph">
         작은 몸집에 어울리지 않는 엄청난 괴력의 소유자로, 그리폰에 입사하기 전 연예계에서 활동한 경력이 있다. 그래서인지 스스로 뛰어난 연기파라 자부하고 있으며, 결정을 내리기 전 몇 번이고 신중을 기하고 일단 목표가 정해지면 누구도 쫓아올 수 없는 행동력을 보여 준다.
        </div>
       </blockquote>
       <div class="wiki-paragraph">
        <br/>
        설정상 연예계에서 활동하다가 그리폰에 입사한 인형이다.
        [linkx]
        
        때문에 은근히 연예계로 돌아가고 싶다는 마음이 있지만, 어자피 지난 일이 되어버린 고로 훌륭한 전술인형이 되는 것을 목표로 활동 중.
       </div>
      </div>
      <h2 class="wiki-heading">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="wiki-heading-content">
      </div>
      <h3 class="wiki-heading">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <div class="wiki-heading-content">
       <div class="wiki-table-wrap">
        <table class="wiki-table" style="background-color:#fff;">
         <tbody>
          <tr>
           <td colspan="4" style="background-color:#ccc; text-align:center;">
            <div class="wiki-paragraph">
             능력치(성장 S)
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; width:100px; text-align:center;">
            <div class="wiki-paragraph">
             체력(A)
            </div>
           </td>
           <td style="width:100px; text-align:center;">
            <div class="wiki-paragraph">
             / 73
            </div>
           </td>
           <td style="background-color:#eee; width:100px; text-align:center;">
            <div class="wiki-paragraph">
             화력(S)
            </div>
           </td>
           <td style="width:100px; text-align:center;">
            <div class="wiki-paragraph">
             / 41
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             회피(C)
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             / 66
            </div>
           </td>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             명중(B)
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             / 57
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             사속(B)
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             / 55
            </div>
           </td>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             작전능력
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             /
            </div>
           </td>
          </tr>
          <tr style="background-color:#eee;">
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             기동력
            </div>
           </td>
           <td style="background-color:#fff; text-align:center;">
            <div class="wiki-paragraph">
             15[ahref][area1][keywordx][area1][keywordx][area1][mkey1][linkx][area1][keywordx]
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             치명률
            </div>
           </td>
           <td style="background-color:#fff; text-align:center;">
            <div class="wiki-paragraph">
             40%
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="4" style="background-color:#ccc; text-align:center;">
            <div class="wiki-paragraph">
             자원 소비(편제 인원당)
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             탄약
            </div>
           </td>
           <td colspan="3" style="text-align:center;">
            <div class="wiki-paragraph">
             10 / 15 / 20 / 25 / 30
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             식량
            </div>
           </td>
           <td colspan="3" style="text-align:center;">
            <div class="wiki-paragraph">
             10 / 15 / 20 / 25 / 30
            </div>
           </td>
          </tr>
          <tr style="background-color:#ccc;">
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             버프 진형
            </div>
           </td>
           <td colspan="3" style="text-align:center;">
            <div class="wiki-paragraph">
             진형 버프 효과
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ■
             <span class="wiki-color" style="color:#4c7">
              ■
             </span>
             <span class="wiki-color" style="color:#4c7">
              ■
             </span>
             <br/>
             <span class="wiki-color" style="color:#4c7">
              ■
             </span>
             <span class="wiki-color" style="color:#4c7">
              ■
             </span>
             □
             <br/>
             <span class="wiki-color" style="color:#4c7">
              ■
             </span>
             □ □
            </div>
           </td>
           <td colspan="3" style="text-align:center;">
            <div class="wiki-paragraph">
             화력 30%, 치명률 20% 상승
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="4" style="background-color:#ccc; text-align:center;">
            <div class="wiki-paragraph">
             획득 방법
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             제작 시간
            </div>
           </td>
           <td colspan="3" style="text-align:left;">
            <div class="wiki-paragraph">
             불가능
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             드랍
            </div>
           </td>
           <td colspan="3" style="text-align:left;">
            <div class="wiki-paragraph">
             없음
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             기타
            </div>
           </td>
           <td colspan="3" style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             이벤트 ?-? 클리어 보상
            </div>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
       <div class="wiki-paragraph">
        <br/>
        진형버프가 6칸 칩셋 중 하나와 같은 형태로 굉장히 특이하게 생겼다. 또한 데저트 이글이 대구경 권총인 점을 반영해 권총 중 순위권에 달하는 높은 화력을 가지고 있다.
        <br/>
        <br/>
        버프 진형상
        <a class="wiki-link-internal" href="/w/PA-15(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="PA-15(소녀전선)">
         PA-15
        </a>
        처럼 7번 자리가 권장되며, 버프 수치는
        [linkx]
        
        와 동일하다.
        <br/>
       </div>
      </div>
      <h3 class="wiki-heading">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <div class="wiki-heading-content">
       <div class="wiki-table-wrap">
        <table class="wiki-table" style="background-color:#fff;">
         <tbody>
          <tr>
           <td colspan="6" style="background-color:#ccc; width:400px; text-align:center;">
            <div class="wiki-paragraph">
             스킬
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="background-color:#eee; text-align:center;">
            <div class="wiki-paragraph">
             <br/>
            </div>
           </td>
           <td colspan="4" style="text-align:center;">
            <div class="wiki-paragraph">
             패시브: 공격이 보호막을 관통하여 보호막과 체력에 동시에 피해를 입힘.
             <br/>
             액티브 : 지속시간동안 자신의 사속 상승. 체력+보호막 수치가 가장 높은
             <br/>
             적 세 명에게 표식을 부여, 자신만 표식이 붙은 적을 우선 공격
             <br/>
             대상에 대한 자신/아군의 피해 상승(최대 3중첩)
            </div>
           </td>
          </tr>
          <tr style="background-color:#eee;">
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             레벨
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             선 쿨타임
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             쿨타임
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             지속시간
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             사속 상승치
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             피해 상승치(자신/아군)
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             1
            </div>
           </td>
           <td rowspan="10" style="text-align:center;">
            <div class="wiki-paragraph">
             6초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             15초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             5초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             2
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             14.7초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             5.3초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             3
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             14.3초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             5.7초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             4
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             14초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             6초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             5
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             13.7초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             6.3초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            ?% / ?%[ahref]<li>[area1][mkey1]</li><li>[ahref]</li>[area1][keywordx][area1][keywordx]
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             6
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             13.3초
            </div>
           </td>
           <td style="text-align:center;">
            6.7초<li>[area1][keywordx]</li>[area1][mkey1][pkeyx]
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             7
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             13초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             7초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             8
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             12.7초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             7.3초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             9
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             12.3초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             7.7초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             ?% / ?%
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             10
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             12초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             8초
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             40%
            </div>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             60% / 10%
            </div>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
       <div class="wiki-paragraph">
        <br/>
        모든 인형들 중 최초로 보호막을 관통하는 스킬을 가지고 있다. 강화 철혈 용기병/방패병/장갑 방패병이나 보스 등이 사용하는 보호막을 관통할 수 있다. 물론 4세력의 왜곡방벽은 관통할 수 없고, 권총의 화력으로는 보호막을 관통한다고 해도 유효한 피해를 주기 어렵지만, 부족한 화력은 액티브 효과가 보완한다.
        <br/>
        <br/>
        액티브 효과는 권총임에도 자신에게 효과가 집중된 특이한 효과로,
        <strong>
         자신만
        </strong>
        사속이 상승하며, 아군을 지원하는 효과는 표식에 의한 피해 상승이 전부. 그마저도 자신에게는
        <strong>
         6배
        </strong>
        로 적용된다.
        <a class="wiki-link-internal" href="/w/%EC%BD%9C%ED%8A%B8%20%ED%8C%8C%EC%9D%B4%EC%8A%A8(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="콜트 파이슨(소녀전선)">
         파이슨
        </a>
        과 비슷하지만, 자신의 화력(+패시브로 인한 아군 화력)을 상승시키는 파이슨과는 달리 적에게 표식을 쌓기 때문에 표식을 받은 적이 죽으면 효과가 사라지는 문제가 있다. 따라서 일반병보단 엘리트/보스전에서 효과를 제대로 볼 수 있는 스킬.
        <br/>
        <br/>
        표식을 3명에게 부여하는데 최대 3중첩이라는 걸 보아 적의 수가 셋보다 적을 경우 이미 부여한 적에게 다시 거는 것으로 보인다.
        <br/>
       </div>
      </div>
      <h3 class="wiki-heading">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <div class="wiki-heading-content">
       <div class="wiki-paragraph">
       </div>
      </div>
      <h2 class="wiki-heading">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="wiki-heading-content">
       <div class="wiki-paragraph">
       </div>
      </div>
      <h2 class="wiki-heading">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="wiki-heading-content">
       <div class="wiki-table-wrap" style="width:100%">
        <table class="wiki-table" style="background-color:#fff;width: 100%;">
         <tbody>
          <tr style="background-color:#eee;">
           <td colspan="2" style="width:16%; text-align:center;">
            <div class="wiki-paragraph">
             상황
            </div>
           </td>
           <td style="width:84%; text-align:center;">
            <div class="wiki-paragraph">
             대사
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             획득
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             접속
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             편성
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             로딩
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" rowspan="3" style="text-align:center;">
            <div class="wiki-paragraph">
             대화
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="1" style="text-align:center;">
            <li>[ahref]</li>[pkeyx]<li>[area1][keywordx]</li><li>[area1][mkey1]</li>
           </td>
           <td style="text-align:center;">
            <div class="wiki-paragraph">
             서약 후
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            출격[area1][keywordx]<li>[area1][keywordx]</li>[linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
             [linkx][linkx][pkeyx][area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             전투
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             공격
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             방어
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" rowspan="3" style="text-align:center;">
            <div class="wiki-paragraph">
             스킬사용
            </div>
           </td>
           <td style="text-align:right;">
            [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][pkeyx][linkx][linkx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1][area1][keywordx][pkeyx][area1][keywordx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1]
           </td>
          </tr>
          <tr>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           [ahref][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][linkx][ahref][linkx][linkx][linkx][area1][keywordx][area1][mkey1][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][pkeyx]
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             후퇴
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             MVP
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             지원출발
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             지원귀환
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             자동전투
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             강화
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             수리
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             제조완료
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             편제확대
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="text-align:center;">
            <div class="wiki-paragraph">
             서약
            </div>
           </td>
           <td style="text-align:right;">
            <div class="wiki-paragraph">
            </div>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
       <div class="wiki-paragraph">
       </div>
      </div>
      <h2 class="wiki-heading">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="wiki-heading-content">
       <ul class="wiki-list">
        <li>
         [area1][keywordx][pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
        </li>
        <li>
         <div class="wiki-paragraph">
          악명높은
          [ahref]
          
          과는 달리 총기-인체 비율이 상당히 정확하게 표현되어 있다.
          [ahref]
          
          은 최소 26cm에 달하는 대구경 권총인데 이 전술인형은 유아 체형이기에 자신과 각인된 권총을 제대로 감싸쥐지도 못한다(...). 중상 일러스트에서도 왼손은 총의 손잡이만, 오른손은 방아쇠만 겨우 당기고 있음을 확인할 수 있다.
         </div>
        </li>
        <li>
         <div class="wiki-paragraph">
          권총계 인형 중에서 구체적으로 '힘이 세다'라는 설정이 있어서인지, 위에 언급된 유아체형과는 정 반대로 인 게임상에선 잘 감싸쥐지도 않을 해당 권총을 왼손 파지한 뒤 한 손으로 쏘며, 심지어 스킬로 사속보너스까지 가지고 있다. 부관 대사에서도 사령관을 의자채로 들어올린다는 등 해당 면모를 잘 보여준다.
         </div>
        </li>
        <li>
         <div class="wiki-paragraph">
          자칭이 아닌 진짜 전직 아이돌 설정에 입수대사에서 지휘관을 프로듀서라고 부른 것 때문에 대사가 알려지자
          [ahref]
          
          드립이 나왔다. 이 바닥에서 프로듀서라 하면 십중팔구는
          [linkx]
          
          이기 때문.
         </div>
        </li>
        <li>
         <div class="wiki-paragraph">
          진짜
          [ahref]
          
          이라서 그런지
          [ahref]
          
          이나
          [linkx]
          
          과는 매우 대조된다
         </div>
        </li>
       </ul>
       <div class="wiki-paragraph">
       </div>
      </div>
      <h2 class="wiki-heading">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="wiki-heading-content">
       <div class="wiki-table-wrap table-center" style="width:100%">
        <table class="wiki-table" style="width: 100%;border: 2px solid #000000;">
         <tbody>
          <tr>
           <td colspan="3" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             <strong>
              <span class="wiki-size size-up-1">
               <span class="wiki-color" style="color:#FFFFFF">
                의 등장
               </span>
               <a class="wiki-link-internal" href="/w/%EC%A0%84%EC%88%A0%EC%9D%B8%ED%98%95" title="전술인형">
                <span class="wiki-color" style="color:#FFFFFF">
                 전술인형
                </span>
               </a>
              </span>
             </strong>
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="5" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0/HG" title="소녀전선/HG">
              <span class="wiki-image-align-normal" style="width:70px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="background-color:#ddd; width:10%; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              [linkx]
              
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/PPK(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="PPK(소녀전선)">
              PPK
             </a>
             ·
             <a class="wiki-link-internal" href="/w/M1911(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M1911(소녀전선)">
              M1911
             </a>
             <sup>
              改
             </sup>
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/MP-446(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="MP-446(소녀전선)">
              MP-446
             </a>
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/USP%20Compact(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="USP Compact(소녀전선)">
              USP Compact
             </a>
             ·
             <a class="wiki-link-internal" href="/w/Bren%20Ten(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="Bren Ten(소녀전선)">
              Bren Ten
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cef; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
             
            </div>
           </td>
           <td>
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/M9(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M9(소녀전선)">
              M9
             </a>
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/%EA%B8%80%EB%A1%9D%2017(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="글록 17(소녀전선)">
              글록 17
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/59%EC%8B%9D(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="59식(소녀전선)">
              59식
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/P226(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="P226(소녀전선)">
              P226
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/GSh-18(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="GSh-18(소녀전선)">
              GSh-18
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cf7; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
             
             [linkx]
             
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/%EC%8A%A4%ED%85%8C%EC%B8%A0%ED%82%A8(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="스테츠킨(소녀전선)">
              스테츠킨
             </a>
             ·
             <a class="wiki-link-internal" href="/w/Mk23(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="Mk23(소녀전선)">
              Mk23
             </a>
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#fd8; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
             
             [linkx]
             
             [linkx]
             
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][area1][keywordx][ahref][pkeyx][pkeyx][pkeyx][area1][keywordx][ahref][pkeyx][linkx]
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#F5C8FE; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EB%85%B8%EC%97%98(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="노엘(소녀전선)">
              노엘
             </a>
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/%ED%85%8C%EB%A0%88%EC%82%AC(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="테레사(소녀전선)">
              테레사
             </a>
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="5" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
            </div>
           </td>
           <td style="background-color:#ddd; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/MP40(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="MP40(소녀전선)">
              MP40
             </a>
             ·
             <a class="wiki-link-internal" href="/w/%EB%B2%A0%EB%A0%88%ED%83%80%2038%ED%98%95(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="베레타 38형(소녀전선)">
              베레타 38형
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/Spectre%20M4(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="Spectre M4(소녀전선)">
              Spectre M4
             </a>
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             ·
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cef; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
             [ahref]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td>
            <div class="wiki-paragraph">
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/PPS-43(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="PPS-43(소녀전선)">
              PPS-43
             </a>
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/FMG-9(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="FMG-9(소녀전선)">
              FMG-9
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/SCW(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="SCW(소녀전선)">
              SCW
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/MP41(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="MP41(소녀전선)">
              MP41
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cf7; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
              [area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][mkey1][area1][keywordx][pkeyx][area1][keywordx][linkx][linkx][ahref][pkeyx][area1][keywordx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/MP5(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="MP5(소녀전선)">
              MP5
             </a>
             <sup>
              改
             </sup>
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/UMP45(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="UMP45(소녀전선)">
              UMP45
             </a>
             <sup>
              改
             </sup>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/%EC%8B%9C%ED%94%84%EC%B9%B4(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="시프카(소녀전선)">
              시프카
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/%ED%97%88%EB%8B%88%EB%B1%83%EC%A0%80(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="허니뱃저(소녀전선)">
              허니뱃저
             </a>
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#fd8; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
             [linkx]
             
             [ahref]
             
             [linkx]
             
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%86%B0%EC%8A%A8(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="톰슨(소녀전선)">
              톰슨
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/SR-3MP(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="SR-3MP(소녀전선)">
              SR-3MP
             </a>
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/X95(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="X95(소녀전선)">
              X95
             </a>
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#F5C8FE; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EB%8F%84%EB%A1%9C%EC%8B%9C%20%ED%97%A4%EC%9D%B4%EC%A6%88(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="도로시 헤이즈(소녀전선)">
              도로시 헤이즈
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="5" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0/RF" title="소녀전선/RF">
              <span class="wiki-image-align-normal" style="width:70px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="background-color:#ddd; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/BM59(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="BM59(소녀전선)">
              BM59
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cef; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
             
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [linkx]
             
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/SV-98(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="SV-98(소녀전선)">
              SV-98
             </a>
             <sup>
              改
             </sup>
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/M1A1(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M1A1(소녀전선)">
              M1A1
             </a>
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/SSG%2069(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="SSG 69(소녀전선)">
              SSG 69
             </a>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/wz.29(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="wz.29(소녀전선)">
              wz.29
             </a>
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/OBR(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="OBR(소녀전선)">
              OBR
             </a>
             ·
             <a class="wiki-link-internal" href="/w/RT-20(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="RT-20(소녀전선)">
              RT-20
             </a>
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/%ED%8C%94%EC%BD%98(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="팔콘(소녀전선)">
              팔콘
             </a>
             ·
             <a class="wiki-link-internal" href="/w/T-CMS(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="T-CMS(소녀전선)">
              T-CMS
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cf7; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             [linkx]
             
             [ahref]
             
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [linkx]
             
             ·
             [ahref]
             
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/PTRD(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="PTRD(소녀전선)">
              PTRD
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/G28(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="G28(소녀전선)">
              G28
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#fd8; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
             
             [ahref]
             
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/%EB%A6%AC%EC%97%94%ED%95%84%EB%93%9C(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="리엔필드(소녀전선)">
              리엔필드
             </a>
             ·
             <a class="wiki-link-internal" href="/w/WA2000(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="WA2000(소녀전선)">
              WA2000
             </a>
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/DSR-50(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="DSR-50(소녀전선)">
              DSR-50
             </a>
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/%EC%B9%B4%EB%A5%B4%EC%B9%B4%EB%85%B8%20M91/38(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="카르카노 M91/38(소녀전선)">
              카르카노 M91/38
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/M200(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M200(소녀전선)">
              M200
             </a>
             ·
             <a class="wiki-link-internal" href="/w/QBU-88(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="QBU-88(소녀전선)">
              QBU-88
             </a>
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#F5C8FE; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EB%B8%8C%EB%A1%9C%EB%83%90(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="브로냐(소녀전선)">
              브로냐
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="6" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
            </div>
           </td>
           <td style="background-color:#ddd; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [linkx]
             
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/SIG-510(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="SIG-510(소녀전선)">
              SIG-510
             </a>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/63%EC%8B%9D(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="63식(소녀전선)">
              63식
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cef; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/StG44(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="StG44(소녀전선)">
              StG44
             </a>
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/OTs-12(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="OTs-12(소녀전선)">
              OTs-12
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/AR70(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="AR70(소녀전선)">
              AR70
             </a>
             ·
             <a class="wiki-link-internal" href="/w/6P62(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="6P62(소녀전선)">
              6P62
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/Model%20L(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="Model L(소녀전선)">
              Model L
             </a>
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="2" style="background-color:#cf7; text-align:center;">
            <div class="wiki-paragraph">
             [pkeyx][linkx][pkeyx][area1][keywordx]
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/AS%20Val(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="AS Val(소녀전선)">
              AS Val
             </a>
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/56-1%EC%8B%9D(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="56-1식(소녀전선)">
              56-1식
             </a>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/TAR-21(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="TAR-21(소녀전선)">
              TAR-21
             </a>
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/XM8(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="XM8(소녀전선)">
              XM8
             </a>
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/SAR-21(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="SAR-21(소녀전선)">
              SAR-21
             </a>
             ·
             <a class="wiki-link-internal" href="/w/EM-2(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="EM-2(소녀전선)">
              EM-2
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/M4%20SOPMOD%20II(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M4 SOPMOD II(소녀전선)">
              M4 SOPMOD II
             </a>
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/ST%20AR-15(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="ST AR-15(소녀전선)">
              ST AR-15
             </a>
             <sup>
              改
             </sup>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#fd8; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
             [linkx]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/OTs-14(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="OTs-14(소녀전선)">
              OTs-14
             </a>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/97%EC%8B%9D(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="97식(소녀전선)">
              97식
             </a>
             ·
             <a class="wiki-link-internal" href="/w/RFB(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="RFB(소녀전선)">
              RFB
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/AK-12(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="AK-12(소녀전선)">
              AK-12
             </a>
             ·
             <a class="wiki-link-internal" href="/w/AN-94(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="AN-94(소녀전선)">
              AN-94
             </a>
             ·
             <a class="wiki-link-internal" href="/w/MDR(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="MDR(소녀전선)">
              MDR
             </a>
             ·
             <a class="wiki-link-internal" href="/w/AUG(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="AUG(소녀전선)">
              AUG
             </a>
             ·
             <a class="wiki-link-internal" href="/w/K11(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="K11(소녀전선)">
              K11
             </a>
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/ACR(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="ACR(소녀전선)">
              ACR
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#F5C8FE; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="5" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
            </div>
           </td>
           <td style="background-color:#ddd; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/MG34(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="MG34(소녀전선)">
              MG34
             </a>
             ·
             <a class="wiki-link-internal" href="/w/DP28(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="DP28(소녀전선)">
              DP28
             </a>
             ·
             [ahref]
             
             ·
             [linkx]
             
             <sup>
              改
             </sup>
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cef; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             [ahref]
             
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             <sup>
              改
             </sup>
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cf7; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             [ahref]
             
             [linkx]
             
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/M1918(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M1918(소녀전선)">
              M1918
             </a>
             <sup>
              改
             </sup>
             ·
             <a class="wiki-link-internal" href="/w/M60(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M60(소녀전선)">
              M60
             </a>
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/%EC%87%BC%EC%83%A4(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="쇼샤(소녀전선)">
              쇼샤
             </a>
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#fd8; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [linkx]
             
             [linkx]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/88%EC%8B%9D(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="88식(소녀전선)">
              88식
             </a>
             ·
             <a class="wiki-link-internal" href="/w/%EB%A3%A8%EC%9D%B4%EC%8A%A4(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="루이스(소녀전선)">
              루이스
             </a>
             ·
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/Kord(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="Kord(소녀전선)">
              Kord
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#F5C8FE; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_extra_star.png" rel="nofollow" title="파일:gf_icon_extra_star.png">
              <span class="wiki-image-align-normal" style="width:30px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="4" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0/SG" title="소녀전선/SG">
              <span class="wiki-image-align-normal" style="width:70px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="background-color:#cef; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             [linkx]
             
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             <a class="wiki-link-internal" href="/w/KS-23(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="KS-23(소녀전선)">
              KS-23
             </a>
             ·
             <a class="wiki-link-internal" href="/w/RMB-93(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="RMB-93(소녀전선)">
              RMB-93
             </a>
             ·
             <a class="wiki-link-internal" href="/w/M1897(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M1897(소녀전선)">
              M1897
             </a>
             ·
             <a class="wiki-link-internal" href="/w/NS2000(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="NS2000(소녀전선)">
              NS2000
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#cf7; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
             [ahref]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [ahref]
             
             ·
             [ahref]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/M1014(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M1014(소녀전선)">
              M1014
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#fd8; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
             [ahref]
             
             [linkx]
             
             [ahref]
             
             <a class="wiki-link-internal" href="/w/%ED%8C%8C%EC%9D%BC:gf_icon_star.png" rel="nofollow" title="파일:gf_icon_star.png">
              <span class="wiki-image-align-normal" style="width:13px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/KSG(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="KSG(소녀전선)">
              KSG
             </a>
             ·
             <a class="wiki-link-internal" href="/w/M1887(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="M1887(소녀전선)">
              M1887
             </a>
             ·
             <a class="wiki-link-internal" href="/w/Saiga-12(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="Saiga-12(소녀전선)">
              Saiga-12
             </a>
             ·
             <a class="wiki-link-internal" href="/w/S.A.T.8(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="S.A.T.8(소녀전선)">
              S.A.T.8
             </a>
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/FP-6(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="FP-6(소녀전선)">
              FP-6
             </a>
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#F5C8FE; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [linkx]
             
             ·
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="3" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0/%EC%A4%91%EC%9E%A5%EB%B9%84%EB%B6%80%EB%8C%80" title="소녀전선/중장비부대">
              <strong>
               <span class="wiki-color" style="color:#ffffff">
                중장비 부대
               </span>
              </strong>
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td rowspan="3" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
            </div>
           </td>
           <td style="background-color:#ffffff; text-align:center;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0/%EC%A4%91%EC%9E%A5%EB%B9%84%EB%B6%80%EB%8C%80#ATW" title="소녀전선/중장비부대">
              <span class="wiki-image-align-normal" style="width:50px;">
               <span class="wiki-image-wrapper" style="width: 100%;">
                <noscript>
                </noscript>
               </span>
              </span>
             </a>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [linkx]
             
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#ffffff; text-align:center;">
            <div class="wiki-paragraph">
             [linkx]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             <a class="wiki-link-internal" href="/w/AGS-30(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="AGS-30(소녀전선)">
              AGS-30
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td style="background-color:#ffffff; text-align:center;">
            <div class="wiki-paragraph">
             [ahref]
             
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [ahref]
             
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="3" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             <strong>
              <span class="wiki-color" style="color:#ffffff">
               미등장
              </span>
             </strong>
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             <span class="wiki-color" style="color:#FFFFFF">
              <strong>
               더미 데이터
              </strong>
              <sup>
               1
              </sup>
             </span>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
             
             ·
             [linkx]
             
             ·
             <a class="wiki-link-internal" href="/w/KGP-9(%EC%86%8C%EB%85%80%EC%A0%84%EC%84%A0)" title="KGP-9(소녀전선)">
              KGP-9
             </a>
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="2" style="background-color:#000000; text-align:center;">
            <div class="wiki-paragraph">
             <span class="wiki-color" style="color:#FFFFFF">
              <strong>
               추가 예정
              </strong>
              <sup>
               2
              </sup>
             </span>
            </div>
           </td>
           <td style="text-align:left;">
            <div class="wiki-paragraph">
             [ahref]
              [area1][mkey1]<li>[area1][mkey1]</li><li>[area1][keywordx]</li>
             
             ·
             [linkx]
             
            </div>
           </td>
          </tr>
          <tr>
           <td colspan="3" style="background-color:#000000; text-align:left;">
            <div class="wiki-paragraph">
             <sub>
              <span class="wiki-color" style="color:#FFFFFF">
               <sup>
                改
               </sup>
               마인드맵 업그레이드가 가능한 전술인형
              </span>
             </sub>
             <br/>
             <sub>
              <span class="wiki-color" style="color:#FFFFFF">
               <sup>
                1
               </sup>
               공식적으로 추가가 확정되지는 않았지만 내부 데이터 등으로 존재가 확인된 경우
              </span>
             </sub>
             <br/>
             <sub>
              <span class="wiki-color" style="color:#FFFFFF">
               <sup>
                2
               </sup>
               공식 매체나 방송, 정식 공개된 실루엣 등을 통해 추가가 확정된 경우
              </span>
             </sub>
            </div>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
      </div>
      <div class="wiki-macro-footnote">
       <span class="footnote-list">
        <span class="target" id="fn-1">
        </span>
        [linkx]
        
        무대 위를 자주 언급하기도 하고, 첫 소개 때 무심결에
        <strong>
         프로듀서
        </strong>
        라고 언급하는 것을 보아
        [ahref]
        
        계열에서 활동하던 인형으로 추정된다.
       </span>
       <span class="footnote-list">
        <span class="target" id="fn-2">
        </span>
        [linkx]
        
        Anmi가 그렸다는 사실 하나만으로 정식 출시 전에 이미 별명이 정해졌다. 심지어 돼저트 이글이라고 불리기까지 한다.
       </span>
      </div>
     </div>
     <iframe frameborder="0" height="100" id="ad-powerlink-pc" marginheight="0" marginwidth="0" scrolling="no" src="//namu.live/static/ad/powerlink.html?v=18" width="100%">
     </iframe>
     <iframe frameborder="0" height="175" id="ad-powerlink-mobile" marginheight="0" marginwidth="0" scrolling="no" src="//namu.live/static/ad/powerlink_mobile.html?v=18" width="100%">
     </iframe>
    </div>
    <footer>
     <p>
      <br/>
      이 저작물은
      [linkx]
      
      에 따라 이용할 수 있습니다. (단, 라이선스가 명시된 일부 문서 및 삽화 제외)
      <br/>
      기여하신 문서의 저작권은 각 기여자에게 있으며, 각 기여자는 기여하신 부분의 저작권을 갖습니다.
      <br/>
      <br/>
      나무위키는 백과사전이 아니며 검증되지 않았거나, 편향적이거나, 잘못된 서술이 있을 수 있습니다.
      <br/>
      나무위키는 위키위키입니다. 여러분이 직접 문서를 고칠 수 있으며, 다른 사람의 의견을 원할 경우 직접 토론을 발제할 수 있습니다.
     </p>
    </footer>
   </article>
  </div>
  <div class="footer-wrapper">
   <div class="live-list-card mobile-live-bottom-list" data-count="5" data-slug="headline">
    <h6>
     헤드라인 최신글
    </h6>
    <div class="link-table">
     [linkx]
     
    </div>
    <a class="more-link" href="/b/headline">
     [더 보기]
    </a>
   </div>
   <div class="ad-bottom">
    <ins class="adsbygoogle" data-ad-client="ca-pub-4481395322450420" data-ad-format="auto" data-ad-slot="2145080446" data-full-width-responsive="true" style="display:block">
    </ins>
   </div>
   <footer class="footer">
    <p>
     namu.wiki
     <span class="sep">
     </span>
     <a href="i">
      Contáctenos
     </a>
     <span class="sep">
     </span>
     <a href="/Policy">
      Términos de uso
     </a>
     <span class="sep">
     </span>
     Operado por umanle S.R.L.
     <span class="sep">
     </span>
     Hecho con <3 en Asunción, República del Paraguay
    </p>
    <p>
     Su zona horaria es
     <span id="timezone">
     </span>
     <span class="sep">
     </span>
     Impulsado por
     <i>
      the seed engine
     </i>
    </p>
   </footer>
  </div>
  <ul class="nav-control">
   <li>
    [linkx]
    
   </li>
   <li>
    [linkx]
    
   </li>
  </ul>
  <div class="modal fade" id="shortcutHelpModal">
   <div class="modal-dialog">
    <div class="modal-content">
     <div class="modal-header">
      <button aria-label="Close" class="close" data-dismiss="modal" type="button">
       <span aria-hidden="true">
        ×
       </span>
       <span class="sr-only">
        Close
       </span>
      </button>
      <h5 class="modal-title">
       단축키 도움말
      </h5>
     </div>
     <div class="modal-body">
      <dl class="dl-horizontal">
       <dt class="col-sm-3">
        <b>
         F
        </b>
        ront Gate
       </dt>
       <dd class="col-sm-9">
        대문
       </dd>
       <dt class="col-sm-3">
        Recent
        <b>
         C
        </b>
        hanges
       </dt>
       <dd class="col-sm-9">
        최근 변경
       </dd>
       <dt class="col-sm-3">
        Recent
        <b>
         D
        </b>
        iscuss
       </dt>
       <dd class="col-sm-9">
        최근 토론
       </dd>
       <dt class="col-sm-3">
        R
        <b>
         A
        </b>
        ndom
       </dt>
       <dd class="col-sm-9">
        랜덤 문서
       </dd>
       <dt class="col-sm-3">
        <b>
         Shift
        </b>
        +
        <b>
         S
        </b>
        earch
       </dt>
       <dd class="col-sm-9">
        검색
       </dd>
       <dt class="col-sm-3">
        <b>
         E
        </b>
        dit
       </dt>
       <dd class="col-sm-9">
        문서 편집[linkx][area1][keywordx][linkx]<li>[area1][mkey1]</li><li>[area1][keywordx]</li>
       </dd>
       <dt class="col-sm-3">
        <b>
         ?
        </b>
       </dt>
       <dd class="col-sm-9">
        단축키 도움말
       </dd>
      </dl>
     </div>
    </div>
   </div>
  </div>
  <div class="modal fade" data-backdrop="false" id="searchModal">
   <div class="modal-dialog modal-sm">
    <div class="modal-content">
     <div class="modal-header">
      <button aria-label="Close" class="close" data-dismiss="modal" type="button">
       <span aria-hidden="true">
        ×
       </span>
       <span class="sr-only">
        Close
       </span>
      </button>
      <h6 class="modal-title">
       검색
      </h6>
     </div>
     <div class="modal-body">
      <div class="input-group search-box">
       <span class="input-group-btn">
        <button class="btn btn-secondary" id="searchBtn" style="margin-left: 0;" type="button">
         <span class="icon ion-search">
         </span>
        </button>
        <button class="btn btn-secondary" id="goBtn" type="button">
         <span class="icon ion-arrow-right-c">
         </span>
        </button>
       </span>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="modal" id="footnoteModal">
   <div class="modal-dialog" role="document">
    <div class="modal-content">
     <div class="modal-header">
      <h5 class="modal-title">
       각주:
      </h5>
     </div>
     <div class="modal-body">
     </div>
     <div class="modal-footer">
      <button class="btn btn-block" data-dismiss="modal" type="button">
       닫기
      </button>
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0387
  </b>
 </body>
</html>
|<---