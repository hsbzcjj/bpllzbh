--->|<!DOCTYPE html>
<html>
 <head>
  <meta content="no-cache" http-equiv="Cache-Control"/>
  <meta content="gzip, deflate" http-equiv="Accept-Encoding">
   <meta content="no-cache" http-equiv="Pragma"/>
   <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
    <title>
     [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
    </title>
    <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
    <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
    <meta charset="utf-8"/>
    <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
    <meta content="width=device-width, initial-scale=1" name="viewport"/>
   </meta>
  </meta>
 </head>
 <body>
  <div>
   <div id="gnbBanrDiv" style="background:#000">
    <div class="gnb_bnr_html" id="_commonTopBanner">
    </div>
   </div>
  </div>
  <div class="skin-bg-basic" id="backgroundarea">
   <div class="content_box">
    [area1][keywordx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][keywordx][area1][keywordx][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx]
   </div>
   <div id="gn-header">
    <div class="cont_real_area2">
     <header>
      <div class="site-header-gnb-wrap">
       <div class="content_box">
        <div class="site-masthead">
         <div class="head-left">
          <div class="branch_list">
           <div id="branch-dropdown">
            <ul>
             <li class="has-sub">
              <a class="parenttitle" href="#">
               <span>
                지역보기
                <i class="nav-arrow">
                </i>
               </span>
              </a>
              <ul class="childarea">
               <li>
                [linkx]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                <a href="/?1*33*.www.koreadaily.com/index_local_branch.html?branch=NY">
                 New York
                </a>
               </li>
               <li>
                <a href="/?1*34*.www.koreadaily.com/index_local_branch.html?branch=CH">
                 Chicago
                </a>
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                <a href="/?1*42*.www.koreadaily.com/index_local_branch.html?branch=DA">
                 Texas
                </a>
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                <a href="/?1*79*.www.koreadaily.com/index_local_branch.html?branch=VA">
                 Vancouver
                </a>
               </li>
               <li>
                [linkx]
                
               </li>
               <li class="last">
                [ahref]
                
               </li>
              </ul>
             </li>
            </ul>
           </div>
          </div>
          <div class="clear">
          </div>
         </div>
         <div class="head-right">
          <div class="paper-subscript-box">
           <a href="/epaper/viewer.aspx" target="_blank">
            전자신문
           </a>
          </div>
          <div class="followsns">
           <ul>
            <li class="line">
             [linkx]
             
            </li>
            <li class="line">
             <a href="/?1*61*.twitter.com/koreadailycom" target="_blank">
              <i class="fab fa-twitter">
              </i>
             </a>
            </li>
            <li class="line">
             [linkx]
             
            </li>
           </ul>
          </div>
          <div class="myarea">
           <span>
            [linkx]
            
           </span>
           <span>
            <a href=")">
             회원가입
            </a>
           </span>
          </div>
          <div class="clear">
          </div>
         </div>
         <div class="head-fill">
          <div class="brand-large">
          </div>
         </div>
        </div>
        <div class="clear">
        </div>
       </div>
       <div class="clear">
       </div>
      </div>
      <div class="clear">
      </div>
      <div class="site-header-inner-wrap">
       <div class="content_box">
        <div class="site-masthead">
         <div class="head-left">
          <div class="weather_area">
           <p class="location">
            Los Angeles
           </p>
           <div class="icon-degree">
            <div class="degree">
             67.0°
            </div>
           </div>
           <p class="datetime">
            2019.08.12(Mon)
           </p>
          </div>
         </div>
         <div class="head-fill" id="brand-logo">
          <div class="brand-large logo">
           <a href="/index.html?branch=HOME">
           </a>
          </div>
         </div>
         <div class="head-right">
          <div class="search_area">
           <form accept-charset="utf-8" action="/search_result.asp" method="get" name="frmSearch">
            <div class="search">
            </div>
            <div class="paper-subscript">
            </div>
           </form>
           <div class="clear">
           </div>
          </div>
         </div>
         <div class="clear">
         </div>
        </div>
        <div class="clear">
        </div>
       </div>
      </div>
     </header>
     <div class="menu-bar-area">
      <div class="content_box" id="head">
       <nav class="navbar">
        <ul id="mega_menu">
         <li>
          <div id="total_navigation">
           <ul>
            <li class="has-sub">
             [linkx]
             
             <div class="childarea dropdown-menu">
              <ul>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [ahref]
                  
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=money&amp;branch=HOME">
                    부동산/머니
                   </a>
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=society&amp;branch=HOME">
                    사회/정치
                   </a>
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=education&amp;branch=HOME">
                    교육
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=lifenleisure&amp;branch=HOME">
                    라이프/레저
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [ahref]
                  
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  <a href="/?1*116*.plusnews.koreadaily.com">
                   PlusNews
                  </a>
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*116*.plusnews.koreadaily.com/category/living/">
                    LIVING
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*116*.plusnews.koreadaily.com/category/video/">
                    VIDEO
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [ahref]
                  
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*117*.college.koreadaily.com/category/food/">
                    FOOD
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [ahref]
                  
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  <a href="/?1*55*.ktown.koreadaily.com/">
                   HelloKtown
                  </a>
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   <a href="/?1*55*.ktown.koreadaily.com/ad_job/recruit">
                    구인
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*55*.ktown.koreadaily.com/ad_property/propertylist">
                    부동산
                   </a>
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*55*.ktown.koreadaily.com/ad_car/carlist">
                    자동차
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [linkx]
                  
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   <a href="/?1*52*.blog.koreadaily.com/view/post_list.html">
                    테마별 새글
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [linkx]
                  
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*53*.club.koreadaily.com/main/ranking.asp">
                    클럽랭킹
                   </a>
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*53*.club.koreadaily.com/cafe_make/cafe_make.asp">
                    클럽만들기
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  <a href="/?1*114*.hotdeal.koreadaily.com">
                   핫딜
                  </a>
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/?1*114*.hotdeal.koreadaily.com/etc/customer_support.asp">
                    고객센터
                   </a>
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [linkx]
                  
                 </p>
                </div>
                <div class="submenulist">
                 <ul class="menu-list-ul">
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   [ahref]
                   
                  </li>
                  <li class="menu-main-category">
                   [linkx]
                   
                  </li>
                  <li class="menu-main-category">
                   <a href="/etc/customer/stop.asp">
                    배달 임시 중지 요청
                   </a>
                  </li>
                  <li class="menu-main-category">
                   <a href="/etc/customer/ad.asp">
                    광고문의
                   </a>
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <div class="submenu_title_area">
                 <p class="section_title">
                  <a href="/?1*58*.autos.koreadaily.com">
                   온더로드
                  </a>
                 </p>
                </div>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [linkx]
                  
                 </p>
                </div>
                <div class="submenu_title_area">
                 <p class="section_title">
                  [linkx]
                  
                 </p>
                </div>
               </li>
              </ul>
             </div>
            </li>
           </ul>
          </div>
         </li>
         <li>
          <div class="menu-dropdownst">
           [linkx]
           
           <div class="menu-dropdown-content">
            <ul>
             <li>
              <a href="/?1*50*.www.koreadaily.com/news/list.asp?branch=HOME">
               최신기사
              </a>
             </li>
             <li>
              <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=economy&amp;branch=HOME">
               경제/IT
              </a>
             </li>
             <li>
              <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=emigration&amp;branch=HOME">
               이민/비자
              </a>
             </li>
             <li>
              <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=money&amp;branch=HOME">
               부동산/머니
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/?1*50*.www.koreadaily.com/news/list.asp?category=education&amp;branch=HOME">
               교육
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/news/video_list.asp">
               비디오
              </a>
             </li>
             <li>
              <a href="/?1*130*.www.koreadaily.com/news/opinionlist.asp?category=opinion&amp;branch=HOME">
               오피니언
              </a>
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li>
          <div class="menu-dropdownst">
           [linkx]
           
           <div class="menu-dropdown-content">
            <ul>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/?1*116*.plusnews.koreadaily.com/category/entertainment">
               ENTERTAINMENT
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/?1*116*.plusnews.koreadaily.com/category/video/">
               VIDEO
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li>
          <div class="menu-dropdownst">
           [ahref]
           
           <div class="menu-dropdown-content">
            <ul>
             <li>
              <a href="/?1*117*.college.koreadaily.com/category/college/">
               COLLEGE NEWS
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/?1*117*.college.koreadaily.com/category/people/">
               PEOPLE
              </a>
             </li>
             <li>
              <a href="/?1*117*.college.koreadaily.com/category/travel/">
               TRAVEL
              </a>
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li class="devide">
         </li>
         <li class="other-service">
          <div class="menu-dropdownst">
           [linkx]
           
           <div class="menu-dropdown-content">
            <ul>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/?1*55*.ktown.koreadaily.com/ad_car/carlist">
               자동차
              </a>
             </li>
             <li>
              <a href="/?1*55*.ktown.koreadaily.com/ad_proshop/proshoplist">
               전문업체
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/?1*55*.ktown.koreadaily.com/community/towninfo/">
               타운광고
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li class="other-service">
          <div class="menu-dropdownst">
           [linkx]
           
           <div class="menu-dropdown-content">
            <ul>
             <li>
              <a href="/?1*52*.blog.koreadaily.com/view/post_list.html">
               테마별 새글
              </a>
             </li>
             <li>
              <a href="/?1*52*.blog.koreadaily.com/news/index.html?med_type=A">
               블로그 뉴스
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/?1*52*.blog.koreadaily.com/makeblog/blog_power.html">
               베스트블로그
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li class="other-service">
          <div class="menu-dropdownst">
           [ahref]
           
           <div class="menu-dropdown-content">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/?1*51*.ask.koreadaily.com/ask/ask_introduce.asp">
               전문가 소개
              </a>
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li class="other-service">
          <div class="menu-dropdownst">
           <a class="menu-dropbtn" href="/?1*53*.club.koreadaily.com/">
            클럽
           </a>
           <div class="menu-dropdown-content">
            <ul>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/?1*53*.club.koreadaily.com/main/ranking.asp">
               클럽랭킹
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li class="other-service">
          <div class="menu-dropdownst">
           [linkx]
           
           <div class="menu-dropdown-content">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/?1*114*.hotdeal.koreadaily.com/etc/customer_support.asp">
               고객센터
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </li>
         <li class="outlink-items">
          [ahref]
          
          [linkx]
          
          [linkx]
          
         </li>
        </ul>
       </nav>
       <div class="clear">
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="content_box">
    <div id="bigdayarea">
    </div>
    <div class="cont_real_area">
     <div class="wrapper">
      <div>
       <div class="text_center">
        <div id="div-gpt-ad-1510607750279-1">
        </div>
       </div>
      </div>
      <section class="ma_top35" id="first-section">
       <div class="news-duo">
        <div class="cp-area cp-area-major">
         <div class="news-area">
          <article class="headline-article" id="headline">
           <p class="title">
            [linkx]
            
           </p>
           <div class="ma_top10">
            <div class="embed_media">
             [linkx]
             
            </div>
            <div class="trb_text">
             <p class="desc">
              <a href="/news/read.asp?art_id=7508314" target="_self">
               제 2의 한인 LA시의원이 탄생할 것인가. 결전의 날이 밝았다.  LA시의회 제12지구 보궐선거 결선투표가 오늘(13일) 오전
              </a>
             </p>
             <ul class="small_text_list">
              <li>
               [linkx]
               
              </li>
             </ul>
            </div>
           </div>
          </article>
          <div class="clear">
          </div>
          <article class="photo-article">
           <div class="embed_media">
            [linkx]
            
           </div>
           <div class="trb_text">
            <p class="title">
             <a href="/news/read.asp?art_id=7508307" target="_self">
              "영주권이냐 복지냐" 선택 강요
             </a>
            </p>
            <ul class="small_text_list">
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </article>
          <div class="clear">
          </div>
          <article class="photo-article">
           <div class="embed_media">
            [ahref]
            
           </div>
           <div class="trb_text">
            <p class="title">
             [ahref]
             
            </p>
            <p class="desc">
             [ahref]
             
            </p>
            <ul class="small_text_list">
            </ul>
           </div>
          </article>
          <div class="clear">
          </div>
          <section class="ma_top15" id="newslist">
           <div class="txt-container">
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             한인 모자 살해범 21년만에 재판[area1][mkey1]<li>[linkx]</li><li>[ahref]</li><li>[linkx]</li>
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
           </div>
          </section>
          <article class="photo-article">
           <div class="embed_media">
            [linkx]
            
           </div>
           <div class="trb_text">
            <p class="title">
             [ahref]
             
            </p>
            <ul class="small_text_list">
             <li>
              <a href="/news/read.asp?art_id=7508308" target="_self">
               '실버타운' 얼마나 아시나요
              </a>
             </li>
            </ul>
           </div>
          </article>
          <div class="clear">
          </div>
          <section class="ma_top15" id="newslist">
           <div class="txt-container">
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
           </div>
          </section>
          <article class="photo-article">
           <div class="embed_media">
            <a class="pic" href="/news/read.asp?art_id=7508255" target="_self">
            </a>
           </div>
           <div class="trb_text">
            <p class="title">
             [ahref]
             
            </p>
            <p class="desc">
             [ahref]
             
            </p>
            <ul class="small_text_list">
             <li>
              <a href="" target="_self">
              </a>
             </li>
            </ul>
           </div>
          </article>
          <div class="clear">
          </div>
          <section class="ma_top15" id="newslist">
           <div class="txt-container">
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7508101" target="_self">
              엡스타인 저승길 쫓아간 검찰 "수사 계속"
             </a>
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7505511" target="_self">
              포에버21 자금 압박 심각한 수준
             </a>
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7507565" target="_self">
              제네시스 예술 교육 기부금 35만불
             </a>
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7506856" target="_self">
              트럼프 “가미카제, 조국 사랑으로 날아” 찬양
             </a>
            </p>
           </div>
          </section>
          <article class="photo-article engnews">
           <div class="embed_media">
            <a class="pic" href="/?1*147*.english.koreadaily.com/%ec%82%ac%ec%9d%b4-%ec%a2%8b%ea%b2%8c-%ec%a7%80%eb%82%b4-%ec%98%81%ec%96%b4%eb%a1%9c-%ed%83%80%ec%9d%b4%eb%a5%b4%ea%b8%b0/" target="_self">
            </a>
           </div>
           <div class="trb_text">
            <p class="title">
             <a href="/?1*147*.english.koreadaily.com/%ec%82%ac%ec%9d%b4-%ec%a2%8b%ea%b2%8c-%ec%a7%80%eb%82%b4-%ec%98%81%ec%96%b4%eb%a1%9c-%ed%83%80%ec%9d%b4%eb%a5%b4%ea%b8%b0/" style="white-space: pre-wrap;" target="_self">
              <span class="label-only">
               오늘의 생활영어
              </span>
              <br/>
              ‘사이 좋게 지내’ 영어로 타이르기
             </a>
            </p>
           </div>
          </article>
          <div class="clear">
          </div>
          <section class="ma_top15" id="newslist">
           <div class="txt-container">
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7506952" target="_self">
              양념 코리언 바베큐 4종세트 LA 한인타운내 총알 배송
             </a>
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7508250" target="_self">
              PGA투어, 늑장 플레이 논란에 대책 마련 착수
             </a>
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
           </div>
          </section>
         </div>
         <div class="other-area">
          <div class="today-now">
           <p class="text-center titleimg">
           </p>
           <div class="relation-article">
            <li>
             <div class="dateinfo">
              00:39
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               [ahref]
               
              </p>
             </article>
            </li>
            <li>
             <div class="dateinfo">
              00:32
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               [ahref]
               
              </p>
             </article>
            </li>
            <li>
             <div class="dateinfo">
              00:31
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               <h1>
                <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
               </h1>
               [ahref]
               
              </p>
             </article>
            </li>
            <li>
             <div class="dateinfo">
              00:26
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               <a href="/?1*131*.www.koreadaily.com/news/read.asp?art_id=7509191">
                '깜찍발랄 화보 촬영' 노예림 "샷도, 마음도 올라오고 있어요"
               </a>
              </p>
             </article>
            </li>
            <li>
             <div class="dateinfo">
              00:19
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               <a href="/?1*131*.www.koreadaily.com/news/read.asp?art_id=7509159">
                리도카인 사용한 한의사...의협 "명백한 무면허 의료행위"
               </a>
              </p>
             </article>
            </li>
            <li>
             <div class="dateinfo">
              00:18
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               [ahref]
               
              </p>
             </article>
            </li>
            <li>
             <div class="dateinfo">
              00:18
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               [linkx]
               
              </p>
             </article>
            </li>
            <li>
             <div class="dateinfo">
              00:14
             </div>
             <article class="relation-list">
              <div class="icon">
              </div>
              <p class="small_heading">
               <a href="/?1*131*.www.koreadaily.com/news/read.asp?art_id=7509133">
                한의협 "한의사의 리도카인 사용은 합법, 전문의약품 사용 확대 추진"
               </a>
              </p>
             </article>
            </li>
           </div>
          </div>
          <div class="clear">
          </div>
          <div class="ma_top30">
           <div class="text-center adbox-bg">
            <div id="div-gpt-ad-1510607750279-8">
            </div>
           </div>
          </div>
          <div class="clear">
          </div>
          <section class="ma_top30" id="videonews">
           <h4 class="h4-section-title">
            비디오뉴스
            <span class="float_right ftsize13">
             <a class="more" href="/?1*101*.www.koreadaily.com/news/video_list.asp">
              더보기+
             </a>
            </span>
           </h4>
           <div class="duet card-news">
            <article>
             <div class="text-left imgarea">
              [linkx]
              
              [ahref]
              
             </div>
             <p class="small_title">
              [ahref]
              
             </p>
            </article>
            <article>
             <div class="text-left imgarea">
              [linkx]
              
              [linkx]
              
             </div>
             <p class="small_title">
              [ahref]
              
             </p>
            </article>
           </div>
           <div class="clear">
           </div>
          </section>
          <div class="clear">
          </div>
          <section class="ma_top25" id="opinionarea">
           <h4 class="h4-section-title">
            오피니언
            <span class="float_right ftsize13">
             [ahref]
             
            </span>
           </h4>
           <div class="ma_top15">
           </div>
           <div class="opinion">
            <div class="colpic_area">
             [linkx]
             
            </div>
            <div class="col-area">
             <p class="author">
              [ahref]
              
             </p>
             <p class="title">
              [ahref]
              
             </p>
            </div>
           </div>
           <div class="clear">
           </div>
           <div class="divider_opinion">
           </div>
           <div class="clear">
           </div>
           <div class="opinion">
            <div class="colpic_area">
             <a href="/?1*119*.www.koreadaily.com/news/read.asp?art_id=7507784" target="_self">
             </a>
            </div>
            <div class="col-area">
             <p class="author">
              [ahref]
              
             </p>
             <p class="title">
              [linkx]
              
             </p>
            </div>
           </div>
           <div class="clear">
           </div>
          </section>
          <div class="clear">
          </div>
          <section class="ma_top25" id="collegeinside">
           <h4 class="h4-section-title eng">
            CollegeInside
            <span class="float_right ftsize13">
             <a class="more" href="/?1*12*.college.koreadaily.com/">
              더보기+
             </a>
            </span>
           </h4>
           <div class="duet card-news">
            <article>
             <div class="text-left imgarea">
              <a href="/?1*12*.college.koreadaily.com/%eb%af%b8%ea%b5%ad%ec%97%90%ec%84%9c%eb%8f%84-%ed%95%9c%ea%b5%ad-%ec%a0%9c%ed%92%88-%ec%82%b4-%ec%88%98-%ec%9e%88%eb%8a%94-%ec%82%ac%ec%9d%b4%ed%8a%b8-5%ea%b0%9c/" target="_blank">
              </a>
             </div>
             <p class="small_title">
              <a href="/%eb%af%b8%ea%b5%ad%ec%97%90%ec%84%9c%eb%8f%84-%ed%95%9c%ea%b5%ad-%ec%a0%9c%ed%92%88-%ec%82%b4-%ec%88%98-%ec%9e%88%eb%8a%94-%ec%82%ac%ec%9d%b4%ed%8a%b8-5%ea%b0%9c/" target="_blank">
               미국에서도 한국제품 살 수 있는 사이트 5
              </a>
             </p>
            </article>
            <article>
             <div class="text-left imgarea">
              [linkx]
              
             </div>
             <p class="small_title">
              [ahref]
              
             </p>
            </article>
           </div>
           <div class="clear">
           </div>
          </section>
         </div>
         <div class="clear">
         </div>
         <div class="text-center ma_top30">
          <div id="div-gpt-ad-1510607750279-5">
          </div>
         </div>
         <div class="clear">
         </div>
         <div class="ma_top40">
          <section class="bg-light-gray2 sponserad">
           [linkx]
           
           <div class="item_slide_photonews_mt">
            <div class="owl-carousel item_slide_normal_st">
             <div class="slide_mainst item">
              <div class="img_box sponsored">
               [ahref]
               
              </div>
              <p class="title">
               [ahref]
               
              </p>
             </div>
             <div class="slide_mainst item">
              <div class="img_box sponsored">
               [ahref]
               
              </div>
              <p class="title">
               [linkx]
               
              </p>
             </div>
             <div class="slide_mainst item">
              <div class="img_box sponsored">
               [ahref]
               
              </div>
              <p class="title">
               [ahref]
               
              </p>
             </div>
             <div class="slide_mainst item">
              <div class="img_box sponsored">
               [ahref]
               
              </div>
              <p class="title">
               [ahref]
               
              </p>
             </div>
             <div class="slide_mainst item">
              <div class="img_box sponsored">
               [linkx]
               
              </div>
              <p class="title">
               <a href="/?1*98*.plusnews.koreadaily.com/%ec%89%bd%ea%b2%8c-%eb%a7%8c%eb%93%9c%eb%8a%94-%ea%b3%a0%ea%b8%89-%ec%9a%94%eb%a6%ac-%ec%9a%b0%eb%8b%88-%ed%8c%8c%ec%8a%a4%ed%83%80/" target="_blank">
                <span class="label-only">
                 모던 수라간
                </span>
                쉽게 만드는 고급 요리, 우니 파스타
               </a>
              </p>
             </div>
             <div class="slide_mainst item">
              <div class="img_box sponsored">
               [ahref]
               
              </div>
              <p class="title">
               [linkx]
               
              </p>
             </div>
            </div>
           </div>
           <div class="clear">
           </div>
          </section>
         </div>
        </div>
        <div class="cp-area cp-area-minor">
         <div>
          <div class="text-center">
           <div id="div-gpt-ad-1510607750279-2">
            [area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][ahref][linkx][pkeyx][area1][mkey1][area1][keywordx][area1][mkey1][ahref][pkeyx][pkeyx][pkeyx][area1][mkey1][ahref]
           </div>
          </div>
          <div class="clear">
          </div>
          <section class="ma_top20 imgbanner">
           <div class="float_left">
            [ahref]
            
           </div>
           <div class="ma_left10 float_left">
            [linkx]
            
           </div>
          </section>
          <div class="clear">
          </div>
          <section class="ma_top20 most-news_tabs-area">
           <div class="tabs mostnews" data-tabs="">
            <div class="tab">
             <label for="tab-1">
              많이 본 뉴스
             </label>
             <div class="tab__content">
              <div class="most_popular_subpage">
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  1
                 </div>
                 <div class="headline">
                  <li>[area1][mkey1]</li>[ahref]<li>[ahref]</li>[linkx]<li>[area1][mkey1]</li>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  2
                 </div>
                 <div class="headline">
                  <p class="title">
                   <a href="/?1*16*.www.koreadaily.com/news/read.asp?art_id=7507027">
                    트럼프, 새 이민정책 발표···"美복지혜택 축내는 저소득층 안 받겠다"
                   </a>
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  3
                 </div>
                 <div class="headline">
                  <p class="title">
                   [linkx]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  4
                 </div>
                 <div class="headline">
                  <p class="title">
                   [ahref]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  5
                 </div>
                 <div class="headline">
                  <p class="title">
                   [linkx]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  6
                 </div>
                 <div class="headline">
                  <p class="title">
                   [linkx]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  7
                 </div>
                 <div class="headline">
                  <p class="title">
                   [linkx]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  8
                 </div>
                 <div class="headline">
                  <p class="title">
                   [ahref]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  9
                 </div>
                 <div class="headline">
                  <p class="title">
                   <a href="/?1*16*.www.koreadaily.com/news/read.asp?art_id=7507930">
                    주택 풀장으로 돈 번다…공유 앱 '스윔플리' 인기
                   </a>
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  10
                 </div>
                 <div class="headline">
                  <p class="title">
                   [ahref]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-2">
              댓글 많은 뉴스
             </label>
             <div class="tab__content">
              <div class="most_comment_subpage">
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  1
                 </div>
                 <div class="headline">
                  <p class="title">
                   <a href="/?1*17*.www.koreadaily.com/news/read.asp?art_id=7506405">
                    北 편들고, 文 조롱하고···지금껏 경험 못한 이상한 한미동맹
                   </a>
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  2
                 </div>
                 <div class="headline">
                  <p class="title">
                   [ahref]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  3
                 </div>
                 <div class="headline">
                  <p class="title">
                   [linkx]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  4
                 </div>
                 <div class="headline">
                  <p class="title">
                   [linkx]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  5
                 </div>
                 <div class="headline">
                  <p class="title">
                   [ahref]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  6
                 </div>
                 <div class="headline">
                  <p class="title">
                   <a href="/?1*17*.www.koreadaily.com/news/read.asp?art_id=7504114">
                    “참 웃기는 나라”…美월마트 '폭력게임 철수, 총 그대로' 논란
                   </a>
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  7
                 </div>
                 <div class="headline">
                  <p class="title">
                   [linkx]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  8
                 </div>
                 <div class="headline">
                  <p class="title">
                   [ahref]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  9
                 </div>
                 <div class="headline">
                  <p class="title">
                   <a href="/?1*17*.www.koreadaily.com/news/read.asp?art_id=7506718">
                    보복공격 해놓고···日 "韓 화이트국 배제, 보복이면 WTO위반"
                   </a>
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
               <div class="most-read-withnumber">
                <div class="text_box">
                 <div class="number">
                  10
                 </div>
                 <div class="headline">
                  <p class="title">
                   [ahref]
                   
                  </p>
                 </div>
                </div>
                <div class="clear">
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </section>
          <div class="clear">
          </div>
          <div class="ma_top20">
           <div class="text-center adbox-bg">
            <div id="div-gpt-ad-1535488402440-0">
            </div>
           </div>
          </div>
          <section class="ma_top20">
           <h4 class="h4-section-title">
            연예/포토
            <span class="float_right ftsize13">
             [ahref]
             
            </span>
           </h4>
           <div class="entpic_box">
           </div>
           <tornado:component componentid="1">
            <div class="pictorial">
             <tornado:component componentid="1">
              <div class="pictorial">
               <div class="view" data-component="1" id="view">
                <div id="window">
                 [linkx]
                 
                </div>
                <div class="txtBox" id="txtBox">
                 <span class="txt">
                  [ahref]
                  
                 </span>
                 <span class="bg">
                 </span>
                </div>
               </div>
               <ul class="th_list" id="list_thumb">
                <li class="first on" id="thumb_class_0" rel="0">
                 <a href="/?1*15*.www.koreadaily.com/news/read.asp?art_id=7506488">
                  <span class="">
                  </span>
                 </a>
                </li>
                <li class="first on" id="thumb_class_0" rel="1">
                 [linkx]
                 
                </li>
                <li class="first on" id="thumb_class_0" rel="2">
                 <a href="/?1*15*.www.koreadaily.com/news/read.asp?art_id=7506551">
                  <span class="">
                  </span>
                 </a>
                </li>
                <li class="first on" id="thumb_class_0" rel="3">
                 [linkx]
                 
                </li>
               </ul>
               <ul class="th_list2" id="list_thumb">
                <li class="first on" id="thumb_class_0" rel="4">
                 [ahref]
                 
                </li>
                <li class="first on" id="thumb_class_0" rel="5">
                 <a href="/?1*15*.www.koreadaily.com/news/read.asp?art_id=7506561">
                  <span class="">
                  </span>
                 </a>
                </li>
                <li class="first on" id="thumb_class_0" rel="6">
                 <a href="/?1*15*.www.koreadaily.com/news/read.asp?art_id=7506533">
                  <span class="">
                  </span>
                 </a>
                </li>
                <li class="first on" id="thumb_class_0" rel="7">
                 [linkx]
                  <li>[linkx]</li>[area1][mkey1][area1][mkey1][pkeyx]
                 
                </li>
               </ul>
              </div>
             </tornado:component>
            </div>
           </tornado:component>
          </section>
          <div class="clear">
          </div>
          <div class="">
           <div class="text-center adbox-bg">
            <div id="div-gpt-ad-1535488516159-0">
            </div>
           </div>
          </div>
          <div class="ma_top20">
           <div class="text-center adbox-bg">
            <div id="div-gpt-ad-1535488566473-0">
            </div>
           </div>
          </div>
          <div class="ma_top20">
           <div class="text-center adbox-bg">
            <div id="div-gpt-ad-1535488622468-0">
            </div>
           </div>
          </div>
          <div class="clear">
          </div>
         </div>
         <div class="clear">
         </div>
         <div class="ma_top35">
          <div class="text-center">
           <div id="div-gpt-ad-1510607750279-15">
           </div>
          </div>
         </div>
        </div>
        <div class="clear">
        </div>
       </div>
      </section>
      <div class="clear">
      </div>
      <section class="ma_top40" id="second-section">
       <div class="news-duo">
        <div class="cp-area cp-area-major">
         <div class="news-area">
          <article class="headline-article" id="headline">
           <p class="title">
            [ahref]
            
           </p>
           <div class="ma_top10">
            <div class="embed_media">
             [ahref]
             
            </div>
            <div class="trb_text">
             <p class="desc">
              <a href="/news/read.asp?art_id=7507899" target="_self">
               지난 6일(한국시간) '한국 명성교회 부자 세습' 불법 여부 판결이 결국 '무효'로 결정났다. 판결 여부는 한국 및 미주 한인 개신교계 초미의 관심사였다. 본지 7월30일자 A-18면> 재판은 명성교회가 소속된 대한예수교장로회 통합(예장 통합) 교단이 진
              </a>
             </p>
             <ul class="small_text_list">
             </ul>
            </div>
           </div>
          </article>
          <div class="clear">
          </div>
          <section class="ma_top25" id="newslist">
           <div class="txt-container">
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7498732" target="_self">
              박서준, 안성기 주연 영화 '사자' 8월 16일 북미 대개봉
             </a>
            </p>
            <p class="small_heading">
             [ahref]
              [linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][linkx][pkeyx][area1][mkey1][area1][keywordx][area1][mkey1][linkx][pkeyx][pkeyx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][pkeyx]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7508266" target="_self">
              '3파전' 한인회장 선거…'부정선거 시비' 후유증
             </a>
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7508300" target="_self">
              역대 최대 규모 "반드시 우승"
             </a>
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7507064" target="_self">
              1대뿐인 '포르쉐 1호차' 경매, 2000만불 예상
             </a>
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7505508" target="_self">
              무릎꿇고 주먹들고 '증오 퍼뜨리는 대통령'에 항의
             </a>
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7506996" target="_self">
              테슬라 스페이스X · 아마존 블루오리진 붙었다
             </a>
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7506926" target="_self">
              미·중 무역전쟁 재미보는 트럼프, 대선까지 끌고 간다
             </a>
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
            <p class="small_heading">
             <a href="/news/read.asp?art_id=7506941" target="_self">
              가장 완벽한 다이아몬드는 오드리 헵번을 닮았다
             </a>
            </p>
            <p class="small_heading">
             [ahref]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
            <p class="small_heading">
             [linkx]
             
            </p>
           </div>
          </section>
          <div class="clear">
          </div>
          <div class="todayhotissue-box">
           <div class="section-theme-highlight">
            <a href="/?1*137*.www.koreadaily.com/news/issue_home.asp">
             금주의 핫이슈
            </a>
           </div>
           <div class="tagslist">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
          <div class="clear">
          </div>
         </div>
         <div class="other-area">
          <section class="" id="ktown">
           <div class="center-top-ktown-list-box">
            <p class="ft_pop ftsize20 title">
             HelloKTown
            </p>
            <div class="tabs ktown-list" data-tabs="">
             <div class="tab">
              <label for="tab-ktown-1">
               <span class="icon-job">
               </span>
               <span>
                구인
               </span>
              </label>
              <div class="tab__content">
               <ul>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_job/recruitview?data=73486">
                  컴퓨터만 있으면 누구나 할 수 있는 알바
                 </a>
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_job/recruitview?data=73487">
                  AV TECHNICIAN
                 </a>
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_job/recruitview?data=73488">
                  < O C > 제빵 / 케익기사 ( Cake 신입 또는 경력)
                 </a>
                </li>
                <li>
                 <[keywordx]>
                 </[keywordx]>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_job/recruitview?data=73491">
                  합법적으로 개인택시처럼 내차로운전 수입가능함
                 </a>
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_job/recruitview?data=73492">
                  아이들 학교 픽업 및 도우미
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
               </ul>
              </div>
             </div>
             <div class="tab">
              <label for="tab-ktown-2">
               <span class="icon-rent">
               </span>
               <span>
                렌트
               </span>
              </label>
              <div class="tab__content">
               <ul>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_rent/rentview?data=32314">
                  부에나  팍(비치와 알티샤)하우스 방 렌트
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_rent/rentview?data=32311">
                  부에나  팍(비치와 알티샤)하우스 방 렌트
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_rent/rentview?data=32199">
                  ANAHEIM OFFICE SUB-LEASE[area1][mkey1][ahref]<li>[pkeyx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                 </a>
                </li>
               </ul>
              </div>
             </div>
             <div class="tab">
              <label for="tab-ktown-3">
               <span class="icon-home">
               </span>
               <span>
                부동산
               </span>
              </label>
              <div class="tab__content">
               <ul>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_property/normalview?data=43999">
                  USC 2유닛 78만 5천, 월인컴 $4,400
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_property/normalview?data=43997">
                  새집 분양 '실마 40만불 2베드~50만불 5베드 타운하우스'
                 </a>
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_property/normalview?data=43996">
                  새집 분양, '노스리지 하우스' 3베드 60만불대
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_property/normalview?data=43993">
                  한인타운 2006년생 콘도 방3 화2
                 </a>
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_property/normalview?data=43992">
                  한인타운 2005년생 철골 콘도 방3 화3
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
               </ul>
              </div>
             </div>
             <div class="tab">
              <label for="tab-ktown-4">
               <span class="icon-car">
               </span>
               <span>
                자동차
               </span>
              </label>
              <div class="tab__content">
               <ul>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_car/carview?data=38081">
                  714 653 3090렉셔스BMW전문 노다운으로  최저가격으로 구입리스 도와드립니다
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_car/carview?data=40845">
                  8월 리스도 역시 젊고 정직한 케빈입니다.
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
               </ul>
              </div>
             </div>
             <div class="tab">
              <label for="tab-ktown-5">
               <span class="icon-business">
               </span>
               <span>
                전문업체
               </span>
              </label>
              <div class="tab__content">
               <ul>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_proshop/proshopnormalview?data=73061">
                  SAT I &amp; SAT II, ACT, 학교성적을 위한 개인 과외
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_proshop/proshopnormalview?data=72906">
                  썬스팀카펫크리닝 ( 청소와 관련된 모든일을 깔끔하게, Floor Wax, 러그픽업&amp; 딜리버리 써비스 )
                 </a>
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_proshop/proshopnormalview?data=73059">
                  썬스팀카펫크리닝 ( 청소와 관련된 모든일을 깔끔하게, Floor Wax, 러그픽업&amp; 딜리버리 써비스 )
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_proshop/proshopnormalview?data=52468">
                  █ 복사기,프린터, 파격적인 가격으로 수리,렌트,리스 해드립니다  █
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_proshop/proshopnormalview?data=73056">
                  ✮✮비지니스 론/ 무담보/ Bad Credit OK✮✮ 크레딧카드 매출이 없어도 OK  비즈니스 오픈 3개월
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
               </ul>
              </div>
             </div>
             <div class="tab">
              <label for="tab-ktown-6">
               <span class="icon-sell">
               </span>
               <span>
                사고팔기
               </span>
              </label>
              <div class="tab__content">
               <ul>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/?1*151*.ktown.koreadaily.com/ad_market/marketview_normal?data=21268">
                  거의 쓰지않은 전자 올겐 $200.00
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
               </ul>
              </div>
             </div>
            </div>
           </div>
          </section>
          <div class="clear">
          </div>
          <section class="ma_top25" id="lifesection">
           <h4 class="h4-section-title">
            맛집/여행
           </h4>
           <div class="lifeslide">
            <div class="item_slide_life ma_top10">
             <div class="owl-carousel item_slide_normal_st">
              <div class="slide_mainst item">
               <div class="img_box">
                <a href="/?1*146*.ktown.koreadaily.com/community/restaurants/view/421" target="_blank">
                </a>
               </div>
               <p class="title">
                <a href="/?1*146*.ktown.koreadaily.com/community/restaurants/view/421" target="_blank">
                 $1에 먹는 새로운 오이스터 맛집 8
                </a>
               </p>
              </div>
              <div class="slide_mainst item">
               <div class="img_box">
                <a href="/?1*146*.ktown.koreadaily.com/community/travel/view/282" target="_blank">
                </a>
               </div>
               <p class="title">
                <a href="/?1*146*.ktown.koreadaily.com/community/travel/view/282" target="_blank">
                 집에서 간단히 만드는 파스타 레시피 8
                </a>
               </p>
              </div>
             </div>
            </div>
            <div class="clear">
             <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[ahref]</li>[area1][mkey1][pkeyx][linkx]
            </div>
           </div>
          </section>
          <div class="clear">
          </div>
          <div class="text-center ma_top25">
           <div id="div-gpt-ad-1540852481144-0" style="height:250px; width:300px;">
           </div>
          </div>
          <div class="clear">
          </div>
          <div class="issue-area">
           <div>
            [linkx]
            
           </div>
           <div>
            [linkx]
            
           </div>
          </div>
         </div>
         <div class="clear">
         </div>
         <section class="ma_top20">
          <div class="section_news">
           <div class="tabs sectionnews-list top" data-tabs="">
            <div class="tab">
             <label for="tab-sectionnews-1">
              <span>
               로컬뉴스
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 [linkx]
                 
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [ahref]
                 
                </div>
                <p class="small_title">
                 <a href="/?1*36*.www.koreadaily.com/news/read.asp?art_id=7508060" target="_self">
                  광복절에 울리는 '우정의 종' 보전위원회도 새출발 계기로
                 </a>
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  <a href="/?1*36*.www.koreadaily.com/news/read.asp?art_id=7507730" target="_self">
                   가든그로브서 총격으로 24세 남성 중상
                  </a>
                 </p>
                 <p class="desc">
                  <a href="/?1*36*.www.koreadaily.com/news/read.asp?art_id=7507730" target="_self">
                   가든그로브서 연이어 강력범죄가 이어지고 있는 가운데 총격 사건이 또 발생해 주민들이 불안해하고 있다.  가든그로브경찰은 페이스북 페이지를 통해 지난 9일 오후 7시35분 램프슨 애비뉴와 넛우드 스트리트 인근에서 총격이 발생했다는 신고가 접수돼 현장에 출동했으며 적어도 한발의 총상을 입은 24세 남성을 발견해 인근 응급센터로 이송했다고 밝혔다. 경찰은 수사가 진행 중이라며 주민들의 제보를 당부했다.  주민들은 댓글을 통해 '거주지에 바로 인접한
                  </a>
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-2">
              <span>
               경제/IT
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 <a href="/?1*65*.www.koreadaily.com/news/read.asp?art_id=7509247">
                 </a>
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [ahref]
                 
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  [linkx]
                  
                 </p>
                 <p class="desc">
                  <a href="/?1*65*.www.koreadaily.com/news/read.asp?art_id=7508308">
                   은퇴 한인들이 늘어나면서  '실버타운'으로 불리는 시니어단지에 대한 관심이 크게 높아지고 있다.  특히 남가주 일대 시니어단지는 쾌적한 환경과 다양한 편의시설 등으로 거주 만족도가 높다는 입소문이 퍼지면서 전국적인 관심을 끌고 있다.  LA인근 시니어단지 현황 및 입주 조건 등을 2회에 나누어 소개한다.
                  </a>
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-3">
              <span>
               이민/비자
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 [ahref]
                 
                </div>
                <p class="small_title">
                 [ahref]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 <a href="/?1*66*.www.koreadaily.com/news/read.asp?art_id=7508268">
                 </a>
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  <a href="/?1*66*.www.koreadaily.com/news/read.asp?art_id=7508307">
                   이민자가 정부 복지 프로그램 혜택을 받으면 영주권·시민권 취득 등 이민 혜택을 제한하는 트럼프 행정부의 새 '공공복지 수혜(public charge) 규정안이 오는 10월 중순부터 적용될 전망이다. 국토안보부(DHS)는 12일 트럼프 행정부의 837쪽 짜리 새 규정안을 14일 연방 관보에 고시한다고 밝혔다. 새 규정안이 고시되면 60일 후인 10월 15일 밤 12시부터 시행이 시작된다.  작년 10월 처음으로 발표된 새 규정안은 영주권·시민권
                  </a>
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  <a href="/?1*66*.www.koreadaily.com/news/read.asp?art_id=7507304">
                   이민자가 정부 복지 프로그램 혜택을 받으면 영주권·시민권 취득 등 이민 혜택을 제한하는 도널드 트럼프 행정부의 새 '공적 부조(public charge)' 규정 변경안이 오는 10월 중순부터 적용될 전망이다. 국토안보부(DHS)는 12일 트럼프 행정부의 837쪽짜리 새 '공적 부조 규정안(Inadmissibility on Public Charge Grounds)'을 14일 연방 관보에 고시한다고 밝혔다. 새 규정안이 연방 관보에 고시되면 60일
                  </a>
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-4">
              <span>
               부동산/머니
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 [linkx]
                 
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [linkx]
                 
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  [linkx]
                  
                 </p>
                 <p class="desc">
                  <a href="/?1*67*.www.koreadaily.com/news/read.asp?art_id=7504726">
                   가주에서 내집 장만의 꿈을 이루려면 연소득이 최소 12만3000달러는 있어야 하는 것으로 나타났다.  가주부동산중개인협회(CAR)는 올 2분기 가주 단독 주택 중간가격이 60만8660달러이며 이를 구입하기 위한 최소 연소득은 12만2960달러라고 최근 밝혔다. 이로 인해 가주 주택구입여력지수(HAI)는 지난 1분기의 32%에서 2%포인트 떨어진 30%를 기록했다. 이는 10명 중 3명만이 단독 주택을 살 여력이 있다는 뜻이다. 다만 다행인 것은
                  </a>
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-5">
              <span>
               사회/정치
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 <a href="/?1*68*.www.koreadaily.com/news/read.asp?art_id=7509222">
                 </a>
                </div>
                <p class="small_title">
                 [ahref]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [ahref]
                 
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  <a href="/?1*68*.www.koreadaily.com/news/read.asp?art_id=7508397">
                   NJ한인회·한국문화원 무료 영화 상영의 날
                  </a>
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  [linkx]
                  
                 </p>
                 <p class="desc">
                  [ahref]
                  
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-6">
              <span>
               교육
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 [linkx]
                 
                </div>
                <p class="small_title">
                 <a href="/?1*36*.www.koreadaily.com/news/read.asp?art_id=7503134" target="_self">
                  "전교생 실력 고루 성장시키는 학교될 것"  '비스타 호라이즌글로벌아카데미
                 </a>
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [linkx]
                 
                </div>
                <p class="small_title">
                 <a href="/?1*36*.www.koreadaily.com/news/read.asp?art_id=7503076" target="_self">
                  커뮤니티 칼리지도 온라인 시대…의료코딩·사이버보안 등 취업 지식 배운다
                 </a>
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  <a href="/?1*69*.www.koreadaily.com/news/read.asp?art_id=7508150">
                   [과학 이야기] 성서 속 블레셋인은 "유럽 남부 출신"
                  </a>
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  [ahref]
                  
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-7">
              <span>
               스포츠
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 <a href="/?1*70*.www.koreadaily.com/news/read.asp?art_id=7509227">
                 </a>
                </div>
                <p class="small_title">
                 <a href="/?1*70*.www.koreadaily.com/news/read.asp?art_id=7509227">
                  토트넘 마지막 퍼즐 손흥민, 다시 뛸 준비 마쳤다
                 </a>
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [linkx]
                 
                </div>
                <p class="small_title">
                 [ahref]
                 
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  <a href="/?1*70*.www.koreadaily.com/news/read.asp?art_id=7509238">
                   ‘페게로·송은범 활약’ LG, 오지환·채은성도 선발 라인...
                  </a>
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-8">
              <span>
               라이프/레저
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 <a class="pic" href="/news/read.asp?art_id=7505510" target="_self">
                 </a>
                </div>
                <p class="small_title">
                 [ahref]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [ahref]
                 
                </div>
                <p class="small_title">
                 <a href="/?1*36*.www.koreadaily.com/news/read.asp?art_id=7501619" target="_self">
                  그녀는 떠났지만 그녀의 책은 남았다
                 </a>
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  <a href="/?1*71*.www.koreadaily.com/news/read.asp?art_id=7509231">
                   [사진]박희순-손현주, '빵 터진 세조와 한명회'
                  </a>
                 </p>
                 <p class="desc">
                  <a href="/?1*71*.www.koreadaily.com/news/read.asp?art_id=7509231">
                   [OSEN=최규한 기자] 13일 오후 서울 CGV용산아이파크몰에서 영화 '광대들: 풍문조작단'(감독 김주호) ..
                  </a>
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  [ahref]
                  
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-9">
              <span>
               국제
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 [ahref]
                 
                </div>
                <p class="small_title">
                 [ahref]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [linkx]
                  [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1]
                 
                </div>
                <p class="small_title">
                 [ahref]
                 
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  [linkx]
                  
                 </p>
                 <p class="desc">
                  [ahref]
                  
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  <a href="/?1*72*.www.koreadaily.com/news/read.asp?art_id=7507099">
                   베네수엘라 '엑소더스' 지속…국민 10명 중 4명이 이민...
                  </a>
                 </p>
                 <p class="desc">
                  [linkx]
                  
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
            <div class="tab">
             <label for="tab-sectionnews-10">
              <span>
               시니어
              </span>
             </label>
             <div class="tab__content">
              <div class="image-news-area">
               <article>
                <div class="text-left imgarea">
                 <a href="/?1*74*.www.koreadaily.com/news/read.asp?art_id=7507719">
                 </a>
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
               <article>
                <div class="text-left imgarea">
                 [linkx]
                 
                </div>
                <p class="small_title">
                 [linkx]
                 
                </p>
               </article>
              </div>
              <div class="text-news-area">
               <article>
                <div class="txt-container">
                 <p class="title">
                  메디케어와 소셜연금을 같은 시기에 신청해야 하나요? [A...[ahref][ahref][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][ahref][area1][mkey1][linkx][area1][mkey1]
                 </p>
                 <p class="desc">
                  [ahref]
                  
                 </p>
                </div>
               </article>
               <article>
                <div class="txt-container">
                 <p class="title">
                  <a href="/?1*74*.www.koreadaily.com/news/read.asp?art_id=7477115">
                   쿡카운티 시니어 재산세 공제 간소화 된다
                  </a>
                 </p>
                 <p class="desc">
                  [ahref]
                  
                 </p>
                </div>
               </article>
              </div>
             </div>
            </div>
           </div>
          </div>
         </section>
         <div class="clear">
         </div>
        </div>
        <div class="cp-area cp-area-minor">
         <section class="specialist-area">
          <h4 class="h4-section-title">
           전문가 칼럼
           <span class="float_right more-specialist">
            <a onclick="showAskColumn_new()">
             전문가 리스트+
            </a>
           </span>
          </h4>
          <div class="no_display" id="askcolumnmore">
           <div id="askcolumnmore" style="z-index: 999; display: block;">
            <ul class="dot_list">
             <li>
              <a href="/news/list.asp?rel_id=6977" target="_self">
               [생명보험/연금] 조앤 박 재정전문가
              </a>
             </li>
             <li>
              <a href="/news/list.asp?rel_id=6782" target="_self">
               [건강] 임대순 의학박사
              </a>
             </li>
             <li>
              <a href="/news/list.asp?rel_id=5496" target="_self">
               [크레딧관리/채무삭감] 대니 오 대표
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/news/list.asp?rel_id=6330" target="_self">
               [학자금 칼럼] 리차드 명 AGM 대표
              </a>
             </li>
             <li>
              <a href="/news/list.asp?rel_id=7482" target="_self">
               [건강] 한청수 한의사
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/news/list.asp?rel_id=8285" target="_self">
               [이민법] 김준서 변호사
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/news/list.asp?rel_id=7624" target="_self">
               [재정] 안젤라변 재정전문가<li>[area1][keywordx]</li><li>[area1][keywordx]</li><li>[linkx]</li><li>[ahref]</li>
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/news/list.asp?rel_id=9296" target="_self">
               [건강] 김선욱 사우스베일로 안티에이징 원장
              </a>
             </li>
            </ul>
           </div>
          </div>
          <div class="ma_top10">
           <div class="item">
            <div class="image">
             [ahref]
             
            </div>
            <div class="ppl-info-area">
             <p class="author">
              [ahref]
              
             </p>
             <div class="desc">
              <ul>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
              </ul>
             </div>
            </div>
            <div class="clear">
            </div>
           </div>
           <div class="item">
            <div class="image">
             <a href="/?1*10*.www.koreadaily.com/news/list.asp?rel_id=9296" target="_self">
             </a>
            </div>
            <div class="ppl-info-area">
             <p class="author">
              [linkx]
              
             </p>
             <div class="desc">
              <ul>
               <li>
                <a href="/?1*10*.www.koreadaily.com/news/read.asp?art_id=7307835" target="_self">
                 감기의 통합의학
                </a>
               </li>
               <li>
                <a href="/?1*10*.www.koreadaily.com/news/read.asp?art_id=7307849" target="_self">
                 미용침의 특징
                </a>
               </li>
               <li>
                <h2>
                 <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                </h2>
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
            <div class="clear">
            </div>
           </div>
          </div>
         </section>
         <div class="clear">
         </div>
         <div class="ma_top25">
          <div class="text-center adbox-bg">
           <div id="div-gpt-ad-1535488683897-0">
           </div>
          </div>
         </div>
         <div class="clear">
         </div>
         <section class="ma_top25" id="asksection">
          <h4 class="h4-section-title">
           미국생활 Q&amp;A
           <span class="float_right ftsize11 ma_top5">
            [ahref]
            
           </span>
          </h4>
          <div class="ma_top20">
           <div class="right-top-ask">
            <p class="title">
             인기 답변글
            </p>
            <div class="listbox">
             <ul class="text-list-box">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/?1*76*.www.koreadaily.com/qna/ask/ask_read.asp?qca_code=&amp;qna_idx=106700">
                자동차 유리창에 침을 뱉는 행위 처벌관련
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/?1*76*.www.koreadaily.com/qna/ask/ask_read.asp?qca_code=&amp;qna_idx=106704">
                체크
               </a>
              </li>
              <li>
               <a href="/?1*76*.www.koreadaily.com/qna/ask/ask_read.asp?qca_code=&amp;qna_idx=106710">
                시카고 공항에서 픽업할 때
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/?1*76*.www.koreadaily.com/qna/ask/ask_read.asp?qca_code=&amp;qna_idx=106702">
                노동허가란 직원고용시 서류
               </a>
              </li>
             </ul>
            </div>
           </div>
          </div>
          <div class="clear">
          </div>
          <div class="ma_top15 ask-box">
           <p class="title">
            실시간 질문글
           </p>
           <div class="listbox">
            <ul class="text-list-box">
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/?1*76*.www.koreadaily.com/qna/ask/ask_read.asp?qca_code=&amp;qna_idx=106724">
               콤보카드로 일해도 되나요?
              </a>
             </li>
            </ul>
           </div>
          </div>
          <div class="clear">
          </div>
         </section>
         <div class="clear">
         </div>
         <section class="ma_top25" id="cardnews">
          <h4 class="h4-section-title">
           카드로 보는 뉴스
          </h4>
          <div class="cardnewsbox">
           <div class="carousel_cardnews">
            <div class="item product_box">
             <div class="product_img_area">
              <a href="/?1*144*.ktown.koreadaily.com/community/restaurants/view/421" target="_blank">
              </a>
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [ahref]
               
              </p>
             </div>
            </div>
            <div class="item product_box">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*144*.ktown.koreadaily.com/community/travel/view/420" target="_blank">
                8월에 꼭 가봐야 할 이벤트 9
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*144*.college.koreadaily.com/%eb%ac%b4%eb%8d%94%ec%9a%b4-%ec%97%ac%eb%a6%84%ec%97%90-%ec%95%88%ec%84%b1%eb%a7%9e%ec%b6%a4-%ec%9e%98%eb%82%98%ea%b0%80%eb%8a%94-%ec%8a%ac%eb%a6%ac%ed%8d%bc-%ec%83%8c%eb%93%a4-5%ea%b0%9c/" target="_blank">
                무더운 여름에 안성맞춤! 잘나가는 슬리퍼, 샌들 5개
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box">
             <div class="product_img_area">
              <a href="/?1*144*.autos.koreadaily.com/%ec%a7%84%ec%a0%95%ed%95%9c-%ec%87%bc%ed%8d%bc%eb%93%a4%ec%9d%98-%ec%b2%9c%ea%b5%ad-top-%eb%af%b8%ea%b5%ad-%ec%84%9c%eb%b6%80-%ed%94%84%eb%a6%ac%eb%af%b8%ec%97%84-%ec%95%84%ec%9a%b8%eb%a0%9b/" target="_blank">
              </a>
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*144*.college.koreadaily.com/%eb%af%b8%ea%b5%ad-%ec%9e%90%ec%99%b8%ec%84%a0%ec%9c%bc%eb%a1%9c%eb%b6%80%ed%84%b0-%ed%94%bc%eb%b6%80%eb%a5%bc-%eb%b3%b4%ed%98%b8%ed%95%b4-%ec%a4%84-%ec%97%ac%eb%a6%84-%ed%95%84%ec%88%98%ed%85%9c-top/" target="_blank">
                피부를 보호해 줄 여름 필수템 TOP 5
               </a>
              </p>
             </div>
            </div>
           </div>
          </div>
          <div class="clear">
          </div>
         </section>
        </div>
        <div class="clear">
        </div>
       </div>
      </section>
      <div class="clear">
      </div>
      <div class="ma_top40">
       <div class="text_center">
        <div id="div-gpt-ad-1510607750279-3">
        </div>
       </div>
      </div>
      <div class="clear">
      </div>
      <section class="ma_top35" id="third-section">
       <div class="news-duo">
        <div class="cp-area cp-area-major">
         <section id="blognclub">
          <h4 class="h4-section-title ma_btm10">
           J 블로그
           <span class="float_right ftsize11 ma_top5">
            [linkx]
            
           </span>
          </h4>
          <div class="blog-area-times">
           <div class="blog-recommend-box">
            <p class="title-mst">
             오늘의 추천글
            </p>
            <div class="blog-recommend">
             <article>
              <div class="text-right imgarea">
               <a href="/?1*3*.blog.koreadaily.com/cho4890kr/1114764" target="_blank">
               </a>
              </div>
              <div class="theme_box_inner">
               [linkx]
               
              </div>
             </article>
             <article>
              <div class="text-right imgarea">
               [ahref]
               
              </div>
              <div class="theme_box_inner">
               [linkx]
               
              </div>
             </article>
             <article>
              <div class="text-right imgarea">
               [ahref]
               
              </div>
              <div class="theme_box_inner">
               [ahref]
               
              </div>
             </article>
             <article>
              <div class="text-right imgarea">
               [linkx]
               
              </div>
              <div class="theme_box_inner">
               <a class="theme-highlight_title" href="/?1*3*.blog.koreadaily.com/lasan/1109937" target="_blank">
                Colorado 강이 만든 예술, Horseshoe Bend
               </a>
              </div>
             </article>
            </div>
           </div>
           <div class="blog-news-box">
            <p class="title-mst">
             오늘의 관심글
            </p>
            <div class="blog-news">
             <div class="listbox">
              <ul class="text-list-box">
               <li>
                <a href="/?1*4*.blog.koreadaily.com/musang/1114804">
                 딸은 야반도주, 아들은 국책사업에 대놓고 납품. 자..
                </a>
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                <a href="/?1*4*.blog.koreadaily.com/beemhkim/1114796">
                 서울대 전 교수가 왜 MBC기자 폭행?
                </a>
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
           </div>
           <div class="clear">
           </div>
          </div>
          <div class="clear">
          </div>
         </section>
         <div class="clear">
         </div>
        </div>
        <div class="cp-area cp-area-minor">
         <section class="club-area">
          <h4 class="h4-section-title">
           클럽
           <span class="float_right ftsize11">
            [linkx]
            
           </span>
          </h4>
          <div class="ma_top10 right-top-club">
           <article>
            <div class="media-container">
             <a href="/?1*73*.club.koreadaily.com/cafe_board/content.asp?idx=553797&amp;table=1801_cafe_201810208912&amp;c_idx=1801" target="_blank">
             </a>
            </div>
            <div class="txt-container">
             <p class="club_name">
              [ahref]
              
             </p>
             <p class="small_heading club">
              <a href="/?1*73*.club.koreadaily.com/cafe_board/content.asp?idx=553797&amp;table=1801_cafe_201810208912&amp;c_idx=1801" target="_blank">
               Norway 여행기 마지막편
              </a>
             </p>
            </div>
           </article>
           <article>
            <div class="media-container">
             [ahref]
             
            </div>
            <div class="txt-container">
             <p class="club_name">
              <a href="/?1*73*.club.koreadaily.com/cafe_board/content.asp?idx=553765&amp;table=1009_cafe_201469231255&amp;c_idx=1009" target="_blank">
               [드림 산악회]
              </a>
             </p>
             <p class="small_heading club">
              <a href="/?1*73*.club.koreadaily.com/cafe_board/content.asp?idx=553765&amp;table=1009_cafe_201469231255&amp;c_idx=1009" target="_blank">
               더위에 떨어진 입맛…다시 살리는 음식 4
              </a>
             </p>
            </div>
           </article>
           <article>
            <div class="media-container">
             [ahref]
             
            </div>
            <div class="txt-container">
             <p class="club_name">
              [ahref]
              
             </p>
             <p class="small_heading club">
              <a href="/?1*73*.club.koreadaily.com/cafe_board/content.asp?idx=553690&amp;table=1009_cafe_2014526124423&amp;c_idx=1009" target="_blank">
               피부 노화 방지, 설탕 대신 이것 7
              </a>
             </p>
            </div>
           </article>
           <article>
            <div class="media-container">
             [linkx]
             
            </div>
            <div class="txt-container">
             <p class="club_name">
              [linkx]
              
             </p>
             <p class="small_heading club">
              [ahref]
              
             </p>
            </div>
           </article>
          </div>
          <div class="clear">
          </div>
         </section>
         <div class="clear">
         </div>
        </div>
       </div>
      </section>
      <div class="clear">
      </div>
      <div class="clear">
      </div>
      <section class="ma_top40" id="ktown-section">
       <div class="news-duo">
        <div class="cp-area cp-area-major">
         <section class="bg-light-gray ktownitem-box" id="ktownitem">
          <h4 class="h4-section-title eng">
           <span class="badge-st">
            HelloKtown
           </span>
           <span class="float_right ma_top15 ftsize13">
            [linkx]
            
           </span>
          </h4>
          <div class="market_box ma_top20">
           <p class="title-mst">
            부동산매물
            <span class="float_right title_name ma_top5">
             [ahref]
             
            </span>
           </p>
           <div class="quartet ktown-news">
            <div>
             <div class="img_box">
              [ahref]
              
             </div>
             <div class="desc">
              <p class="title">
               <a href="/?1*133*.ktown.koreadaily.com/ad_property/powerview_sub?t=a&amp;pdata=&amp;cdata=6753&amp;data=43047" target="_blank">
                행콕팍 좋은로케이션에 개인 그라지 있는 타운홈 스타일
               </a>
              </p>
              <p class="price ft_pop">
               [ahref]
               
              </p>
             </div>
            </div>
            <div>
             <div class="img_box">
              [linkx]
              
             </div>
             <div class="desc">
              <p class="title">
               [ahref]
               
              </p>
              <p class="price ft_pop">
               <a href="/?1*133*.ktown.koreadaily.com/ad_property/powerview_sub?t=a&amp;pdata=&amp;cdata=6753&amp;data=42455" target="_blank">
                $799,000
               </a>
              </p>
             </div>
            </div>
            <div>
             <div class="img_box">
              <a href="/?1*133*.ktown.koreadaily.com/ad_property/powerview_sub?t=a&amp;pdata=&amp;cdata=6753&amp;data=42454" target="_blank">
              </a>
             </div>
             <div class="desc">
              <p class="title">
               [ahref]
               
              </p>
              <p class="price ft_pop">
               [ahref]
               
              </p>
             </div>
            </div>
            <div>
             <div class="img_box">
              [linkx]
              
             </div>
             <div class="desc">
              <p class="title">
               [ahref]
               
              </p>
              <p class="price ft_pop">
               [ahref]
               
              </p>
             </div>
            </div>
           </div>
          </div>
          <div class="clear">
          </div>
          <div class="market_box ma_top20">
           <p class="title-mst">
            자동차매물
            <span class="float_right title_name ma_top5">
             <a class="more" href="/?1*134*.ktown.koreadaily.com/ad_car/powerview?data=40034" target="_blank">
              JOHN LEE / EDEN AUTO
             </a>
            </span>
           </p>
           <div class="quartet ktown-news">
            <div>
             <div class="img_box">
              <a href="/?1*134*.ktown.koreadaily.com/ad_car/powerview_sub?data=40034" target="_blank">
              </a>
             </div>
             <div class="desc">
              <p class="title">
               <a href="/?1*134*.ktown.koreadaily.com/ad_car/powerview_sub?data=40034" target="_blank">
                2016 LAND ROVER RANGE ROVER EVOQUE SE
               </a>
              </p>
              <p class="price ft_pop">
               <a href="/?1*134*.ktown.koreadaily.com/ad_car/powerview_sub?data=40034" target="_blank">
                $27,000.00
               </a>
              </p>
             </div>
            </div>
            <div>
             <div class="img_box">
              [ahref]
              
             </div>
             <div class="desc">
              <p class="title">
               [ahref]
               
              </p>
              <p class="price ft_pop">
               [linkx]
               
              </p>
             </div>
            </div>
            <div>
             <div class="img_box">
              [ahref]
              
             </div>
             <div class="desc">
              <p class="title">
               <a href="/?1*134*.ktown.koreadaily.com/ad_car/powerview_sub?data=40009" target="_blank">
                2016 NISSAN SENTRA SV
               </a>
              </p>
              <p class="price ft_pop">
               [linkx]
               
              </p>
             </div>
            </div>
            <div>
             <div class="img_box">
              [ahref]
              
             </div>
             <div class="desc">
              <p class="title">
               [linkx]
               
              </p>
              <p class="price ft_pop">
               [linkx]
               
              </p>
             </div>
            </div>
           </div>
          </div>
          <div class="clear">
          </div>
         </section>
         <div class="clear">
         </div>
        </div>
        <div class="cp-area cp-area-minor">
         <section class="specialist-area">
          <h4 class="h4-section-title">
           부동산 에이전트
           <span class="float_right ftsize12">
            [linkx]
            
           </span>
          </h4>
          <div class="no_display" id="realtormore">
           <div id="askcolumnmore" style="z-index: 999; display: block;">
            <ul class="dot_list">
             [area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][pkeyx][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
            </ul>
           </div>
          </div>
          <div class="ma_top10">
           <div class="item">
            <div class="image">
             [linkx]
             
            </div>
            <div class="ppl-info-area">
             <p class="author">
              JOHN LEE<li>[ahref]</li><li>[ahref]</li><li>[pkeyx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li>
             </p>
             <div class="desc">
              <ul>
               <li>
                <a href="/?1*135*.ktown.koreadaily.com/ad_property/powerview_sub?t=a&amp;pdata=924&amp;cdata=923&amp;data=25086" target="_self">
                 베이커리 3곳<li>[area1][mkey1]</li>[linkx]<li>[pkeyx]</li>[area1][mkey1]
                </a>
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                <a href="/?1*135*.ktown.koreadaily.com/ad_property/powerview_sub?t=a&amp;pdata=924&amp;cdata=923&amp;data=25100" target="_self">
                 고급 이탈리안식당
                </a>
               </li>
              </ul>
             </div>
            </div>
            <div class="clear">
            </div>
           </div>
           <div class="item">
            <div class="image">
             <a href="/?1*135*.ktown.koreadaily.com/ad_property/agentview?t=p&amp;pdata=439&amp;cdata=435" target="_self">
             </a>
            </div>
            <div class="ppl-info-area">
             <p class="author">
              <a href="/?1*135*.ktown.koreadaily.com/ad_property/agentview?t=p&amp;pdata=439&amp;cdata=435" target="_self">
               GINA LEE
              </a>
             </p>
             <div class="desc">
              <ul>
               <li>
                [linkx]
                
               </li>
               <li>
                <a href="/?1*135*.ktown.koreadaily.com/ad_property/powerview_sub?t=a&amp;pdata=439&amp;cdata=435&amp;data=30980" target="_self">
                 한국식당과 BBQ 식당
                </a>
               </li>
               <li>
                [linkx]
                
               </li>
              </ul>
             </div>
            </div>
            <div class="clear">
            </div>
           </div>
          </div>
         </section>
         <div class="clear">
         </div>
         <section class="ma_top30" id="ktown_com">
          <h4 class="h4-section-title">
           커뮤니티 실시간
           <span class="float_right ftsize11">
            [linkx]
            
           </span>
          </h4>
          <div class="ma_top10 ktown-com-list">
           <ul class="text-list">
            <li>
             <a href="/?1*150*.ktown.koreadaily.com.community/studytalk/view/13374">
              <span class="category_info">
               [교육/강좌]
              </span>
              <span class="title">
               무료 영어 교실 [area1][keywordx]<li>[area1][keywordx]</li><li>[ahref]</li><li>[ahref]</li>
              </span>
             </a>
            </li>
            <li>
             <a href="/?1*150*.ktown.koreadaily.com.community/studytalk/view/13373">
              <span class="category_info">
               [교육/강좌]
              </span>
              <span class="title">
               제가 직접 경험했습니다. 부동산 라이센스 시험 한번에 붙고 싶은 분들은!
              </span>
             </a>
            </li>
            <li>
             <a href="/?1*150*.ktown.koreadaily.com.community/studytalk/view/13372">
              <span class="category_info">
               [교육/강좌]
              </span>
              <span class="title">
               부동산 라이선스 취득부터 실무 경험까지 한번에!
              </span>
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/?1*150*.ktown.koreadaily.com.community/studytalk/view/13369">
              <span class="category_info">
               [교육/강좌]
              </span>
              <span class="title">
               281 🌱 대마초 건강 정보 + 많이 문의 주신 질문사항 가져왔어요!💡💡
              </span>
             </a>
            </li>
            <li>
             <a href="/?1*150*.ktown.koreadaily.com.community/studytalk/view/13368">
              <span class="category_info">
               [교육/강좌]
              </span>
              <span class="title">
               💛유튜브구독자 <1-day 특강> 무료 이벤트 _ 에버그린패턴
              </span>
             </a>
            </li>
           </ul>
          </div>
         </section>
         <div class="clear">
         </div>
        </div>
        <div class="clear">
        </div>
       </div>
      </section>
      <div class="clear">
      </div>
      <section class="ma_top30" id="last-section">
       <div class="news-duo">
        <div class="cp-area cp-area-major">
         <div class="text_center">
          <div id="div-gpt-ad-1510607750279-9">
          </div>
         </div>
         <div class="clear">
         </div>
         <section class="ma_top30" id="hotdealitem">
          <h4 class="h4-section-title">
           핫딜
          </h4>
          <div class="today-hotdeal-box">
           <div class="carousel_hotdeal">
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/jpoint_product_detail.asp?cat_no=8&amp;prd_idx=718&amp;prd_branch=LA" target="_blank">
                <font color="#C72700">
                 50%할인
                </font>
                클리네 레드 주름 개선기
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=88&amp;prd_idx=3352" target="_blank">
                <font color="#C72700">
                 50%할인
                </font>
                이효리가 선택한 보이차
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [ahref]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [ahref]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=88&amp;prd_idx=4181" target="_blank">
                <font color="#C72700">
                 15%할인
                </font>
                칼로바이 키-스프레소
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=29&amp;prd_idx=4128" target="_blank">
              </a>
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [ahref]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=8&amp;prd_idx=3273" target="_blank">
                2019년형 이지스윙 무선 물걸레 청소기
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [ahref]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=42&amp;prd_idx=3879" target="_blank">
                무선 듀얼 회전 물걸레 청소기 아센 ASSEN GS 205
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/jpoint_product_detail.asp?cat_no=123&amp;prd_idx=3623" target="_blank">
                빅토리캠프 포켓 DD PORKET DD 우드스토브
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=42&amp;prd_idx=3880" target="_blank">
                360도 자동회전 에어 통돌이 오븐기 듀얼그린 스핀쿡
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [ahref]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=64&amp;prd_idx=4092" target="_blank">
              </a>
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/product_detail.asp?cat_no=64&amp;prd_idx=4092" target="_blank">
                [땡큐파머] 선 프로젝트 워터 선 크림
               </a>
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [linkx]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [linkx]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               [ahref]
               
              </p>
             </div>
            </div>
            <div class="item product_box" style="width: 100%; display: inline-block;">
             <div class="product_img_area">
              [ahref]
              
             </div>
             <div class="sub_titles">
              <p class="product_name">
               <a href="/?1*115*.hotdeal.koreadaily.com/product/search_result.asp?search_value=petitemieux" target="_blank">
                한국에서 핫한
                <font color="#C72700">
                 유/아동복
                </font>
                브랜드
               </a>
              </p>
             </div>
            </div>
           </div>
          </div>
          <div class="clear">
          </div>
         </section>
         <div class="clear">
         </div>
         <div class="ma_top25 edu-box">
          <div>
           [linkx]
           
          </div>
          <div>
           [linkx]
           
          </div>
         </div>
         <div class="clear">
         </div>
        </div>
        <div class="cp-area cp-area-minor">
         <div>
          <div class="text-center">
           <a href="/?1*85*.ktown.koreadaily.com/ad_marketsale/marketlist" target="_blank">
           </a>
          </div>
         </div>
         <div class="ma_top30">
          <div class="text-center adbox-bg sm">
           <div id="div-gpt-ad-1535488725722-0">
           </div>
          </div>
         </div>
         <div class="ma_top20">
          <div class="text-center adbox-bg sm">
           <div id="div-gpt-ad-1553895660167-0" style="height:100px; width:320px;">
           </div>
          </div>
         </div>
         <div class="ma_top20">
          <div class="text-center">
           <div id="div-gpt-ad-1540852610747-0">
           </div>
          </div>
         </div>
         <div class="clear">
         </div>
        </div>
        <div class="clear">
        </div>
       </div>
      </section>
      <div class="clear">
      </div>
      <section class="ma_top40">
       <div class="pa_top20 bordertop1">
        <h4 class="h4-section-title">
         한인업소록
        </h4>
        <div class="clear">
        </div>
        <section class="ma_top15 ypsearch-box">
         <div class="float_left">
          <map name="planetmap2">
           <area alt="iphone 앱 다운로드" coords="80, 0, 136, 126" href="http://jclick.koreadaily.com/?1*126*https://itunes.apple.com/us/app/mijujung-ang-ilbo-nyuseu-eobsolog/id419028291?mt=8" shape="rect" target="_blank"/>
           <area alt="android 앱 다운로드" coords="141, 0, 200, 126" href="http://jclick.koreadaily.com/?1*127*https://play.google.com/store/apps/details?id=com.koreadaily.android" shape="rect" target="_blank"/>
          </map>
         </div>
         <div class="top_search_menu_box">
          <form accept-charset="euc-kr" action="/list/list.asp" name="frmYPSearch">
           <div class="select_area">
            <select class="select_branch" name="bra_code">
             <option label="AT" value="AT">
              아틀란타
             </option>
             <option label="CH" value="CH">
              시카고
             </option>
             <option label="DA" value="DA">
              텍사스
             </option>
             <option label="DC" value="DC">
              워싱턴DC
             </option>
             <option label="DE" value="DE">
              덴버
             </option>
             <option label="HI" value="HI">
              하와이
             </option>
             <option label="LA" selected="" value="LA">
              LA
             </option>
             <option label="NY" value="NY">
              뉴욕
             </option>
             <option label="SD" value="SD">
              샌디에이고
             </option>
             <option label="SE" value="SE">
              시애틀
             </option>
             <option label="SF" value="SF">
              샌프란시스코
             </option>
             <option label="VE" value="VE">
              라스베가스
             </option>
            </select>
           </div>
           <div class="search_text_area">
           </div>
          </form>
         </div>
         <div class="float_right">
          <div class="adbox-bg">
           <div id="div-gpt-ad-1535488810918-0">
           </div>
          </div>
         </div>
         <div class="clear">
         </div>
        </section>
        <div class="clear">
        </div>
        <div class="ktown-item-area">
         <div class="item_slide_normal_mt">
          <div class="owl-carousel-ktown item_slide_normal_st owl-carousel owl-theme owl-loaded">
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              [ahref]
              
             </p>
             [linkx]
             
            </div>
           </div>
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              [ahref]
              
             </p>
             [ahref]
             
            </div>
           </div>
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              <a href="/?1*22*.adimg.koreadaily.com/2015_img/TIS_201511/TIS_201511.html" id="MainContent_liv_powerad2_hpl_link_1_2" target="_blank">
               <span id="MainContent_liv_powerad2_lbl_namecardtitle_2" style="color:#5b688b;">
                탑이민이주공사
               </span>
              </a>
             </p>
             [linkx]
             
            </div>
           </div>
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              [linkx]
              
             </p>
             [ahref]
             
            </div>
           </div>
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              <a href="/?1*22*.www.eminnara.com/" id="MainContent_liv_powerad2_hpl_link_1_2" target="_blank">
               <span id="MainContent_liv_powerad2_lbl_namecardtitle_2" style="color:#5b688b;">
                김준서 변호사
               </span>
              </a>
             </p>
             [linkx]
             
            </div>
           </div>
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              <a href="/?1*22*.adimg.koreadaily.com/2017_img/honglaw/honglaw.html" id="MainContent_liv_powerad2_hpl_link_1_2" target="_blank">
               <span id="MainContent_liv_powerad2_lbl_namecardtitle_2" style="color:#5b688b;">
                홍은진 변호사
               </span>
              </a>
             </p>
             <a href="/?1*22*.adimg.koreadaily.com/2017_img/honglaw/honglaw.html" id="MainContent_liv_powerad2_hpl_link_2_2" target="_blank">
              <div class="ad_desc oneimg">
               <div>
                정확한 판단! 올바른 선택
                <br/>
                이민법 전문
                <br/>
                213-251-5594
               </div>
               <div>
               </div>
              </div>
             </a>
            </div>
           </div>
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              <a href="/?1*22*.adimg.koreadaily.com/2018_img/SouthBayLexus/SouthBayLexus.html" id="MainContent_liv_powerad2_hpl_link_1_2" target="_blank">
               <span id="MainContent_liv_powerad2_lbl_namecardtitle_2" style="color:#5b688b;">
                사우스베이 렉서스
               </span>
              </a>
             </p>
             [ahref]
             
            </div>
           </div>
           <div class="slide_mainst item">
            <div class="info_namecard">
             <p class="p_title">
              [ahref]
              
             </p>
             [ahref]
             
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="clear">
        </div>
       </div>
      </section>
      <div class="clear">
      </div>
      <div class="ma_top40">
       <div class="text_center">
        <div id="div-gpt-ad-1510607750279-12">
        </div>
       </div>
      </div>
      <div class="clear">
      </div>
      <div class="clear pa_btm40">
      </div>
      <div class="clear">
      </div>
     </div>
    </div>
   </div>
   <div class="cont_real_area">
    <footer class="pa_btm30">
     <div class="content_box pa_top30">
      [linkx]
      
      <div class="footer_web">
       <h4>
        THE KOREA DAILY SERVICE
       </h4>
       <div class="service-area">
        <div class="item_area">
         <div class="service-title-inner">
          <ul>
           <li class="section-title">
            [ahref]
            
           </li>
           <li class="section-title">
            <a href="/?1*114*.hotdeal.koreadaily.com">
             핫딜
            </a>
           </li>
           <li class="section-title">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="item_area">
         <div class="service-title-inner">
          <ul>
           <li class="section-title">
            <a href="/news/list.asp?category=opinion">
             오피니언
            </a>
           </li>
           <li class="section-title">
            <a href="/?1*58*.autos.koreadaily.com">
             온더로드
            </a>
           </li>
           <li class="section-title">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="item_area">
         <div class="service-title-inner">
          <ul>
           <li class="section-title">
            <a href="/?1*116*.plusnews.koreadaily.com">
             PlusNews
            </a>
           </li>
           <li class="section-title">
            <a href="/?1*55*.ktown.koreadaily.com/">
             HelloKtown
            </a>
           </li>
           <li class="section-title">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="item_area">
         <div class="service-title-inner">
          <ul>
           <li class="section-title">
            [linkx]
            
           </li>
           <li class="section-title">
            [ahref]
            
           </li>
           <li class="section-title">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="item_area">
         <div>
          <p class="section-title">
           <a href="/etc/customer/complain.asp">
            고객센터
           </a>
          </p>
         </div>
         <div>
          <ul class="service-info-area">
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="/etc/customer/address.asp">
             배달 주소 변경
            </a>
           </li>
           <li>
            <a href="/etc/customer/delivery.asp">
             배달 사고 신고
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/etc/customer/ad.asp">
             광고문의
            </a>
           </li>
          </ul>
         </div>
        </div>
        <div class="item_area pa_left30">
         <div>
          <p class="section-title">
           미국생활 서비스
          </p>
         </div>
         <div>
          <ul class="service-info-area">
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="/">
             중앙 한인 업소록
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="/academy/">
             중앙교육문화센터
            </a>
           </li>
           <li>
            <a href="/product/jpoint_product_detail.asp?cat_no=8&amp;prd_idx=3583&amp;prd_branch=LA">
             싱글즈
            </a>
           </li>
          </ul>
         </div>
        </div>
        <div class="item_area pa_left50">
         <div>
          <p class="section-title">
           More+
          </p>
         </div>
         <div>
          <ul class="service-info-area">
           <li>
            <a href="/?1*64*.koreadaily.newspaperdirect.com">
             전자신문
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="clear">
       </div>
      </div>
      <div class="footer_web">
       <div class="companyinfo">
        <div class="footer_menu">
         <div class="menu">
          <ul>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/ad/index.asp" target="_blank">
             ADVERTISING
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/policy/privacy.html">
             PRIVACY POLICY
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
         <div class="copy">
          <p>
           © JMnet USA. All Rights Reserved.
          </p>
          <div class="addr">
           <ul>
            <li>
             690 Wilshire Place Los Angeles, CA 90005
            </li>
            <li>
             TEL. (213) 368-2500
            </li>
            <li>
             FAX. (213) 389-6196
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="footer_logo">
        </div>
       </div>
      </div>
     </div>
     <div class="clear">
     </div>
    </footer>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0168
  </b>
 </body>
</html>
|<---