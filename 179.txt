--->|<!DOCTYPE html>
<html lang="ko">
 <head>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" name="viewport"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="http://www.istarbucks.co.kr/common/img/kakaotalk.png" property="og:image"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <title id="titleJoin">
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
 </head>
 <body>
  <div id="wrap">
   <div id="skip-menu">
    [ahref]
    
    <a href="r">
     콘텐츠 바로가기
    </a>
   </div>
   <div id="top_MSR">
    <div class="top_msr_wrap" style="display:none;">
     <div class="user_greet">
      <div class="user_pic_area">
       <p class="msr_user_mask msr_user_mask01">
       </p>
       <p class="msr_user_mask msr_user_mask02">
       </p>
       <p class="msr_user_mask msr_user_mask03">
       </p>
       <p class="msr_user_mask msr_user_mask04">
       </p>
      </div>
      <p class="user_greet_txt">
       <strong>
       </strong>
       님, 안녕하세요!
      </p>
      <p class="msr_btn_setting">
       [ahref]
       
      </p>
     </div>
     <span class="msr_sep_line">
     </span>
     <div class="user_level" style="display:none;">
      [linkx]
      
     </div>
     <div class="msr_lead">
      <a href="/msr/msreward/level_benefit.do">
       <p class="icon_msr_cup">
       </p>
       <p class="msr_lead_txt">
        <strong>
         마이 스타벅스 리워드
        </strong>
        <br/>
        혜택에 편리함까지 더한
        <br/>
        마이 스타벅스 리워드를
        <br/>
        즐겨보세요.
       </p>
      </a>
     </div>
     <span class="msr_sep_line">
     </span>
     <div class="msr_card_info w_card_pic">
      <p class="msr_card_area" onclick="location.href = '/my/mycard_index.do';" style="cursor:pointer;">
      </p>
      <p class="card_info_txt">
       잔액
       <strong class="en balance">
        0
       </strong>
       원
      </p>
      <p class="btn_other_more">
       [ahref]
       
      </p>
     </div>
     <div class="msr_card_zone m_card_pic">
      <div class="mycard_area1">
      </div>
      <div class="mycard_area2">
       <p class="num">
       </p>
       <p class="barcord">
       </p>
      </div>
      <div class="mycard_one">
      </div>
      <p class="mycard_money_result">
       잔액
       <span class="en balance">
       </span>
       원
      </p>
      <p class="btn_other_more">
       [ahref]
       
      </p>
     </div>
     <div class="sb_card_regi">
      <a href=";">
       <p class="icon_add_card" onclick="location.href = '/my/mycard_info_input.do';">
       </p>
       <p class="sb_card_regi_txt">
        <strong>
         스타벅스 카드 등록
        </strong>
        <br/>
        카드를 등록하시고
        <br/>
        다양한 리워드를
        <br/>
        만나보세요.
       </p>
      </a>
     </div>
     <span class="msr_sep_line">
     </span>
     <div class="notice_icons">
      <div class="notice_icon1">
       [ahref]
       
      </div>
      <div class="notice_icon2">
       <a href="/my/calendar.do">
        <p>
        </p>
        <span>
         캘린더
        </span>
       </a>
      </div>
      <div class="notice_icon3">
       <a href="/my/ecoupon.do">
        <p>
         <span class="validCoupontCnt">
          0
         </span>
        </p>
        <span>
         e-쿠폰
        </span>
       </a>
      </div>
      <div class="notice_icon4">
       [ahref]
       
      </div>
     </div>
    </div>
    <div class="top_msr_nologin">
     <div class="top_msr_nologin_l">
      <i class="icon_before_login">
      </i>
      <p class="top_msr_mem_yet">
       <strong>
        스타벅스커피 코리아 회원이 아니세요?
       </strong>
       <br/>
       스타벅스커피 코리아 회원만의
       <br/>
       특별한 혜택을 누릴 수 있습니다.
      </p>
      <div class="msr_nologin_btns">
       <ul>
        <[keywordx]>
        </[keywordx]>
        <li>
         <a href="/mem/join.do">
          회원가입
         </a>
        </li>
       </ul>
      </div>
     </div>
     <span class="msr_sep_line">
     </span>
     <div class="top_msr_nologin_r">
      <i class="icon_sbcard_lead">
      </i>
      <p class="sbcard_lead_txt">
       <strong>
        스타벅스 카드를 가지고 계신가요?
       </strong>
       <br/>
       스타벅스 카드를 등록하시면, 마이 스타벅스 리워드 만의
       <br/>
       특별한 혜택을 누릴 수 있습니다.
      </p>
      <p class="btn_sbcard_regi">
       <a href="/my/mycard_info_input.do">
        카드 등록
       </a>
      </p>
     </div>
     <div class="top_msr_nologin_b">
      <p class="egift_lead_txt">
       <strong>
        스타벅스 카드가 없으신가요?
       </strong>
       <br/>
       스타벅스 매장에서 구매하시거나,
       <br/>
       PC/모바일웹, 스타벅스 앱에서
       <br/>
       e-Gift를 “나에게 선물하기”로 구매 후,
       <br/>
       편리하게 등록하세요!
       <br/>
       스타벅스 리워드의 특별한 혜택! 생일 쿠폰을 드립니다!
      </p>
      <p class="btn_egift_regi">
       <li>[ahref]</li><li>[linkx]</li><li>[area1][mkey1]</li>
      </p>
     </div>
    </div>
   </div>
   <div class="tablet_gnb_wrap">
    <h1 class="logo">
     [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
    </h1>
    <nav class="tablet_gnb_sep">
     <ul>
      <li class="tablet_gnb01">
       <a href=";" role="button" title="마이 리워드 레이어 열기">
        <span class="rCup2">
        </span>
       </a>
      </li>
      <li class="tablet_gnb02">
       <a href="/my/index.do" required="login">
        <span class="a11y">
         마이스타벅스
        </span>
       </a>
      </li>
      <li class="tablet_gnb03">
       <a href="/store/store_map.do">
        <span class="a11y">
         매장찾기
        </span>
       </a>
      </li>
      <li class="tablet_gnb04">
       [linkx]
       
      </li>
     </ul>
    </nav>
   </div>
   <div class="mob_gnb_dimm">
   </div>
   <div class="mob_gnb_wrap">
    <div class="mob_gnb_wrap_inner">
     <aside class="btn_gnb_close">
      <a href=";" role="button" title="메뉴닫기">
       닫기
      </a>
     </aside>
     <div class="mob_gnb_search">
      <div class="mob_gnb_search_inner">
       <label class="a11y" for="search_text">
        검색어
       </label>
       [linkx]
       
      </div>
     </div>
     <nav class="mob_gnb_menus">
      <ul>
       <li class="mob_gnb_ttl1">
        <a class="en" href=";" role="button">
         My Starbucks
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
       </li>
       <li>
        <a href="/my/index.do">
         한눈에 보기
        </a>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
           [pkeyx][area1][keywordx]<li>[linkx]</li><li>[ahref]</li>
          
         </li>
        </ul>
       </li>
       <li>
        <a href=";" role="button">
         My 스타벅스 카드
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          <a href="/my/mycard_index.do" required="login">
           보유 카드
          </a>
         </li>
         <li>
          <a href="/my/mycard_info_input.do" required="login">
           카드 등록
          </a>
         </li>
         <li>
          [linkx]
           [linkx]<li>[pkeyx]</li><li>[pkeyx]</li>
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          <a href="/msr/sceGift/gift_step1.do" required="login">
           선물하기
          </a>
         </li>
         <li>
          <a href="/my/egiftCard.do" required="login">
           선물 내역
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        <a href=";" role="button">
         My 쿠폰
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          <a href="/my/ecoupon.do?t=REG" required="login">
           등록하기
          </a>
         </li>
         <li>
          <a href="/my/ecoupon.do?t=GIFT" required="login">
           선물하기
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/my/eReceiptList.do" required="login">
         전자영수증
        </a>
       </li>
       <li class="msRnb_btn">
        [linkx]
        
       </li>
       <li>
        <a href=";" onclick="fn_moveDtAuth();" required="expressdt">
         My DT Pass
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href=";" role="button">
         개인정보관리
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          <a href="/my/myinfo_modify_login.do" required="login">
           개인정보확인 및 수정
          </a>
         </li>
         <li>
          [linkx]
           [area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][pkeyx][ahref][ahref][linkx][area1][mkey1][area1][mkey1][linkx][area1][mkey1][pkeyx][linkx][linkx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
          
         </li>
         <li>
          <a href="/my/myinfo_modify_pwd.do" required="login">
           비밀번호 변경
          </a>
         </li>
        </ul>
       </li>
      </ul>
      <ul>
       <li class="mob_gnb_ttl2">
        [ahref]
        
       </li>
       <li>
        <a href="/coffee/index.do">
         한눈에 보기
        </a>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/coffee/product_list.do?PACKAGE=01">
           스타벅스 비아
          </a>
         </li>
         <li>
          <a href="/coffee/product_list.do?PACKAGE=02">
           스타벅스 오리가미
          </a>
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/coffee/reserve_info.do">
         스타벅스 리저브™
        </a>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/coffee/americano.do">
           아메리카노
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
           [area1][mkey1][area1][keywordx]<li>[area1][keywordx]</li><li>[area1][keywordx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/coffee/mocha.do">
           모카
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          <a href="/coffee/higher_enjoy.do">
           커피 프레스
          </a>
         </li>
         <li>
          <a href="/coffee/higher_enjoy.do?PACKAGE=01">
           푸어 오버
          </a>
         </li>
         <li>
          <a href="/coffee/higher_enjoy.do?PACKAGE=02">
           아이스 푸어 오버
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          <a href="/coffee/story.do">
           스타벅스 로스트 스팩트럼
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/coffee/story.do?PACKAGE=05">
           스타벅스 디카페인
          </a>
         </li>
        </ul>
       </li>
      </ul>
      <ul>
       <li class="mob_gnb_ttl2">
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/menu/drink_list.do?CATE_CD=product_brood">
           브루드 커피
          </a>
         </li>
         <li>
          <a href="/menu/drink_list.do?CATE_CD=product_espresso">
           에스프레소
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/menu/drink_list.do?CATE_CD=product_blended">
           블렌디드
          </a>
         </li>
         <li>
          <a href="/menu/drink_list.do?CATE_CD=product_fizzo">
           스타벅스 피지오
          </a>
         </li>
         <li>
          <a href="/menu/drink_list.do?CATE_CD=product_tea">
           티(티바나)
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        <a href=";" role="button">
         푸드
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          <a href="/menu/food_list.do">
           전체보기
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/menu/food_list.do?CATE_CD=product_sandwich">
           샌드위치 &amp; 샐러드
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/menu/food_list.do?CATE_CD=product_icecream">
           아이스크림
          </a>
         </li>
        </ul>
       </li>
       <li>
        <a href=";" role="button">
         상품
         <span class="mob_gnb_arrow_down">
          [area1][mkey1][linkx][area1][keywordx][pkeyx][area1][mkey1][area1][mkey1][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][ahref][linkx][pkeyx][pkeyx]
         </span>
        </a>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/menu/product_list.do?CATE_CD=product_plastic">
           플라스틱 텀블러
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/menu/product_list.do?CATE_CD=product_vacuum">
           보온병
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/menu/product_list.do?CATE_CD=product_coffee">
           커피 용품
          </a>
         </li>
         <li>
          [ahref]
           <li>[area1][mkey1]</li><li>[pkeyx]</li><li>[pkeyx]</li>
          
         </li>
         <li>
          <a href="/menu/product_list.do?CATE_CD=product_planner">
           스타벅스 플래너
          </a>
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          <li>[ahref]</li><li>[pkeyx]</li><li>[ahref]</li>
         </li>
         <li>
          <a href="/menu/card_list.do?CATE_CD=product_offline">
           실물카드
          </a>
         </li>
         <li>
          <a href="/menu/card_list.do?CATE_CD=product_egift">
           e-Gift 카드
          </a>
         </li>
        </ul>
       </li>
       <li>
        <a href=";" role="button">
         메뉴 이야기
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          <a href="/store/store_nitro_coldbrew.do">
           나이트로 콜드브루
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/menuStory/teavana.do">
           스타벅스 티바나
          </a>
         </li>
        </ul>
       </li>
      </ul>
      <ul>
       <li class="mob_gnb_ttl2">
        [ahref]
        
       </li>
       <li>
        <a href="/store/index.do">
         한눈에 보기
        </a>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          <a href="/store/store_map.do?disp=quick">
           빠른 검색
          </a>
         </li>
         <li>
          <a href="/store/store_map.do?disp=locale">
           지역 검색
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/store/store_reserve.do">
         스타벅스 리저브™ 매장
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/store/store_park.do">
           파미에파크
          </a>
         </li>
        </ul>
       </li>
      </ul>
      <ul>
       <li class="mob_gnb_ttl2">
        <a class="en" href=";" role="button">
         RESPONSIBILITY
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
       </li>
       <li>
        <a href="/responsibility/index.do">
         한눈에 보기
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/responsibility/talent_donation.do">
           재능기부 카페 소식
          </a>
         </li>
         <li>
          <a href="/responsibility/community_store.do">
           커뮤니티 스토어
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/responsibility/our_agriculture.do">
           우리 농산물 사랑 캠페인
          </a>
         </li>
         <li>
          <a href="/responsibility/our_culture_defend.do">
           우리 문화 지키기
          </a>
         </li>
        </ul>
       </li>
       <li>
        <a href=";" role="button">
         환경보호 활동
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/responsibility/bean_recycling.do">
           커피 원두 재활용
          </a>
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/responsibility/fair_trade.do">
           공정무역 인증
          </a>
         </li>
         <li>
          <a href="/responsibility/farmer_support.do">
           커피 농가 지원 활동
          </a>
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/responsibility/sp_global_month.do">
           지구촌 봉사의 달
          </a>
         </li>
        </ul>
       </li>
      </ul>
      <ul>
       <li class="mob_gnb_ttl2">
        [ahref]
        
       </li>
       <li>
        <a href="/msr/index.do">
         한눈에 보기
        </a>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/msr/msreward/star.do">
           스타벅스 별
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/msr/scard/scard_gallery.do">
           스타벅스 카드 갤러리
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        <a href=";" role="button">
         스타벅스 e-Gift Card
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          <a href="/msr/sceGift/egift_information.do">
           스타벅스 e-Gift Card 소개
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/community/faq.do?menu_cd=STB2703&amp;cate=F22">
           자주하는 질문
          </a>
         </li>
        </ul>
       </li>
      </ul>
      <ul>
       <li class="mob_gnb_ttl2">
        <a class="en" href=";" role="button">
         WHAT'S NEW
         <span class="mob_gnb_arrow_down">
         </span>
        </a>
       </li>
       <li>
        <a href="/whats_new/index.do">
         한눈에 보기
        </a>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/whats_new/campaign_list.do?menu_cd=STB2812">
           스타벅스 카드
          </a>
         </li>
         <li>
          <a href="/whats_new/campaign_list.do?menu_cd=STB2813">
           마이 스타벅스 리워드
          </a>
         </li>
         <li>
          <a href="/whats_new/campaign_list.do?menu_cd=STB2814">
           온라인[ahref][pkeyx][pkeyx][area1][mkey1][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1]
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li>
          <a href="/whats_new/news_list.do">
           전체
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="/whats_new/store_event_list.do?search_date=1&amp;tab=1">
           신규 매장
          </a>
         </li>
        </ul>
       </li>
       <li>
        <a href="/whats_new/notice_list.do">
         공지사항
        </a>
       </li>
       <li>
        <a href="/whats_new/wallpaper.do">
         월페이퍼
        </a>
       </li>
      </ul>
     </nav>
    </div>
   </div>
   <div id="mstopWrap">
    <div id="gnb">
     <div class="sub_gnb_wrap">
      <div class="sub_gnb_wrap_inner">
       <h1 class="logo">
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h1>
       <nav class="util_nav">
        <ul>
         <li class="util_nav01 sign_out" style="display:none;">
          <a href=";">
           Sign out
          </a>
         </li>
         <li class="util_nav01 sign_in">
          [ahref]
          
         </li>
         <li class="util_nav02">
          [linkx]
          
         </li>
         <li class="util_nav03">
          [ahref]
          
         </li>
         <li class="util_nav04">
          [ahref]
          
         </li>
        </ul>
       </nav>
       <p class="btn_search">
        [ahref]
        
       </p>
       <a class="rCup3_wrap" href=";" role="button" title="마이 리워드 레이어 열기">
        <span class="rCup3">
        </span>
       </a>
      </div>
      <nav class="sub_gnb_nav">
       <div class="sub_gnb_nav_inner">
       </div>
      </nav>
     </div>
    </div>
   </div>
   <div id="container">
    <div class="sub_tit_wrap">
     <div class="sub_tit_inner">
      <h2>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <ul class="smap">
       <li>
        [linkx]
        
       </li>
       <li>
       </li>
       <li class="en">
        <a href="/menu/index.do">
         MENU
        </a>
       </li>
       <li>
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="content">
     <div class="product_kind_wrap">
      <p class="tit">
       분류 보기
      </p>
      <div class="product_kind_btn">
       [linkx]
       
      </div>
      <div class="product_toggle_wrap">
       <dl class="product_kind_tab">
        <dt class="dt1">
         [ahref]
         
        </dt>
        <dd>
         <div class="product_select_wrap">
          <form action="" method="post">
           <fieldset>
            <legend class="hid">
             푸드 카테고리 별 분류 보기
            </legend>
            <ul class="cate_list">
             <li>
              <label for="product_all">
               전체 상품보기
              </label>
             </li>
             <li>
              <label for="product_bakery">
               베이커리
              </label>
             </li>
             <li>
              <label for="product_cake">
               케이크
              </label>
             </li>
             <li>
              <label for="product_sandwich">
               샌드위치 &amp; 샐러드
              </label>
             </li>
             <li>
              <label for="product_wram_food">
               따뜻한 푸드
              </label>
             </li>
             <li>
              <label for="product_fruit_yogurt">
               과일 &amp; 요거트
              </label>
             </li>
             <li>
              <label for="product_snack">
               스낵 &amp; 미니 디저트
              </label>
             </li>
             <li>
              [linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][pkeyx][linkx][area1][mkey1][area1][mkey1][linkx][ahref][pkeyx][ahref][area1][keywordx][ahref]
             </li>
            </ul>
           </fieldset>
          </form>
         </div>
        </dd>
        <dt class="dt2">
         <a href=")" role="button" title="테마별 푸드보기">
          테마
         </a>
        </dt>
        <dd>
         <ul class="service_bn">
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href=")" role="button">
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </dd>
       </dl>
      </div>
     </div>
     <div class="product_result_wrap product_result_wrap01">
      <div class="product_view_tab_wrap">
       <div id="mn_select_wrap">
        <p class="cf_s_p">
        </p>
        <ul class="opt">
         <li>
          <span>
          </span>
         </li>
         <li>
          <span>
          </span>
         </li>
         <li>
          <span>
          </span>
         </li>
        </ul>
       </div>
       <dl class="product_view_tab product_view_tab01">
        <dt class="dt1">
         <a class="selected a1" href=";" role="button">
          사진으로 보기
         </a>
        </dt>
        <dd>
         <div class="product_list">
          <dl>
           <dt>
            <a href=")">
             베이커리
            </a>
           </dt>
           <dd>
            <ul class="product_bakery">
            </ul>
           </dd>
           <dt>
            <a href=")">
             케이크
            </a>
           </dt>
           <dd>
            <ul class="product_cake">
            </ul>
           </dd>
           <dt>
            [linkx]
            
           </dt>
           <dd>
            <ul class="product_sandwich">
            </ul>
           </dd>
           <dt>
            <a href=")">
             따뜻한 푸드
            </a>
           </dt>
           <dd>
            <ul class="product_wram_food">
            </ul>
           </dd>
           <dt>
            <a href=")">
             과일 &amp; 요거트
            </a>
           </dt>
           <dd>
            <ul class="product_fruit_yogurt">
            </ul>
           </dd>
           <dt>
            <a href=")">
             스낵 &amp; 미니 디저트
            </a>
           </dt>
           <dd>
            <ul class="product_snack">
             [ahref][area1][keywordx][pkeyx][linkx][ahref][linkx][pkeyx][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx]
            </ul>
           </dd>
           <dt>
            [linkx]
            
           </dt>
           <dd>
            <ul class="product_icecream">
            </ul>
           </dd>
          </dl>
         </div>
         <div class="product_no_result" style="display: none;">
          <p>
           검색 결과가 없습니다.
          </p>
         </div>
        </dd>
        <dt class="dt2">
         <a class="a2" href=";" role="button">
          영양정보로 보기
         </a>
        </dt>
        <dd>
         <h3>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h3>
         <table class="coffeeInfo mb60" summary="베이커리 영양정보">
          <caption class="hid">
           메뉴, 칼로리, 포화지방, 나트륨, 당류, 단백질
          </caption>
          <colgroup>
           <col width="16%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
          </colgroup>
          <thead>
           <tr>
            <th scope="col">
             메뉴
            </th>
            <th scope="col">
             칼로리(Kcal)
            </th>
            <th scope="col">
             포화지방(g)
            </th>
            <th scope="col">
             나트륨(mg)
            </th>
            <th scope="col">
             당류(g)
            </th>
            <th scope="col">
             단백질(g)
            </th>
           </tr>
          </thead>
          <tbody>
          </tbody>
         </table>
         <div class="m_coffee_info">
         </div>
         <h3>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h3>
         <table class="coffeeInfo mb60" summary="케이크 영양정보">
          <caption class="hid">
           메뉴, 칼로리, 포화지방, 나트륨, 당류, 단백질
          </caption>
          <colgroup>
           <col width="16%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
          </colgroup>
          <thead>
           <tr>
            <th scope="col">
             메뉴
            </th>
            <th scope="col">
             칼로리(Kcal)
            </th>
            <th scope="col">
             포화지방(g)
            </th>
            <th scope="col">
             나트륨(mg)
            </th>
            <th scope="col">
             당류(g)
            </th>
            <th scope="col">
             단백질(g)
            </th>
           </tr>
          </thead>
          <tbody>
          </tbody>
         </table>
         <div class="m_coffee_info">
         </div>
         <h3>
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h3>
         <table class="coffeeInfo mb60" summary="에스프레소 영양정보">
          <caption class="hid">
           메뉴, 칼로리, 포화지방, 나트륨, 당류, 단백질
          </caption>
          <colgroup>
           <col width="16%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
          </colgroup>
          <thead>
           <tr>
            <th scope="col">
             메뉴
            </th>
            <th scope="col">
             칼로리(Kcal)
            </th>
            <th scope="col">
             포화지방(g)
            </th>
            <th scope="col">
             나트륨(mg)
            </th>
            <th scope="col">
             당류(g)
            </th>
            <th scope="col">
             단백질(g)
            </th>
           </tr>
          </thead>
          <tbody>
           [linkx][area1][mkey1]<li>[pkeyx]</li>
          </tbody>
         </table>
         <div class="m_coffee_info">
         </div>
         <h3>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h3>
         <table class="coffeeInfo mb60" summary="따뜻한 푸드 영양정보">
          <caption class="hid">
           메뉴, 칼로리, 포화지방, 나트륨, 당류, 단백질
          </caption>
          <colgroup>
           <col width="16%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
          </colgroup>
          <thead>
           <tr>
            <th scope="col">
             메뉴
            </th>
            <th scope="col">
             칼로리(Kcal)
            </th>
            <th scope="col">
             포화지방(g)
            </th>
            <th scope="col">
             나트륨(mg)
            </th>
            <th scope="col">
             당류(g)
            </th>
            <th scope="col">
             단백질(g)
            </th>
           </tr>
          </thead>
          <tbody>
          </tbody>
         </table>
         <div class="m_coffee_info">
         </div>
         <h3>
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h3>
         <table class="coffeeInfo mb60" summary="과일 &amp; 요거트 영양정보">
          <caption class="hid">
           메뉴, 칼로리, 포화지방, 나트륨, 당류, 단백질
          </caption>
          <colgroup>
           <col width="16%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
          </colgroup>
          <thead>
           <tr>
            <th scope="col">
             메뉴
            </th>
            <th scope="col">
             칼로리(Kcal)
            </th>
            <th scope="col">
             포화지방(g)
            </th>
            <th scope="col">
             나트륨(mg)
            </th>
            <th scope="col">
             당류(g)
            </th>
            <th scope="col">
             단백질(g)
            </th>
           </tr>
          </thead>
          <tbody>
          </tbody>
         </table>
         <div class="m_coffee_info">
         </div>
         <h3>
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h3>
         <table class="coffeeInfo mb60" summary="스낵 &amp; 미니 디저트 영양정보">
          <caption class="hid">
           메뉴, 칼로리, 포화지방, 나트륨, 당류, 단백질
          </caption>
          <colgroup>
           <col width="16%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
          </colgroup>
          <thead>
           <tr>
            <th scope="col">
             메뉴
            </th>
            <th scope="col">
             칼로리(Kcal)
            </th>
            <th scope="col">
             포화지방(g)
            </th>
            <th scope="col">
             나트륨(mg)
            </th>
            <th scope="col">
             당류(g)
            </th>
            <th scope="col">
             단백질(g)
            </th>
           </tr>
          </thead>
          <tbody>
          </tbody>
         </table>
         <div class="m_coffee_info">
         </div>
         <h3>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h3>
         <table class="coffeeInfo mb60" summary="아이스크림 영양정보">
          <caption class="hid">
           메뉴, 칼로리, 포화지방, 나트륨, 당류, 단백질
          </caption>
          <colgroup>
           <col width="16%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
           <col width="14%"/>
          </colgroup>
          <thead>
           <tr>
            <th scope="col">
             메뉴
            </th>
            <th scope="col">
             칼로리(Kcal)
            </th>
            <th scope="col">
             포화지방(g)
            </th>
            <th scope="col">
             나트륨(mg)
            </th>
            <th scope="col">
             당류(g)
            </th>
            <th scope="col">
             단백질(g)
            </th>
           </tr>
          </thead>
          <tbody>
          </tbody>
         </table>
         <div class="m_coffee_info">
         </div>
        </dd>
       </dl>
      </div>
     </div>
     <div class="product_result_wrap product_result_wrap02">
      <div class="product_view_tab_wrap">
       <dl class="product_view_tab product_view_tab02">
        <dt style="display:none;">
        </dt>
        <dd>
         <div class="product_list">
          <dl>
           <dt style="display:none;">
           </dt>
           <dd>
            <ul>
            </ul>
           </dd>
          </dl>
         </div>
        </dd>
       </dl>
      </div>
     </div>
    </div>
   </div>
   <footer id="footer">
    <div class="footer_wrap">
     <div class="footer_menus">
      <ul class="footer_first_menu">
       <li class="footer_menu_ttl">
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li class="footer_2depth_ttl">
        [linkx]
        
        <ul>
         <li>
          [linkx]
           <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx]<li>[area1][keywordx]</li>
          
         </li>
         <li>
          <a href="/util/app_tip.do">
           애플리케이션 이용 팁
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        <a href="/util/online_survey.do">
         고객경험 설문조사
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
      <ul>
       <li class="footer_menu_ttl">
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/footer/company/mission.do">
         스타벅스 사명
        </a>
       </li>
       <li class="footer_2depth_ttl">
        <a href=")">
         스타벅스 소개
         <span class="footer_arrow_down">
         </span>
        </a>
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/footer/company/starbucks_history.do">
           연혁 및 외부 수상 내역
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
      <ul>
       <li class="footer_menu_ttl">
        <a class="en" href=";" id="goPage">
         CORPORATE SALES
         <span class="footer_arrow_down">
         </span>
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
      <ul>
       <li class="footer_menu_ttl">
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
      <ul>
       <li class="footer_menu_ttl">
        [ahref]
        
       </li>
       <li>
        <a href="/starbuckskorea" target="_blank">
         페이스북[area1][keywordx][linkx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
        </a>
       </li>
       <li>
        <a href="/StarbucksKorea" target="_blank">
         트위터
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
      <ul>
       <li class="footer_menu_ttl">
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="footer_util_btn">
     <ul>
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
       
       <a class="sign_out" href=";" style="display:none;">
        Sign Out
       </a>
      </li>
      <li class="last">
       <a href="/mem/join1.do">
        Join Us
       </a>
      </li>
     </ul>
    </div>
    <div class="footer_awards_wrap">
     <div class="footer_awards_wrap_inner">
      <div class="footer_slider_controller">
       <div class="footer_slider_controls">
       </div>
       <div class="footer_slider_pagers">
       </div>
      </div>
     </div>
    </div>
    <div class="dtPop ecoPop" id="msrCheckPop" style="display:none">
     <div class="head">
      <p class="tt">
      </p>
      <p class="close dtPopClose" id="dtPopCommonCloseBtn">
       <a href=")">
       </a>
      </p>
     </div>
     <div class="dtPopInner left" id="Msr" style="display:none">
      <p>
       [My DT Pass]는 스타벅스 카드를
       <br/>
       등록한 회원만 이용 가능한 서비스입니다.
       <br/>
       카드를 등록하시겠어요?
      </p>
      <br/>
     </div>
     <div class="dtPopBtn">
      [linkx]
      
      [ahref]
       [pkeyx]<li>[linkx]</li><li>[area1][mkey1]</li><li>[linkx]</li>
      
      [ahref]
      
     </div>
    </div>
    <div class="dtPop ecoPop" id="msrCheckPop_rewardTumbler" style="display:none">
     <div class="head">
      <p class="tt">
       마이 스타벅스 리워드 등록 안내
      </p>
      <p class="close ecoPopClose" id="tumblerPopCommonCloseBtn">
       <a href=")">
       </a>
      </p>
     </div>
     <div class="dtPopInner ecoPopDs left" id="msrCheckPop_rewardTumblerContents" style="display:none">
      <p>
       [개인컵 리워드 설정]은 스타벅스 카드를
       <br/>
       등록한 회원만 이용 가능한 서비스입니다.
       <br/>
       카드를 등록하시겠어요?
      </p>
      <br/>
     </div>
     <div class="dtPopBtn">
      <a class="dtPopBtn1 confirm pwdCheckBtn" id="tumblerPopConfirmBtn">
       확인
      </a>
      <a class="dtPopBtn2 cancel" id="tumblerPopCancelBtn">
       취소
      </a>
     </div>
    </div>
    <div class="dt_pop_up_dimm" style="display:none">
    </div>
    <aside class="copyright">
     <a class="c_00b050" href="/footer/etc/privacy.do">
      개인정보처리방침
     </a>
     <a class="mbn" href="/footer/etc/rules_vod.do">
      영상정보처리기기 운영관리 방침
     </a>
     <a href="/footer/etc/rules.do">
      홈페이지 이용약관
     </a>
     [ahref]
     
     <a class="mbn" href="/footer/etc/rules_msr.do">
      스타벅스 카드 이용약관
     </a>
     [linkx]
     
     <span class="br">
      [ahref]
      
     </span>
     <br/>
     [ahref]
     
     [linkx]
     
     <a class="btned_link" href="/footer/etc/sitemap.do">
      사이트 맵
     </a>
     <br/>
     <ul class="copy_menu">
      <li>
       사업자등록번호 : 201-81-21515
      </li>
      <li>
       (주)스타벅스커피 코리아 대표이사 : 송 데이비드 호섭
      </li>
      <li>
       TEL : 02) 3015-1100
      </li>
      <li>
       개인정보 책임자 : 양종환
      </li>
     </ul>
     <span class="en">
      ⓒ 2019 Starbucks Coffee Company. All Rights Reserved.
     </span>
    </aside>
   </footer>
   <form method="get" name="foodListForm">
   </form>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0198
  </b>
 </body>
</html>|<---