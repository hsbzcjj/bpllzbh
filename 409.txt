--->|<!DOCTYPE html>
<html class="no-js">
 <head>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8"/>
  <meta content="text/html" http-equiv="Content-Type"/>
  <meta content="width=device-width, initial-scale=1.0, minimum-scale=1.0" name="viewport"/>
 </head>
 <body class="pg pg-vertical pg-vertical--business pg-business pg-leaf pg-article international t-light" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100">
  <div class="user-msg">
   <div class="user-msg--container">
    <div class="user-msg--header">
     <div class="user-msg--header-text js-user-msg--header-text">
     </div>
     <div class="user-msg--close js-user-msg--close">
     </div>
    </div>
    <div class="user-msg--body">
     <div class="user-msg--body-text js-user-msg--body-text">
     </div>
    </div>
   </div>
  </div>
  <div id="header-wrap">
   <div id="sticky-ad-wrap">
    <div class="ad ad--epic ad--all t-light">
     <div class="ad-ad_bnr_atf_01 ad-refresh-adbanner" id="ad_bnr_atf_01">
     </div>
    </div>
   </div>
  </div>
  <div class="nav--plain-header" id="nav__plain-header">
   <div data-react-id="1">
    <div id="nav">
     <header class="Box-sc-1fet97o-0-header headerstyles__HeaderContainer-sc-1vh4dor-1 kanQnf" mode="dark">
      <div class="Text-sc-1amvtpj-0 headerstyles__OverflowMask-sc-1vh4dor-2 kJeTJG">
       <div class="Grid-sc-1kcyc0j-0 headerstyles__NavGrid-sc-1vh4dor-3 iblZxz">
        <div class="Cell-i0zvfi-0 headerstyles__NavBarContent-sc-1vh4dor-4 gcRmuT">
         <div class="Flex-sc-1sqrs56-0 branding__BrandingContainer-drmgik-0 cGmtBu" size="40">
          [linkx]
          
          <a aria-label="Business" class="Text-sc-1amvtpj-0-a Link-sc-1hkqz5e-0 branding__SectionBrandingLink-drmgik-1 cEAKgQ" color="#0C0C0C" data-analytics="header_top-nav" data-test="section-link" href="/business" mode="dark">
           <svg aria-hidden="true" class="business-logo-icon" fill="#FEFEFE" height="115px" viewbox="0 0 102 28" width="115px" xmlns="https://www.w3.org/2000/svg">
            <path d="M0,0.4h6.4c3.4,0,4.3,1.8,4.3,4.4v4.1c0,2.2-1,3.3-2,3.7c1.1,0.4,2.4,1.3,2.4,4v5.8 c0,2.9-1.3,4.9-4.3,4.9H0V0.4z M4.1,4.1v7h1.2c1.1,0,1.4-0.8,1.4-1.9V5.8c0-1.1-0.3-1.7-1.4-1.7L4.1,4.1z M4.1,15.1v8.5h1.2 c1.3,0,1.6-0.6,1.6-1.8v-4.9c0-1.1-0.3-1.7-1.6-1.7L4.1,15.1z M13,0.4h4.2v21.3c0,1.2,0.4,1.9,1.3,1.9c1,0,1.3-0.7,1.3-1.9V0.4H24 v21.1c0,3.8-1.5,6.2-5.1,6.2h-0.7c-3.6,0-5.1-2.3-5.1-6.2L13,0.4L13,0.4z M88,27.7L88,27.7c-0.5,0.1-1,0.1-1.5,0.1 c-1.6,0-2.9-0.4-3.8-1.2c-0.9-0.8-1.4-1.9-1.4-3.2v-6.3h4v5.3c0,0.5,0.1,0.9,0.3,1.2c0.2,0.3,0.5,0.4,1,0.4s0.8-0.1,1-0.4 c0.2-0.4,0.3-0.7,0.2-1.1v-2.3c0-0.8-0.3-1.5-0.7-2.2c-0.4-0.8-1.3-1.9-2.5-3.4c-0.9-1.1-1.7-2.2-2.4-3.4c-0.5-0.9-0.8-1.8-0.8-2.6 V4.4c0-1.3,0.5-2.4,1.4-3.2C83.6,0.4,84.9,0,86.5,0c1.7,0,2.9,0.4,3.9,1.2C91.3,2,91.7,3,91.7,4.4v5.7h-4V5.4c0-0.6-0.1-1-0.3-1.2 C87.3,4,87,3.9,86.5,3.9c-0.4,0-0.8,0.1-0.9,0.4s-0.3,0.6-0.3,1.2V8c0,0.4,0.2,0.9,0.4,1.2c0.3,0.5,0.9,1.4,1.9,2.7 c1.6,2,2.7,3.4,3.2,4.4c0.6,0.9,0.9,1.7,0.9,2.3v4.8l-1.9,2.2L88,27.7z M38.7,0.4h4.1v27h-4.1V0.4z M48.9,0.4l3.5,14.5V0.4h3.7v27 h-3.3l-3.9-15.5v15.5h-3.7v-27C45.2,0.4,48.9,0.4,48.9,0.4z M67.7,0.4v3.9h-5.2v7.1h4.1v4.1h-4.1v7.8h5.4v4.1h-9.5v-27 C58.4,0.4,67.7,0.4,67.7,0.4z M36.6,4.4v5.7h-4V5.4c0-0.6-0.1-1-0.3-1.2c-0.2-0.2-0.5-0.3-0.9-0.3c-0.5,0-0.8,0.1-1,0.4 c-0.2,0.2-0.3,0.6-0.3,1.2V8c0,0.4,0.2,0.9,0.4,1.2c0.3,0.5,0.9,1.4,1.9,2.7c1.6,2,2.7,3.4,3.2,4.4c0.6,0.9,0.9,1.7,0.9,2.3v4.8 c0,1.4-0.5,2.4-1.4,3.2c-0.9,0.8-2.2,1.2-3.9,1.2c-1.6,0-2.9-0.4-3.8-1.2c-0.9-0.8-1.4-1.9-1.4-3.2v-6.3h4v5.3 c0,0.5,0.1,0.9,0.3,1.2c0.2,0.3,0.5,0.4,1,0.4s0.8-0.1,1-0.4c0.2-0.4,0.3-0.7,0.2-1.1v-2.3c0-0.8-0.3-1.5-0.7-2.2 c-0.4-0.8-1.3-1.9-2.5-3.4c-0.9-1.1-1.7-2.2-2.4-3.4c-0.5-0.9-0.8-1.8-0.8-2.6V4.4c0-1.3,0.5-2.4,1.4-3.2S29.7,0,31.4,0 s2.9,0.4,3.9,1.2C36.1,2,36.6,3,36.6,4.4L36.6,4.4z M79.6,4.4v5.7h-4V5.4c0-0.6-0.1-1-0.3-1.2c-0.2-0.2-0.5-0.3-0.9-0.3 c-0.5,0-0.8,0.1-1,0.4s-0.3,0.6-0.3,1.2V8c0,0.4,0.2,0.9,0.4,1.2c0.3,0.5,0.9,1.4,1.9,2.7c1.6,2,2.7,3.4,3.2,4.4 c0.6,0.9,0.9,1.7,0.9,2.3v4.8c0,1.4-0.5,2.4-1.4,3.2c-0.9,0.8-2.2,1.2-3.9,1.2c-1.6,0-2.9-0.4-3.8-1.2c-0.9-0.8-1.4-1.9-1.4-3.2 v-6.3h4v5.3c0,0.5,0.1,0.9,0.3,1.2c0.2,0.3,0.5,0.4,1,0.4s0.8-0.1,1-0.4c0.2-0.4,0.3-0.7,0.2-1.1v-2.3c0-0.8-0.3-1.5-0.7-2.2 c-0.4-0.8-1.3-1.9-2.5-3.4c-0.9-1.1-1.7-2.2-2.4-3.4c-0.5-0.9-0.8-1.8-0.8-2.6V4.4c0-1.3,0.5-2.4,1.4-3.2c1-0.8,2.2-1.2,3.8-1.2 c1.7,0,2.9,0.4,3.9,1.2C79.1,2,79.6,3,79.6,4.4L79.6,4.4z">
            </path>
            <path d="M102 27.4l-5-5.7-4.9 5.7z" fill="#00C59E">
            </path>
           </svg>
          </a>
         </div>
         <div class="Flex-sc-1sqrs56-0 headerstyles__HideOnMobile-sc-1vh4dor-9 kkGIDQ">
          <nav class="nav-linksstyles__NavLink-sc-1tike8v-1 fxRQgN" data-role="nav-links" mode="dark">
           <ul class="nav-linksstyles__NavLinkList-sc-1tike8v-2 jJWZwe" mode="dark" type="collapsed">
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="markets" data-selected="false" mode="dark" type="collapsed">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="tech" data-selected="false" mode="dark" type="collapsed">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="media" data-selected="false" mode="dark" type="collapsed">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="success" data-selected="false" mode="dark" type="collapsed">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="perspectives" data-selected="false" mode="dark" type="collapsed">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="videos" data-selected="false" mode="dark" type="collapsed">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 cXrxeG" data-analytics="header_top-nav" href="/business/videos" mode="dark" name="business-videos" title="visit the Videos section" type="collapsed">
              Videos[linkx][linkx][area1][keywordx]
             </a>
            </li>
           </ul>
          </nav>
         </div>
         <div class="Box-sc-1fet97o-0 kcHWkA">
         </div>
         <div class="Flex-sc-1sqrs56-0 headerstyles__HideOnMobile-sc-1vh4dor-9 gWkClp">
          <div class="Box-sc-1fet97o-0 edition-pickerstyles__EditionPickerContainer-t9lxqp-0 cxwQJ" data-open="false" font-weight="normal" id="edition-picker-desktop" tabindex="0">
           <div class="Flex-sc-1sqrs56-0 fZmmKl" display="flex,flex,inline-flex" id="edition-picker-toggle-desktop" role="button">
            <span class="Text-sc-1amvtpj-0-span kFQqjo" color="inherit" display="inline-block" font-size="18,18,12" font-weight="bold">
             Edition
            </span>
            <svg aria-hidden="true" class="edition-pickerstyles__Caret-t9lxqp-1 botezQ caret-down-10-icon" fill="" height="64" viewbox="0 0 20 20" width="64" xmlns="https://www.w3.org/2000/svg">
             <path d="M19.33,4.3a1.65,1.65,0,0,0-2.16.25L10,12h0L2.84,4.55A1.67,1.67,0,0,0,.66,4.3,1.74,1.74,0,0,0,.47,6.85l8.28,8.62a1.73,1.73,0,0,0,2.5,0l8.28-8.62A1.72,1.72,0,0,0,19.33,4.3Z">
             </path>
            </svg>
           </div>
           <div class="Box-sc-1fet97o-0 edition-pickerstyles__Dropdown-t9lxqp-2 gCYjzu">
            <ul class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListContainer-t9lxqp-3 kBuWXM">
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="domestic" font-size="14,14,12">
              [linkx]
              
             </li>
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="international" font-size="14,14,12">
              International[area1][mkey1][area1][keywordx][area1][keywordx][area1][keywordx]
             </li>
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="arabic" font-size="14,14,12">
              [linkx]
              
             </li>
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="espanol" font-size="14,14,12">
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
          <button class="buttonstyles__ButtonBase-augw5g-0 headerstyles__IconButton-sc-1vh4dor-0 ikSuiI" data-test="searchButton" tabindex="0">
           <svg aria-hidden="true" class="search-icon" fill="currentColor" height="24" viewbox="0 0 64 64" width="24" xmlns="https://www.w3.org/2000/svg">
            <path d="M55.3,51.89,42.46,39a19.22,19.22,0,1,0-3.38,3.43L51.9,55.29a2.38,2.38,0,0,0,3.4,0A2.42,2.42,0,0,0,55.3,51.89ZM11.2,27.28a16,16,0,1,1,16,16.07A16.07,16.07,0,0,1,11.2,27.28Z">
            </path>
           </svg>
          </button>
         </div>
         <button class="buttonstyles__ButtonBase-augw5g-0 headerstyles__IconButton-sc-1vh4dor-0 ikSuiI" data-test="menuButton" tabindex="-2">
          <svg aria-hidden="true" class="menu-icon" fill="currentColor" height="24" viewbox="0 0 64 64" width="24" xmlns="https://www.w3.org/2000/svg">
           <path d="M52.75,47.84H11.25a2.08,2.08,0,1,0,0,4.16h41.5a2.08,2.08,0,1,0,0-4.16Z">
           </path>
           <path d="M52.75,28.92H11.25a2.08,2.08,0,1,0,0,4.16h41.5a2.08,2.08,0,1,0,0-4.16Z">
           </path>
           <path d="M11.25,14.16h41.5a2.08,2.08,0,1,0,0-4.16H11.25a2.08,2.08,0,1,0,0,4.16Z">
           </path>
          </svg>
         </button>
        </div>
       </div>
       <div class="Grid-sc-1kcyc0j-0 headerstyles__NavGrid-sc-1vh4dor-3 headerstyles__ExpandedContentGrid-sc-1vh4dor-5 dMhkXc" style="false:unset">
        <div class="Cell-i0zvfi-0 headerstyles__ExpandedContent-sc-1vh4dor-6 hFuiHj">
         <div class="Box-sc-1fet97o-0 headerstyles__ShowOnMobile-sc-1vh4dor-8 lgBbDS">
          <nav class="nav-linksstyles__NavLink-sc-1tike8v-1 fxRQgN" data-role="nav-links" mode="dark">
           <ul class="nav-linksstyles__NavLinkList-sc-1tike8v-2 jJWZwe" mode="dark" type="collapsed">
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="markets" data-selected="false" mode="dark" type="collapsed">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="tech" data-selected="false" mode="dark" type="collapsed">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 cXrxeG" data-analytics="header_expanded-nav" href="/business/tech" mode="dark" name="tech" title="visit the Tech section" type="collapsed">
              Tech
             </a>
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="media" data-selected="false" mode="dark" type="collapsed">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="success" data-selected="false" mode="dark" type="collapsed">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 cXrxeG" data-analytics="header_expanded-nav" href="/business/success" mode="dark" name="success" title="visit the Success section" type="collapsed">
              Success
             </a>
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="perspectives" data-selected="false" mode="dark" type="collapsed">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 hNYoQv" data-section="videos" data-selected="false" mode="dark" type="collapsed">
             [ahref]
             
            </li>
           </ul>
          </nav>
         </div>
         <div class="Box-sc-1fet97o-0 kJrFkT">
          <form action="/search" class="search-barstyles__SearchBarContainer-yoe3fw-0 gRlNZl" name="q">
           <button aria-label="Search" class="Flex-sc-1sqrs56-0 search-barstyles__Button-yoe3fw-2 kxpkSG" color="inherit" width="24,,80">
            <div class="Text-sc-1amvtpj-0 gYetWy">
             Search
            </div>
            <div class="Box-sc-1fet97o-0 bQmsQJ">
             <svg aria-hidden="true" class="arrow-right-10-icon" fill="#4D4D4D" height="10" viewbox="0 0 20 20" width="10" xmlns="https://www.w3.org/2000/svg">
              <path d="M1.53,8.52H14.76L10,3.71a1.5,1.5,0,0,1,2.12-2.12l7.44,7.47a1.49,1.49,0,0,1,0,2.12l-7.44,7.47a1.5,1.5,0,0,1-2.12,0,1.51,1.51,0,0,1,0-2.12l5-5H1.53a1.5,1.5,0,1,1,0-3Z">
              </path>
             </svg>
            </div>
            <div class="Box-sc-1fet97o-0 fyifOt">
             <svg aria-hidden="true" class="search-icon" fill="#4D4D4D" height="24" viewbox="0 0 64 64" width="24" xmlns="https://www.w3.org/2000/svg">
              <path d="M55.3,51.89,42.46,39a19.22,19.22,0,1,0-3.38,3.43L51.9,55.29a2.38,2.38,0,0,0,3.4,0A2.42,2.42,0,0,0,55.3,51.89ZM11.2,27.28a16,16,0,1,1,16,16.07A16.07,16.07,0,0,1,11.2,27.28Z">
              </path>
             </svg>
            </div>
           </button>
          </form>
         </div>
         <div class="Box-sc-1fet97o-0 headerstyles__ShowOnMobile-sc-1vh4dor-8 jhqHUu">
          <div class="Box-sc-1fet97o-0 edition-pickerstyles__EditionPickerContainer-t9lxqp-0 cxwQJ" data-open="false" font-weight="normal" id="edition-picker-mobile" tabindex="0">
           <div class="Flex-sc-1sqrs56-0 fZmmKl" display="flex,flex,inline-flex" id="edition-picker-toggle-mobile" role="button">
            <span class="Text-sc-1amvtpj-0-span kFQqjo" color="inherit" display="inline-block" font-size="18,18,12" font-weight="bold">
             Edition
            </span>
            <svg aria-hidden="true" class="edition-pickerstyles__Caret-t9lxqp-1 botezQ caret-down-10-icon" fill="" height="64" viewbox="0 0 20 20" width="64" xmlns="https://www.w3.org/2000/svg">
             <path d="M19.33,4.3a1.65,1.65,0,0,0-2.16.25L10,12h0L2.84,4.55A1.67,1.67,0,0,0,.66,4.3,1.74,1.74,0,0,0,.47,6.85l8.28,8.62a1.73,1.73,0,0,0,2.5,0l8.28-8.62A1.72,1.72,0,0,0,19.33,4.3Z">
             </path>
            </svg>
           </div>
           <div class="Box-sc-1fet97o-0 edition-pickerstyles__Dropdown-t9lxqp-2 gCYjzu">
            <ul class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListContainer-t9lxqp-3 kBuWXM">
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="domestic" font-size="14,14,12">
              [linkx]
              
             </li>
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="international" font-size="14,14,12">
              [linkx]
              
             </li>
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="arabic" font-size="14,14,12">
              [linkx]
              
             </li>
             <li class="Box-sc-1fet97o-0 edition-pickerstyles__LinkListItem-t9lxqp-4 eZpCJG" data-value="espanol" font-size="14,14,12">
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
          <hr class="headerstyles__Divider-sc-1vh4dor-7 djVXas" mode="dark"/>
         </div>
         <div class="Box-sc-1fet97o-0 headerstyles__ShowOnMobile-sc-1vh4dor-8 fXpHTU">
          <div class="Flex-sc-1sqrs56-0 branding__BrandingContainer-drmgik-0 cGmtBu" size="40">
           [linkx]
           
          </div>
         </div>
         <div class="Box-sc-1fet97o-0 jSTOdN">
          <div class="Flex-sc-1sqrs56-0 headerstyles__HideOnMobile-sc-1vh4dor-9 lhSbNP">
           <nav class="nav-linksstyles__NavLink-sc-1tike8v-1 fxRQgN" data-role="nav-links" mode="dark">
            <ul class="nav-linksstyles__NavLinkList-sc-1tike8v-2 eSykAx" mode="dark" type="expanded">
             <li>[area1][keywordx]</li><li>[area1][mkey1]</li>[area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li>
            </ul>
           </nav>
           <hr class="headerstyles__Divider-sc-1vh4dor-7 djVXas" mode="dark"/>
          </div>
          <nav class="nav-linksstyles__NavLink-sc-1tike8v-1 fxRQgN" data-role="nav-links" mode="dark">
           <ul class="nav-linksstyles__NavLinkList-sc-1tike8v-2 eSykAx" mode="dark" type="expanded">
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="world" mode="dark" type="expanded">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="us politics" mode="dark" type="expanded">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="business" mode="dark" type="expanded">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="health" mode="dark" type="expanded">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 bwVECJ" data-analytics="header_expanded-nav" href="/health" mode="dark" name="health" title="visit the Health section" type="expanded">
              Health
             </a>
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="entertainment" mode="dark" type="expanded">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="tech" mode="dark" type="expanded">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="style" mode="dark" type="expanded">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="travel" mode="dark" type="expanded">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="sports" mode="dark" type="expanded">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="videos" mode="dark" type="expanded">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="features" mode="dark" type="expanded">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="more" mode="dark" type="expanded">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 bwVECJ" data-analytics="header_expanded-nav" href="/more" mode="dark" name="more" title="visit the More section" type="expanded">
              More
             </a>
            </li>
           </ul>
          </nav>
         </div>
         <div class="Flex-sc-1sqrs56-0 headerstyles__SocialWrap-sc-1vh4dor-10 esMKKc">
          <hr class="headerstyles__Divider-sc-1vh4dor-7 djVXas" mode="dark"/>
          <div class="Flex-sc-1sqrs56-0 social-follow-barstyles__SocialBarContainer-er6pmh-0 cajTFO" data-test="social-follow-bar">
           <span class="Text-sc-1amvtpj-0-span jKFEoX" data-test="follow-text" font-size="12" font-weight="bold" letter-spacing="1.5">
            Follow CNN
            Business
           </span>
           <div class="Box-sc-1fet97o-0 social-follow-barstyles__KeylineDivider-er6pmh-2 gcODmO" mode="dark">
           </div>
           <ul class="Box-sc-1fet97o-0 fAJFBm">
            <li class="Box-sc-1fet97o-0 hyVhvp">
             [ahref]
             
            </li>
            <li class="Box-sc-1fet97o-0 hyVhvp">
             <a aria-label="Twitter feed" class="Text-sc-1amvtpj-0-a Link-sc-1hkqz5e-0 social-follow-barstyles__LinkItem-er6pmh-1 kGObJa" color="#0C0C0C" data-icon="twitter" href="/CNNbusiness" mode="dark" name="Twitter feed" rel="noopener" target="_blank noreferrer">
              <svg aria-hidden="true" class="twitter-icon" fill="" height="64" viewbox="0 0 64 64" width="64" xmlns="https://www.w3.org/2000/svg">
               <path d="M60,15.2c-2.1,0.9-4.3,1.5-6.6,1.7c2.4-1.4,4.2-3.6,5.1-6.1c-2.2,1.3-4.7,2.2-7.3,2.7 c-2.1-2.2-5.1-3.5-8.4-3.5c-6.3,0-11.5,5-11.5,11.1c0,0.9,0.1,1.7,0.3,2.5C22,23.2,13.6,18.8,7.9,12c-1,1.6-1.6,3.5-1.6,5.6 c0,3.9,2,7.3,5.1,9.2c-1.9-0.1-3.7-0.6-5.2-1.4v0.1c0,5.4,4,9.9,9.2,10.9c-1,0.3-2,0.4-3,0.4c-0.7,0-1.5-0.1-2.2-0.2 c1.5,4.4,5.7,7.6,10.7,7.7c-3.9,3-8.9,4.8-14.3,4.8c-0.9,0-1.8-0.1-2.7-0.2c5.1,3.2,11.1,5,17.6,5c21.1,0,32.7-16.9,32.7-31.6 c0-0.5,0-1,0-1.4C56.5,19.4,58.5,17.4,60,15.2">
               </path>
              </svg>
             </a>
            </li>
            <li class="Box-sc-1fet97o-0 hyVhvp">
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
     </header>
    </div>
   </div>
  </div>
  <div class="pg-right-rail-tall pg-wrapper">
   <div class="pg__background__image_wrapper">
   </div>
   <div class="ticker-ribbon">
    <div class="ticker-ribbon-module" id="REACT_ticker_ribbon">
    </div>
    <div class="ticker-entitlement-ad">
    </div>
   </div>
   <article class="pg-rail-tall pg-rail--align-right" itemscope="" itemtype="https://schema.org/NewsArticle">
    <meta content="business" itemprop="isPartOf"/>
    <meta content="business" itemprop="articleSection"/>
    <meta content="2019-06-11T15:24:22Z" itemprop="dateCreated"/>
    <meta content="2019-06-11T15:24:22Z" itemprop="datePublished"/>
    <meta content="2019-06-11T22:15:38Z" itemprop="dateModified"/>
    <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="url"/>
    <meta content="Leah Asmelash and Brian Ries, CNN" itemprop="author"/>
    <meta content="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables - CNN" itemprop="headline"/>
    <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="description"/>
    <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="keywords"/>
    <meta content="https://cdn.cnn.com/cnnnext/dam/assets/190610160046-kraft-salad-frosting-super-tease.jpg" itemprop="image"/>
    <meta content="https://cdn.cnn.com/cnnnext/dam/assets/190610160046-kraft-salad-frosting-super-tease.jpg" itemprop="thumbnailUrl"/>
    <meta content="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables" itemprop="alternativeHeadline"/>
    <div class="l-container">
     <div class="m-share m-share__rail js-share-rail m-share__bar js-share-bar">
      <div class="share-bar-whatsapp-container gigya-sharebar-element gig-bar-container gig-share-bar-container" data-social-media-name="whatsapp" data-storyurl="https://cnn.it/2Wt5NPX" data-title="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables" data-url="whatsapp://send?text=CNN story:">
       <div class="gig-button-container gig-button-container-count-none gig-button-container-whatsapp gig-share-button-container gig-button-container-horizontal">
        <div class="gig-button gig-share-button gig-button-up gig-button-count-none cnn-icon">
        </div>
       </div>
      </div>
      <div class="js-gigya-sharebar gigya-sharebar" data-description='Assuming kids will eat anything with frosting, Kraft has squeezed ranch dressing into tubes and relabled them "salad frosting." The goal? To help convince your children to eat more vegetables.' data-image-src="//cdn.cnn.com/cnnnext/dam/assets/190610160046-kraft-salad-frosting-super-tease.jpg" data-isshorturl="true" data-link="https://cnn.it/2Wt5NPX" data-subtitle="" data-title="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables" data-twitter-account="CNNI">
      </div>
      <div class="sharebar-video-embed-container sharebar-video-embed-element gig-bar-container gig-share-bar-container">
       <div class="gig-button-container gig-button-container-count-none gig-button-container-video-embed gig-share-button-container gig-button-container-horizontal">
        <div class="gig-button gig-share-button gig-button-up gig-button-count-none cnn-icon">
        </div>
       </div>
      </div>
     </div>
     <h1 class="pg-headline">
      <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
     </h1>
     <div class="metadata">
      <div class="metadata__info js-byline-images" data-bundle="byline">
       <p class="metadata__byline">
        <span class="metadata__byline__author">
         By Leah Asmelash and Brian Ries, CNN
        </span>
       </p>
       <p class="metadata__show">
       </p>
       <p class="update-time">
        Updated 2215 GMT (0615 HKT) June 11, 2019
        <span class="video__source top_source" id="js-pagetop_video_source">
        </span>
       </p>
      </div>
      <div class="fb-send-to-messenger-container">
       <div class="top-bar">
        <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx]</li><li>[pkeyx]</li>[area1][mkey1]<li>[ahref]</li><li>[area1][mkey1]</li>
       </div>
       <div class="messenger-content">
        <p>
         Chat with us in Facebook Messenger. Find out what's happening in the world as it unfolds.
        </p>
        <div class="fb-send-to-messenger" color="blue" data-ref="hi" messenger_app_id="989591237802489" page_id="5550296508" size="xlarge">
        </div>
       </div>
      </div>
      <div class="m-share m-share__rail-top js-share-rail-top m-share__bar js-share-bar">
       <div class="share-bar-whatsapp-container gigya-sharebar-element gig-bar-container gig-share-bar-container" data-social-media-name="whatsapp" data-storyurl="https://cnn.it/2Wt5NPX" data-title="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables" data-url="whatsapp://send?text=CNN story:">
        <div class="gig-button-container gig-button-container-count-none gig-button-container-whatsapp gig-share-button-container gig-button-container-horizontal">
         <div class="gig-button gig-share-button gig-button-up gig-button-count-none cnn-icon">
         </div>
        </div>
       </div>
       <div class="js-gigya-sharebar gigya-sharebar" data-description='Assuming kids will eat anything with frosting, Kraft has squeezed ranch dressing into tubes and relabled them "salad frosting." The goal? To help convince your children to eat more vegetables.' data-image-src="//cdn.cnn.com/cnnnext/dam/assets/190610160046-kraft-salad-frosting-super-tease.jpg" data-isshorturl="true" data-link="https://cnn.it/2Wt5NPX" data-subtitle="" data-title="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables" data-twitter-account="CNNI">
       </div>
       <div class="sharebar-video-embed-container sharebar-video-embed-element gig-bar-container gig-share-bar-container">
        <div class="gig-button-container gig-button-container-count-none gig-button-container-video-embed gig-share-button-container gig-button-container-horizontal">
         <div class="gig-button gig-share-button gig-button-up gig-button-count-none cnn-icon">
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="pg-rail-tall__wrapper">
      <div class="pg-side-of-rail pg-rail-tall__side">
       <div class="pg-rail-tall__head js-pg-rail-tall__head">
        <section class="zn zn-large-media zn-body zn--idx-0 zn--ordinary zn-has-one-container" data-containers="1" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-0-0" data-zn-id="large-media" data-zone-label="headerMedia" id="large-media">
         <div class="l-container">
          <div class="el__leafmedia el__leafmedia--featured-video-collection el__leafmedia--standard">
           <div class="el__featured-video">
            <div class="el__video__collection__close--expandable js__video__collection__close--expandable el__video_collection--close">
            </div>
            <div class="js-media__video media__video" id="media__video_large-media_0--wrapper">
             <div class="media__video--thumbnail" id="large-media_0--thumbnail">
              <div aria-hidden="true" class="js-video-demand media__video--demand">
              </div>
              <div aria-hidden="true" class="js-video-demand media__video--demand">
              </div>
             </div>
             <div class="video-red-spinner" id="spinner_large-media_0">
             </div>
             <div class="media__video--thumbnail-wrapper">
              <div class="video__end-slate--inactive video__end-slate js-video__end-slate" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780">
               <div class="l-container">
                <div class="video__end-slate__top-wrapper">
                 <div class="js-el__video__replayer-wrapper el__video__replayer-wrapper">
                  [ahref]
                  
                 </div>
                 <div class="video__end-slate__secondary">
                  <ul class="cn cn-list-hierarchical-xs cn--idx-0">
                   <h3 class="cd__headline-title">
                    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                   </h3>
                   <h2 class="cd__headline">
                    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                   </h2>
                  </ul>
                  <div class="video__end-slate__replay">
                   <a class="js-video__end-slate__replay">
                    <div class="video__end-slate__replay-icon cnn-icon">
                    </div>
                   </a>
                  </div>
                  <div class="video__end-slate__engage__wrapper">
                   <div class="video__end-slate__engage__text">
                    [linkx]
                    
                   </div>
                   <div class="video__end-slate__engage__more">
                    [linkx]
                    
                   </div>
                  </div>
                 </div>
                </div>
                <h4 class="video__end-slate__tertiary-title">
                 MUST WATCH
                </h4>
                <div class="js-video__end-slate__tertiary video__end-slate__tertiary">
                 <div class="js-video__end-slate__carousel video__end-slate__carousel">
                 </div>
                </div>
               </div>
              </div>
              <div class="media__video--responsive" data-video-id="business/2019/06/11/kraft-ranch-salad-frosting.cnn-business" id="large-media_0">
              </div>
             </div>
            </div>
           </div>
           <div class="cn cn-carousel-medium-strip cn--idx-0 cn-featured-14hwm4l" data-layout="carousel-medium-strip" id="cn-featured-14hwm4l">
            <h2 class="cn__title" data-analytics=" (16 Videos)_carousel-medium-strip_">
             <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
            </h2>
            <div class="loading-video-carousel">
            </div>
            <div class="js-owl-carousel owl-carousel carousel--fixed carousel-medium-strip" data-cut-format="" data-galleryname="Food and Drink" data-is-gallery="" data-slide-count="16">
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-0 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/06/11/kraft-ranch-salad-frosting.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/06/11/kraft-ranch-salad-frosting.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [linkx]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-1 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/08/02/plant-based-meat-explainer-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/08/02/plant-based-meat-explainer-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [ahref]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-2 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="cnnmoney" data-video-id="cnnmoney/2018/06/28/us-domestic-beer-sales-wine-liquor-cnnmoney-orig.cnnmoney" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/cnnmoney/2018/06/28/us-domestic-beer-sales-wine-liquor-cnnmoney-orig.cnnmoney/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [linkx]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-3 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/06/26/arbys-megetables-marrot-meat-vegetables-zw-sf-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/06/26/arbys-megetables-marrot-meat-vegetables-zw-sf-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [ahref]
                 
                </div>
                <div class="cd__content">
                 <[keywordx]>
                 </[keywordx]>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-4 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/06/17/shake-shack-ceo-international-expansion-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/06/17/shake-shack-ceo-international-expansion-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [linkx]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-5 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/06/28/hershey-chocolate-history-100-club.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/06/28/hershey-chocolate-history-100-club.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [ahref]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-6 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/01/08/new-impossible-burger.cnn" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/01/08/new-impossible-burger.cnn/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [ahref]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              [area1][mkey1][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][mkey1][pkeyx][ahref][pkeyx][pkeyx][linkx][linkx][pkeyx]
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-8 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/06/07/facebook-viral-video-blossom-food-facebook-snopes-orig-js.cnn" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/06/07/facebook-viral-video-blossom-food-facebook-snopes-orig-js.cnn/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [linkx]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-9 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2018/09/21/pressed-juicery-founder-fresh-money-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2018/09/21/pressed-juicery-founder-fresh-money-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [linkx]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-10 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/05/21/how-coca-cola-comes-up-with-new-flavors-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/05/21/how-coca-cola-comes-up-with-new-flavors-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [linkx]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-11 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/05/15/impossible-foods-cfo-david-lee.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/05/15/impossible-foods-cfo-david-lee.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [ahref]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-12 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/05/08/mcdonalds-menu-new-international-stroopwafel-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/05/08/mcdonalds-menu-new-international-stroopwafel-orig.cnn-business/video/playlists/business-fast-food/">
               <li>[linkx]</li>[ahref][ahref]
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-13 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/05/01/burger-king-happy-meal-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/05/01/burger-king-happy-meal-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [linkx]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-14 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/04/13/star-wars-coke-disneyland-galaxys-edge-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/04/13/star-wars-coke-disneyland-galaxys-edge-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 [ahref]
                 
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
             <div class="cn__column carousel__content__item">
              <article class="cd cd--card cd--video cd--idx-15 cd--medium cd--vertical cd--has-siblings cd--has-media cd--media__image" data-ad-section="const-video-leaf" data-bundle="one_tap" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780, full16x9: 1100" data-section-name="business" data-video-id="business/2019/04/12/oatly-oat-milk-orig.cnn-business" data-video-playlist-url="/video/playlists/business-fast-food/" data-vr-contentbox="/videos/business/2019/04/12/oatly-oat-milk-orig.cnn-business/video/playlists/business-fast-food/">
               <div class="cd__wrapper" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                <div class="media">
                 <a href="/videos/business/2019/04/12/oatly-oat-milk-orig.cnn-business/video/playlists/business-fast-food/">
                  <div class="img__preloader">
                  </div>
                  <noscript>
                  </noscript>
                  <i aria-hidden="true" class="media__icon icon-media-video cnn-icon" data-post-text="02:09 ">
                  </i>
                 </a>
                </div>
                <div class="cd__content">
                 <h3 class="cd__headline" data-analytics=" (16 Videos)_carousel-medium-strip_video_video">
                  [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                 </h3>
                </div>
               </div>
              </article>
             </div>
            </div>
           </div>
          </div>
         </div>
        </section>
       </div>
       <div class="pg-rail-tall__body" itemprop="articleBody">
        <section class="zn zn-body-text zn-body zn--idx-0 zn--ordinary zn-has-multiple-containers zn-has-11-containers" data-containers="11" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-1-0" data-zn-id="body-text" data-zone-label="bodyText" id="body-text">
         <div class="l-container">
          <div class="el__leafmedia el__leafmedia--sourced-paragraph">
           <p class="zn-body__paragraph speakable">
            <cite class="el-editorial-source">
             (CNN)
            </cite>
            Salad frosting. Yes, it's a thing.
           </p>
          </div>
          <div class="zn-body__paragraph speakable">
           Instead of simply asking kids to eat salad dressing -- or pretending the age-old condiment bears the hallmarks of a dessert staple -- Kraft Heinz has introduced "Salad Frosting," with the sweet tooth-invoking word right there on the label.
          </div>
          <div class="el__embedded el__embedded--standard">
           <div class="el__video--standard js__video--standard" data-autoplay="false">
            <div class="el__video__close--standard js__video__close--standard el__storyelements--close cnn-icon">
            </div>
            <div class="js-media__video media__video" id="media__video_body-text_3--wrapper">
             <div class="media__video--thumbnail" id="body-text_3--thumbnail">
              <div class="img__preloader">
              </div>
              <noscript>
              </noscript>
              <div aria-hidden="true" class="js-video-demand media__video--demand">
              </div>
              <div aria-hidden="true" class="js-video-demand media__video--demand">
              </div>
             </div>
             <div class="video-red-spinner" id="spinner_body-text_3">
             </div>
             <div class="media__video--thumbnail-wrapper">
              <div class="video__end-slate--inactive video__end-slate js-video__end-slate" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780">
               <div class="l-container">
                <div class="video__end-slate__top-wrapper">
                 <div class="js-el__video__replayer-wrapper el__video__replayer-wrapper">
                  [linkx]
                  
                 </div>
                 <div class="video__end-slate__secondary">
                  <ul class="cn cn-list-hierarchical-xs cn--idx-0">
                   <h3 class="cd__headline-title">
                    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                   </h3>
                   <h2 class="cd__headline">
                    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                   </h2>
                  </ul>
                  <div class="video__end-slate__replay">
                   <a class="js-video__end-slate__replay">
                    <div class="video__end-slate__replay-icon cnn-icon">
                    </div>
                   </a>
                  </div>
                  <div class="video__end-slate__engage__wrapper">
                   <div class="video__end-slate__engage__text">
                    [linkx]
                    
                   </div>
                   <div class="video__end-slate__engage__more">
                    [ahref]
                    
                   </div>
                  </div>
                 </div>
                </div>
                <h4 class="video__end-slate__tertiary-title">
                 MUST WATCH
                </h4>
                <div class="js-video__end-slate__tertiary video__end-slate__tertiary">
                 <div class="js-video__end-slate__carousel video__end-slate__carousel">
                 </div>
                </div>
               </div>
              </div>
              <div class="media__video--responsive" data-video-id="living/2014/02/27/vo-michelle-obama-dancing-vegetables-lets-move.cnn" id="body-text_3">
              </div>
              <div class="metadata" id="body-text_3-metadata">
               <p class="metadata__source">
                <span class="metadata__source-name">
                </span>
               </p>
              </div>
             </div>
             <div class="media__caption el__storyelement__title">
              <span class="el__storyelement__header">
               Why Michelle Obama dances with veggies
              </span>
              <span class="el__storyelement__gray">
               02:20[linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[pkeyx]
              </span>
             </div>
            </div>
           </div>
          </div>
          <div class="zn-body__paragraph speakable">
           But here's the catch: It's just a slim tube of ranch dressing, relabeled so parents can trick kids into happily eating their vegetables.
          </div>
          <div class="ad ad--epic ad--mobile" data-ad-text="show">
           <div class="ad-ad_rect_atf_02 ad-refresh-default" id="ad_rect_atf_02">
           </div>
          </div>
          <ul class="cn cn-list-hierarchical-xs cn--idx-5 cn-zoneAdContainer" data-layout="list-hierarchical-xs">
          </ul>
          <div class="zn-body__paragraph">
           "Kids will eat anything with frosting, right?" the company states in a news release. "It's a match made for dinnertime bliss."
          </div>
          <div class="zn-body__paragraph">
           True, but you have to wonder: What about kids who have tasted ranch dressing? Won't they quickly blow the cover?
          </div>
          <div class="zn-body__read-more">
           <div class="read-more-gradient">
           </div>
           <div class="read-more-button">
            <div class="read-more-link" id="js-body-read-more">
             Read More
            </div>
           </div>
          </div>
          <div class="zn-body__read-all">
           <div class="zn-body__paragraph">
            It's also worth noting that ranch dressing isn't exactly the healthiest option for kids -- or grown-ups. Just
            [ahref]
            
            has 110 calories, 11 grams of fat and 290 milligrams of sodium. The same amount of
            [linkx]
            
            has more calories -- 140 -- but just 5 grams of fat and 70 milligrams of sodium.
           </div>
          </div>
          <p class="zn-body__paragraph zn-body__footer">
          </p>
         </div>
         <div class="zn-body__read-more-outbrain">
          <ul class="cn cn-list-hierarchical-small-horizontal cn--idx-0 cn-" data-layout="list-hierarchical-small-horizontal">
           [area1][mkey1][pkeyx][linkx][ahref][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
          </ul>
         </div>
        </section>
        <div class="pg-body__social">
         <div class="m-share m-share__rail-bottom js-share-rail-bottom m-share__bar js-share-bar">
          <div class="share-bar-whatsapp-container gigya-sharebar-element gig-bar-container gig-share-bar-container" data-social-media-name="whatsapp" data-storyurl="https://cnn.it/2Wt5NPX" data-title="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables" data-url="whatsapp://send?text=CNN story:">
           <div class="gig-button-container gig-button-container-count-none gig-button-container-whatsapp gig-share-button-container gig-button-container-horizontal">
            <div class="gig-button gig-share-button gig-button-up gig-button-count-none cnn-icon">
            </div>
           </div>
          </div>
          <div class="js-gigya-sharebar gigya-sharebar" data-description='Assuming kids will eat anything with frosting, Kraft has squeezed ranch dressing into tubes and relabled them "salad frosting." The goal? To help convince your children to eat more vegetables.' data-image-src="//cdn.cnn.com/cnnnext/dam/assets/190610160046-kraft-salad-frosting-super-tease.jpg" data-isshorturl="true" data-link="https://cnn.it/2Wt5NPX" data-subtitle="" data-title="Kraft introduces 'Salad Frosting' to help trick your kids into eating more vegetables" data-twitter-account="CNNI">
          </div>
          <div class="sharebar-video-embed-container sharebar-video-embed-element gig-bar-container gig-share-bar-container">
           <div class="gig-button-container gig-button-container-count-none gig-button-container-video-embed gig-share-button-container gig-button-container-horizontal">
            <div class="gig-button gig-share-button gig-button-up gig-button-count-none cnn-icon">
            </div>
           </div>
          </div>
         </div>
        </div>
        <section class="zn zn-story-bottom zn-single-column zn--idx-1 zn--ordinary zn-has-multiple-containers zn-has-3-containers" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-1-1" data-zone-label="storyBottom" id="story-bottom">
         <div class="ad ad--epic ad--mobile" data-ad-text="show">
          <div data-ad-id="freewheel-rail-placeholder" data-ad-position="mobile" data-ad-refresh="default">
          </div>
         </div>
         <div class="zn-top">
          <div class="zn-top__background">
          </div>
         </div>
         <div class="l-container zn__background--content-relative">
          <div class="zn__containers">
           [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][area1][mkey1][pkeyx][linkx][pkeyx][ahref][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][ahref][linkx][area1][keywordx]
          </div>
         </div>
        </section>
        <section class="zn zn-ad-spon-ey1zd2 zn-left-fluid zn--idx-3 zn--ordinary zn-left-fluid-share zn-has-one-container" data-containers="1" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-1-3" id="ad-spon-ey1zd2">
         <div class="zn-top">
          <div class="l-container zn-top__label">
          </div>
          <div class="l-container zn-top__banner">
          </div>
          <div class="zn-top__background">
          </div>
         </div>
         <div class="l-container">
          <div class="zn__containers">
           <div class="column zn__column--idx-0">
            <div class="ad ad--epic ad--desktop" data-ad-text="show">
             <div class="ad-ad_bnr_btf_02 ad-refresh-adbody" id="ad_bnr_btf_02">
             </div>
            </div>
            <ul class="cn cn-list-hierarchical-xs cn--idx-0 cn-zoneAdContainer" data-layout="list-hierarchical-xs">
            </ul>
           </div>
          </div>
         </div>
        </section>
       </div>
      </div>
      <div class="pg-rail pg-rail-tall__rail" data-bundle="adzones">
       <section class="zn zn-sponsored-outbrain-1 zn-balanced zn--idx-0 zn--ordinary zn-has-two-containers" data-containers="2" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-2-0" data-zn-id="sponsored-outbrain-1" data-zone-label="rail-zone-1" id="sponsored-outbrain-1">
        <div class="zn-top">
         <div class="zn-top__background">
         </div>
        </div>
        <div class="l-container zn__background--content-relative">
         <div class="zn__containers">
          <div class="column zn__column--idx-0">
           <div class="ad ad--epic ad--tablet" data-ad-text="show">
            <div data-ad-id="freewheel-rail-placeholder" data-ad-position="tablet" data-ad-refresh="default">
            </div>
           </div>
           <div class="ad ad--epic ad--tablet" data-ad-text="show">
            <div data-ad-id="ad_rect_atf_01" data-ad-position="tablet" data-ad-refresh="adtop">
            </div>
           </div>
           <ul class="cn cn-list-hierarchical-small-horizontal cn--idx-0 cn-" data-layout="list-hierarchical-small-horizontal">
            <li>
             <article class="cd cd--tool cd--tool__outbrain" data-analytics="tool-type_list-hierarchical-small-horizontal_outbrain" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780" data-vr-contentbox="">
              <div class="OB_HOP_69">
               <div class="OUTBRAIN js-m-outbrain m-outbrain" data-ob-template="cnn" data-src="https://edition.cnn.com/2019/06/11/business/salad-frosting-trnd/index.html" data-widget-id="HOP_69">
               </div>
              </div>
             </article>
            </li>
           </ul>
          </div>
          <div class="column zn__column--idx-1">
           <div class="ad ad--epic ad--desktop" data-ad-text="show">
            <div data-ad-id="freewheel-rail-placeholder" data-ad-position="desktop" data-ad-refresh="default">
            </div>
           </div>
           <div class="ad ad--epic ad--desktop" data-ad-text="show">
            <div data-ad-id="ad_rect_atf_01" data-ad-position="desktop" data-ad-refresh="adtop">
            </div>
           </div>
           <ul class="cn cn-list-hierarchical-xs cn--idx-1 cn-zoneAdContainer" data-layout="list-hierarchical-xs">
           </ul>
          </div>
         </div>
        </div>
       </section>
       <section class="zn zn-sponsored-outbrain-2 zn-balanced zn--idx-1 zn--ordinary zn-has-one-container" data-containers="1" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-2-1" data-zn-id="sponsored-outbrain-2" data-zone-label="rail-zone-2" id="sponsored-outbrain-2">
        <div class="zn-top">
         <div class="zn-top__background">
         </div>
        </div>
        <div class="l-container zn__background--content-relative">
         <div class="zn__containers">
          <div class="column zn__column--idx-0">
           <ul class="cn cn-list-hierarchical-xs cn--idx-0 cn-" data-layout="list-hierarchical-xs">
           </ul>
          </div>
         </div>
        </div>
       </section>
       <section class="zn zn-sponsored-outbrain-3 zn-balanced zn--idx-2 zn--ordinary zn-has-two-containers" data-containers="2" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-2-2" data-zn-id="sponsored-outbrain-3" data-zone-label="rail-zone-3" id="sponsored-outbrain-3">
        <div class="zn-top">
         <div class="zn-top__background">
         </div>
        </div>
        <div class="l-container zn__background--content-relative">
         <div class="zn__containers">
          <div class="column zn__column--idx-0">
           <ul class="cn cn-list-hierarchical-small-horizontal cn--idx-0 cn-" data-layout="list-hierarchical-small-horizontal">
            <li>
             <article class="cd cd--tool cd--tool__outbrain" data-analytics="tool-type_list-hierarchical-small-horizontal_outbrain" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780" data-vr-contentbox="">
              <div class="OB_AR_18">
               <div class="OUTBRAIN js-m-outbrain m-outbrain" data-ob-template="cnn" data-src="https://edition.cnn.com/2019/06/11/business/salad-frosting-trnd/index.html" data-widget-id="AR_18">
               </div>
              </div>
             </article>
            </li>
           </ul>
          </div>
          <div class="column zn__column--idx-1">
           <ul class="cn cn-list-hierarchical-small-horizontal cn--idx-1 cn-" data-layout="list-hierarchical-small-horizontal">
            <li>
             <article class="cd cd--tool cd--tool__outbrain" data-analytics="tool-type_list-hierarchical-small-horizontal_outbrain" data-eq-pts="xsmall: 0, small: 300, medium: 460, large: 780" data-vr-contentbox="">
              <div class="OB_AR_45">
               <div class="OUTBRAIN js-m-outbrain m-outbrain" data-ob-template="cnn" data-src="https://edition.cnn.com/2019/06/11/business/salad-frosting-trnd/index.html" data-widget-id="AR_45">
               </div>
              </div>
             </article>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
       <section class="zn zn-partner-zone zn-balanced zn--idx-3 zn--ordinary zn-has-one-container" data-containers="1" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-2-3" data-zn-id="partner-zone" data-zone-label="partnerRail" id="partner-zone">
        <div class="zn-top">
         <div class="zn-top__background">
         </div>
        </div>
        <div class="l-container zn__background--content-relative">
         <div class="zn__containers">
          <div class="column zn__column--idx-0">
           <div class="ad ad--epic ad--tablet" data-ad-text="show">
            <div data-ad-id="ad_rect_btf_01" data-ad-position="tablet" data-ad-refresh="adbody">
            </div>
           </div>
           <div class="ad ad--epic ad--desktop" data-ad-text="show">
            <div data-ad-id="ad_rect_btf_01" data-ad-position="desktop" data-ad-refresh="adbody">
            </div>
           </div>
           <ul class="cn cn-list-hierarchical-xs cn--idx-0 cn-zoneAdContainer" data-layout="list-hierarchical-xs">
           </ul>
          </div>
         </div>
        </div>
       </section>
       <section class="zn zn- zn-body zn--idx-4 zn--ordinary zn-has-one-container" data-containers="1" data-eq-pts="xsmall: 0, medium: 460, large: 780, full16x9: 1100" data-vr-zone="zone-2-4" id="">
        <div class="l-container">
         <ul class="cn cn-list-hierarchical-xs cn--idx-0 cn-" data-layout="list-hierarchical-xs">
         </ul>
        </div>
       </section>
      </div>
      <div class="pg-comments pg-rail-tall__comments">
      </div>
     </div>
    </div>
    <div class="pg-below-rail">
    </div>
   </article>
   <div class="ad ad--epic ad--all t-light">
    <div class="ad-ad_bnr_btf_01 ad-refresh-adbody" id="ad_bnr_btf_01">
    </div>
   </div>
  </div>
  <div data-react-id="2">
   <div data-bundle="weather" id="footer-wrap">
    <footer class="footerstyles__FooterContainer-sc-1gdpf6x-0 kvGdHB" data-test="mode" mode="dark">
     <div class="Grid-sc-1kcyc0j-0 iGmkSZ">
      <div class="Cell-i0zvfi-0 laaVcq">
       <form action="/search" class="search-barstyles__SearchBarContainer-yoe3fw-0 gRlNZl" name="q">
        <button aria-label="Search" class="Flex-sc-1sqrs56-0 search-barstyles__Button-yoe3fw-2 kxpkSG" color="inherit" width="24,,80">
         <div class="Text-sc-1amvtpj-0 gYetWy">
          Search
         </div>
         <div class="Box-sc-1fet97o-0 bQmsQJ">
          <svg aria-hidden="true" class="arrow-right-10-icon" fill="#4D4D4D" height="10" viewbox="0 0 20 20" width="10" xmlns="https://www.w3.org/2000/svg">
           <path d="M1.53,8.52H14.76L10,3.71a1.5,1.5,0,0,1,2.12-2.12l7.44,7.47a1.49,1.49,0,0,1,0,2.12l-7.44,7.47a1.5,1.5,0,0,1-2.12,0,1.51,1.51,0,0,1,0-2.12l5-5H1.53a1.5,1.5,0,1,1,0-3Z">
           </path>
          </svg>
         </div>
         <div class="Box-sc-1fet97o-0 fyifOt">
          <svg aria-hidden="true" class="search-icon" fill="#4D4D4D" height="24" viewbox="0 0 64 64" width="24" xmlns="https://www.w3.org/2000/svg">
           <path d="M55.3,51.89,42.46,39a19.22,19.22,0,1,0-3.38,3.43L51.9,55.29a2.38,2.38,0,0,0,3.4,0A2.42,2.42,0,0,0,55.3,51.89ZM11.2,27.28a16,16,0,1,1,16,16.07A16.07,16.07,0,0,1,11.2,27.28Z">
           </path>
          </svg>
         </div>
        </button>
       </form>
      </div>
     </div>
     <div class="Grid-sc-1kcyc0j-0 iGmkSZ">
      <div class="Cell-i0zvfi-0 dxrNOP">
       <div class="Box-sc-1fet97o-0 footerstyles__NavWrap-sc-1gdpf6x-7 fKHCxI">
        <nav class="nav-linksstyles__NavLink-sc-1tike8v-1 fxRQgN" data-role="nav-links" mode="dark">
         <ul class="nav-linksstyles__NavLinkList-sc-1tike8v-2 eSykAx" mode="dark" type="expanded">
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="world" mode="dark" type="expanded">
           [linkx]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/asia" mode="dark" name="asia" title="visit the Asia section" type="expanded">
              Asia
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="us politics" mode="dark" type="expanded">
           [ahref]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li>[pkeyx][pkeyx]
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="business" mode="dark" type="expanded">
           <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 bwVECJ" data-analytics="footer" href="/business" mode="dark" name="business" title="visit the Business section" type="expanded">
            Business
           </a>
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/data/markets/" mode="dark" name="markets" title="visit the Markets section" type="expanded">
              Markets
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/business/success" mode="dark" name="success" title="visit the Success section" type="expanded">
              Success
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="health" mode="dark" type="expanded">
           [linkx]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][area1][keywordx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][mkey1]
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="entertainment" mode="dark" type="expanded">
           [linkx]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/entertainment/tv-shows" mode="dark" name="binge" title="visit the Binge section" type="expanded">
              Binge
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/entertainment/culture" mode="dark" name="culture" title="visit the Culture section" type="expanded">
              Culture
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="tech" mode="dark" type="expanded">
           [linkx]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="style" mode="dark" type="expanded">
           [ahref]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/style/fashion" mode="dark" name="fashion" title="visit the Fashion section" type="expanded">
              Fashion
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/style/architecture" mode="dark" name="architecture" title="visit the Architecture section" type="expanded">
              Architecture
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="travel" mode="dark" type="expanded">
           [ahref]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/travel/destinations" mode="dark" name="destinations" title="visit the Destinations section" type="expanded">
              Destinations
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/travel/food-and-drink" mode="dark" name="food-and-drink" title="visit the Food &amp; Drink section" type="expanded">
              Food &amp; Drink
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="sports" mode="dark" type="expanded">
           [ahref]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="videos" mode="dark" type="expanded">
           <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 bwVECJ" data-analytics="footer" href="/videos" mode="dark" name="videos" title="visit the Videos section" type="expanded">
            Videos
           </a>
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/go2" mode="dark" name="live-tv" title="visit the Live TV  section" type="expanded">
              Live TV
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/specials/digital-studios" mode="dark" name="digital-studios" title="visit the Digital Studios section" type="expanded">
              Digital Studios
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionSubLink-sc-1tike8v-7 eTGCbh" data-analytics="footer" href="/specials/tv/all-shows" mode="dark" name="all-shows" title="visit the TV Shows A-Z section" type="expanded">
              TV Shows A-Z
             </a>
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="features" mode="dark" type="expanded">
           [linkx]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 bVtGuw" data-section="more" mode="dark" type="expanded">
           [ahref]
           
           <ul class="nav-linksstyles__SectionSubNav-sc-1tike8v-5 jYsrSx">
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [ahref]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
            <li class="nav-linksstyles__SectionSubNavLinkWrap-sc-1tike8v-6 kMMbBh">
             [linkx]
             
            </li>
           </ul>
          </li>
         </ul>
        </nav>
       </div>
      </div>
     </div>
     <div class="Box-sc-1fet97o-0 footerstyles__HideOnDesktop-sc-1gdpf6x-5 FfFak">
      <hr class="footerstyles__Divider-sc-1gdpf6x-1 gSCewI" mode="dark"/>
     </div>
     <div class="Grid-sc-1kcyc0j-0 iGmkSZ">
      <div class="Cell-i0zvfi-0 dxrNOP">
       <div class="Flex-sc-1sqrs56-0 drTWbY">
        <div class="Flex-sc-1sqrs56-0 footerstyles__BrandingWrap-sc-1gdpf6x-3 dXfuWL">
         <div class="Flex-sc-1sqrs56-0 branding__BrandingContainer-drmgik-0 cGmtBu" size="40">
          [ahref]
          
          [linkx]
          
         </div>
        </div>
        <div class="Flex-sc-1sqrs56-0 footerstyles__SocialWrap-sc-1gdpf6x-2 bJEKPs">
         <div class="Flex-sc-1sqrs56-0 social-follow-barstyles__SocialBarContainer-er6pmh-0 cajTFO" data-test="social-follow-bar">
          <span class="Text-sc-1amvtpj-0-span jKFEoX" data-test="follow-text" font-size="12" font-weight="bold" letter-spacing="1.5">
           Follow CNN
           Business
          </span>
          <div class="Box-sc-1fet97o-0 social-follow-barstyles__KeylineDivider-er6pmh-2 gcODmO" mode="dark">
          </div>
          <ul class="Box-sc-1fet97o-0 fAJFBm">
           <li class="Box-sc-1fet97o-0 hyVhvp">
            [linkx]
            
           </li>
           <li class="Box-sc-1fet97o-0 hyVhvp">
            [linkx]
            
           </li>
           <li class="Box-sc-1fet97o-0 hyVhvp">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="Grid-sc-1kcyc0j-0 iGmkSZ">
      <div class="Cell-i0zvfi-0 dxrNOP">
       <div class="Box-sc-1fet97o-0 footerstyles__HideOnMobile-sc-1gdpf6x-6 lhGFUg">
        <hr class="footerstyles__Divider-sc-1gdpf6x-1 gSCewI" mode="dark"/>
       </div>
       <div class="Text-sc-1amvtpj-0 footerstyles__LegalText-sc-1gdpf6x-4 fXMcRx" mode="dark">
        Most stock quote data provided by BATS. Market indices are shown in real time, except for the DJIA, which is delayed by two minutes. All times are ET. Disclaimer. Morningstar: Copyright 2018 Morningstar, Inc. All Rights Reserved. Factset: FactSet Research Systems Inc.2018. All rights reserved. Chicago Mercantile Association: Certain market data is the property of Chicago Mercantile Exchange Inc. and its licensors. All rights reserved. Dow Jones: The Dow Jones branded   indices are proprietary to and are calculated, distributed and marketed by DJI Opco, a subsidiary of S&amp;P Dow Jones Indices LLC and have been licensed for use to S&amp;P Opco, LLC and CNN. Standard &amp; Poor's and S&amp;P are registered trademarks of Standard &amp; Poor's Financial Services LLC and Dow Jones is a registered trademark of Dow Jones Trademark Holdings LLC.  All content of the Dow Jones branded indices Copyright S&amp;P Dow Jones Indices LLC 2018 and/or its affiliates.
       </div>
       <div class="Box-sc-1fet97o-0 cApVqV">
        <nav class="nav-linksstyles__NavLink-sc-1tike8v-1 fxRQgN" data-role="nav-links" mode="dark">
         <ul class="nav-linksstyles__NavLinkList-sc-1tike8v-2 ksljyS" mode="dark" type="condensed">
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="terms of use" mode="dark" type="condensed">
           [ahref]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="privacy policy" mode="dark" type="condensed">
           [ahref]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="accessibility &amp; cc" mode="dark" type="condensed">
           <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 jafSvs" data-analytics="footer" href="/accessibility" mode="dark" name="accessibility" title="visit the Accessibility &amp; CC section" type="condensed">
            Accessibility &amp; CC
           </a>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="adchoices" mode="dark" type="condensed">
           [linkx]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="about us" mode="dark" type="condensed">
           [ahref]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="modern slavery act statement" mode="dark" type="condensed">
           [linkx]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="advertise with us" mode="dark" type="condensed">
           [linkx]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="cnn store" mode="dark" type="condensed">
           [ahref]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="newsletters" mode="dark" type="condensed">
           [linkx]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="transcripts" mode="dark" type="condensed">
           [linkx]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="license footage" mode="dark" type="condensed">
           <a class="nav-linksstyles__Link-sc-1tike8v-0 nav-linksstyles__SectionLink-sc-1tike8v-4 jafSvs" data-analytics="footer" href="/collection" mode="dark" name="license-footage" title="visit the License Footage section" type="condensed">
            License Footage
           </a>
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="cnn newsource" mode="dark" type="condensed">
           [linkx]
           
          </li>
          <li class="nav-linksstyles__SectionTitle-sc-1tike8v-3 iItFDo" data-section="sitemap" mode="dark" type="condensed">
           [linkx]
           
          </li>
         </ul>
        </nav>
       </div>
       <div class="Box-sc-1fet97o-0 copyright__CopyrightContainer-f3mp1a-2 LmrhR" data-component="copyright" mode="dark">
        <span class="Text-sc-1amvtpj-0-span copyright__Span-f3mp1a-0 kAXYDh" data-area="copyright-CNN">
         ©
         2019
         Cable News Network.
        </span>
        [ahref]
        
        <span class="Text-sc-1amvtpj-0-span copyright__Span-f3mp1a-0 kAXYDh">
         All Rights Reserved.
        </span>
        <span class="Text-sc-1amvtpj-0-span copyright__Span-f3mp1a-0 copyright__Network-f3mp1a-3 fgJwPp">
         CNN Sans ™ &amp; © 2016 Cable News Network.
        </span>
       </div>
      </div>
     </div>
    </footer>
   </div>
  </div>
  <div class="OUTBRAIN" data-ob-template="cnnedition" data-src="" data-widget-id="TR_1">
  </div>
  <noscript>
  </noscript>
  <div class="ad ad--epic ad--all-skin">
   <div class="ad-ad_oop_skin_01 ad-refresh-adbanner" id="ad_oop_skin_01">
   </div>
  </div>
  <div class="ad ad--epic ad--all">
   <div class="ad-ad_oop_float_01 ad-refresh-adbody" id="ad_oop_float_01">
   </div>
  </div>
  <div class="ad ad--epic ad--all">
   <div class="ad-ad_oop_float_02 ad-refresh-adbody" id="ad_oop_float_02">
   </div>
  </div>
  <div class="ad ad--epic ad--all">
   <div class="ad-ad_nat_btf_01 ad-refresh-adbody" id="ad_nat_btf_01">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0452
  </b>
 </body>
</html>|<---