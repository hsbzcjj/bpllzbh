--->|<!DOCTYPE html>
<html class="os__chrome" data-reactroot="" lang="ko">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta charset="utf-8"/>
  <meta content="#000000" name="theme-color"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="on" http-equiv="x-dns-prefetch-control"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="//pics.auction.co.kr/pc/common/sns/facebook/default.png" property="og:image"/>
  <meta content="옥션 바지 상품" property="og:image:alt"/>
 </head>
 <body class="service__snowwhite page__list">
  <div id="root">
   <h4 class="text--module_title">
    컨텐츠 퀵메뉴
   </h4>
   <ul id="list--local_skip_navigation">
    <li class="item">
     <a class="link" href="y">
      플로팅 검색 바로가기
     </a>
    </li>
    <li class="item">
     <a class="link" href="n">
      검색 결과 안내 바로가기
     </a>
    </li>
    <li class="item">
     <a class="link" href="r">
      카테고리 및 상세검색 메뉴 바로가기
     </a>
    </li>
    <li class="item">
     <a class="link" href="y">
      검색 결과 컨텐츠 바로가기
     </a>
    </li>
   </ul>
   <div class="state--content_view_type__list" id="content">
    <h3 class="text--region_title">
     <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
    </h3>
    <div class="section--module_wrap" module-design-id="1025">
     <div class="section--content_header_container">
      <div id="region--content_header">
       <h4 class="text--module_title">
        로고
       </h4>
       <a class="link--main" href="r" id="region--content_header_entry" title="Auction 홈 화면으로 바로가기">
        <span class="icon">
         <span class="ir">
          Auction 홈 화면으로 바로가기
         </span>
        </span>
       </a>
       <div class="section--form_keyword_search">
        <h4 class="text--module_title">
         키워드 검색
        </h4>
        <label class="custom_form--label" for="search">
         키워드 검색어 입력창
        </label>
        <button class="button--keyword_search" type="button">
         <span class="ir">
          키워드 검색 버튼
         </span>
        </button>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           [ahref]
           
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item">
           <a class="link" href="/list?category=08011000&amp;s=8">
            <span class="ir">
             판매인기순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item">
           [ahref]
           
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item">
           <a class="link" href="/list?category=08011000&amp;s=5">
            <span class="ir">
             높은가격순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            높은가격순
           </span>
          </li>
          <li class="item">
           <a class="link" href="/list?category=08011000&amp;s=13">
            <span class="ir">
             평점높은순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         <a class="link--button_view_type gallery_view" href="/list?category=08011000&amp;v=g" title="갤러리 뷰 보기">
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="ir">
           갤러리 뷰 보기
          </span>
         </a>
         <a class="link--button_view_type list_view on" href="/list?category=08011000&amp;v=l" title="리스트 뷰 보기">
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="ir">
           리스트 뷰 보기
          </span>
         </a>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="section--content_body_container">
     <div id="region--content_status_information">
      <h3 class="text--region_title">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <div class="section--module_wrap" module-design-id="20">
       <div class="section--breadcrumb">
        <ul class="list--breadcrumb">
         <li class="item">
          <a class="link--page" href="r" title="홈 카테고리 페이지로 이동합니다.">
           <span class="text--page_name">
            홈
           </span>
          </a>
         </li>
         <li class="item">
          [ahref]
          
         </li>
         <li class="item">
          [ahref]
          
         </li>
         <li class="item on">
          <span class="text--page">
           <span class="text--page_name">
            바지
           </span>
           <span class="text--item_total">
            (
            31,740
            )
           </span>
          </span>
         </li>
        </ul>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           <a class="link" href="/list?category=08011000&amp;s=7">
            <span class="ir">
             옥션랭킹순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item">
           <a class="link" href="/list?category=08011000&amp;s=8">
            <span class="ir">
             판매인기순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            높은가격순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item">
           <a class="link" href="/list?category=08011000&amp;s=3">
            <span class="ir">
             신규등록순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         [ahref]
         
         <a class="link--button_view_type list_view on" href="/list?category=08011000&amp;v=l" title="리스트 뷰 보기">
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="ir">
           리스트 뷰 보기
          </span>
         </a>
        </div>
       </div>
      </div>
     </div>
     <div class="section--inner_content_body">
      <div id="region--content_filter">
       <h3 class="text--region_title">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h3>
       <div class="section--content_filter_container">
        <div class="section--module_wrap" module-design-id="1021">
         <div class="component component--filter type--toggle name--category on">
          <h4 class="text--module_title">
           카테고리
           필터
          </h4>
          <p class="filter_title">
           카테고리
          </p>
          <button class="button--filter_toggle" title="'카테고리 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '카테고리 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content section--search_category">
           <a class="link--category_all parent" href="/list?category=08010000" title="남성 골프의류">
            남성 골프의류
           </a>
           <div class="section--category_group">
            <ul class="list--category depth3">
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              <a class="link--category" href="/list?category=08011900">
               라운드티셔츠
              </a>
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              <a class="link--category" href="/list?category=08010400">
               우의
              </a>
             </li>
             <li class="item depth3">
              <a class="link--category" href="/list?category=08012100">
               조끼
              </a>
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item button">
              <button class="button--show_more_filter_as_each_item" title="카테고리 더보기" type="button">
               <span class="text">
                더보기
               </span>
              </button>
             </li>
            </ul>
           </div>
          </div>
         </div>
         <div class="component component--filter type--simple name--free_shipping">
          <h4 class="text--module_title">
           무료배송
          </h4>
          <div class="filter_content">
           <div class="section__checkbox_form">
            <label class="custom_form--label" data-montelena-acode="100001163" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__isFreeShipping--1무료배송" title="필터 조건에 '무료배송' 추가">
             <span class="text">
              무료배송
             </span>
            </label>
           </div>
          </div>
         </div>
         <div class="component component--filter type--toggle name--option on">
          <h4 class="text--module_title">
           브랜드
           필터
          </h4>
          <p class="filter_title">
           브랜드
          </p>
          <button class="button--filter_toggle" title="'브랜드 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '브랜드 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section__checkbox_form_group">
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27584","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--0아디다스골프" title="필터 조건에 '아디다스골프' 추가">
              <span class="text">
               아디다스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34150","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--1제이디엑스" title="필터 조건에 '제이디엑스' 추가">
              <span class="text">
               제이디엑스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29056","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--2커터앤벅" title="필터 조건에 '커터앤벅' 추가">
              <span class="text">
               커터앤벅
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29791","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--3아디다스" title="필터 조건에 '아디다스' 추가">
              <span class="text">
               아디다스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33394","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--4나이키골프" title="필터 조건에 '나이키골프' 추가">
              <span class="text">
               나이키골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36300","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--5임페리얼" title="필터 조건에 '임페리얼' 추가">
              <span class="text">
               임페리얼
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23830","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--6클리브랜드" title="필터 조건에 '클리브랜드' 추가">
              <span class="text">
               클리브랜드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25901","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--7푸마" title="필터 조건에 '푸마' 추가">
              <span class="text">
               푸마
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34286","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--8풋조이" title="필터 조건에 '풋조이' 추가">
              <span class="text">
               풋조이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29394","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--9마스터베어" title="필터 조건에 '마스터베어' 추가">
              <span class="text">
               마스터베어
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33037","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--10아놀드파마" title="필터 조건에 '아놀드파마' 추가">
              <span class="text">
               아놀드파마
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35838","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--11르꼬끄" title="필터 조건에 '르꼬끄' 추가">
              <span class="text">
               르꼬끄
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26200","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--12캘러웨이" title="필터 조건에 '캘러웨이' 추가">
              <span class="text">
               캘러웨이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36718","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--13마코" title="필터 조건에 '마코' 추가">
              <span class="text">
               마코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22651","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--14미즈노" title="필터 조건에 '미즈노' 추가">
              <span class="text">
               미즈노
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29435","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--15브리지스톤" title="필터 조건에 '브리지스톤' 추가">
              <span class="text">
               브리지스톤
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"60224","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--16헤지스골프" title="필터 조건에 '헤지스골프' 추가">
              <span class="text">
               헤지스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36663","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--17오클리" title="필터 조건에 '오클리' 추가">
              <span class="text">
               오클리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20978","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--18언더아머" title="필터 조건에 '언더아머' 추가">
              <span class="text">
               언더아머
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28175","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--19제임스마틴" title="필터 조건에 '제임스마틴' 추가">
              <span class="text">
               제임스마틴
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28919","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--20피가로스포츠" title="필터 조건에 '피가로스포츠' 추가">
              <span class="text">
               피가로스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31858","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--21핑" title="필터 조건에 '핑' 추가">
              <span class="text">
               핑
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35197","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--22파리게이츠" title="필터 조건에 '파리게이츠' 추가">
              <span class="text">
               파리게이츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21923","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--23김영주골프" title="필터 조건에 '김영주골프' 추가">
              <span class="text">
               김영주골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32690","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--24필우드" title="필터 조건에 '필우드' 추가">
              <span class="text">
               필우드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"66418","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--25카파" title="필터 조건에 '카파' 추가">
              <span class="text">
               카파
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27356","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--26럭스아웃도어" title="필터 조건에 '럭스아웃도어' 추가">
              <span class="text">
               럭스아웃도어
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"60233","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--27엘르골프" title="필터 조건에 '엘르골프' 추가">
              <span class="text">
               엘르골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33947","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--28보그너" title="필터 조건에 '보그너' 추가">
              <span class="text">
               보그너
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27529","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--29아스토레" title="필터 조건에 '아스토레' 추가">
              <span class="text">
               아스토레
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35839","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--30르꼬끄골프" title="필터 조건에 '르꼬끄골프' 추가">
              <span class="text">
               르꼬끄골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24572","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--31먼싱웨어" title="필터 조건에 '먼싱웨어' 추가">
              <span class="text">
               먼싱웨어
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27894","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--32와이드앵글" title="필터 조건에 '와이드앵글' 추가">
              <span class="text">
               와이드앵글
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26913","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--33럭스" title="필터 조건에 '럭스' 추가">
              <span class="text">
               럭스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31136","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--34그린조이" title="필터 조건에 '그린조이' 추가">
              <span class="text">
               그린조이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"61225","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--35닥스골프" title="필터 조건에 '닥스골프' 추가">
              <span class="text">
               닥스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32841","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--36테일러메이드" title="필터 조건에 '테일러메이드' 추가">
              <span class="text">
               테일러메이드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33438","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--37데니스골프" title="필터 조건에 '데니스골프' 추가">
              <span class="text">
               데니스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"60239","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--38휠라골프" title="필터 조건에 '휠라골프' 추가">
              <span class="text">
               휠라골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36567","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--39타이틀리스트" title="필터 조건에 '타이틀리스트' 추가">
              <span class="text">
               타이틀리스트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"61252","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--40빈폴골프" title="필터 조건에 '빈폴골프' 추가">
              <span class="text">
               빈폴골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28050","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--41잭니클라우스" title="필터 조건에 '잭니클라우스' 추가">
              <span class="text">
               잭니클라우스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20387","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--42링스스포츠" title="필터 조건에 '링스스포츠' 추가">
              <span class="text">
               링스스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"37363","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--43트래디" title="필터 조건에 '트래디' 추가">
              <span class="text">
               트래디
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20728","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--44세바스챤골프" title="필터 조건에 '세바스챤골프' 추가">
              <span class="text">
               세바스챤골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31455","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--45루이까스텔" title="필터 조건에 '루이까스텔' 추가">
              <span class="text">
               루이까스텔
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31215","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--46나이키" title="필터 조건에 '나이키' 추가">
              <span class="text">
               나이키
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30094","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--47울시" title="필터 조건에 '울시' 추가">
              <span class="text">
               울시
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35065","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--48레노마골프" title="필터 조건에 '레노마골프' 추가">
              <span class="text">
               레노마골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33435","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--49스릭슨" title="필터 조건에 '스릭슨' 추가">
              <span class="text">
               스릭슨
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25079","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--50사라토가" title="필터 조건에 '사라토가' 추가">
              <span class="text">
               사라토가
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32230","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--51트레비스" title="필터 조건에 '트레비스' 추가">
              <span class="text">
               트레비스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21735","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--52올포유" title="필터 조건에 '올포유' 추가">
              <span class="text">
               올포유
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31155","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--53팜스프링스" title="필터 조건에 '팜스프링스' 추가">
              <span class="text">
               팜스프링스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31270","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--54데상트" title="필터 조건에 '데상트' 추가">
              <span class="text">
               데상트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43100","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--55볼빅" title="필터 조건에 '볼빅' 추가">
              <span class="text">
               볼빅
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27400","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--56슈페리어" title="필터 조건에 '슈페리어' 추가">
              <span class="text">
               슈페리어
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30416","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--57콜핑" title="필터 조건에 '콜핑' 추가">
              <span class="text">
               콜핑
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23158","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--58윌슨" title="필터 조건에 '윌슨' 추가">
              <span class="text">
               윌슨
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34854","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--59BTR" title="필터 조건에 'BTR' 추가">
              <span class="text">
               BTR
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29116","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--60디즈니골프" title="필터 조건에 '디즈니골프' 추가">
              <span class="text">
               디즈니골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27977","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--61제이린드버그" title="필터 조건에 '제이린드버그' 추가">
              <span class="text">
               제이린드버그
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30152","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--62쟌피엘" title="필터 조건에 '쟌피엘' 추가">
              <span class="text">
               쟌피엘
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"67339","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--63팬텀" title="필터 조건에 '팬텀' 추가">
              <span class="text">
               팬텀
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34676","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--64왁" title="필터 조건에 '왁' 추가">
              <span class="text">
               왁
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25807","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--65까스텔바작" title="필터 조건에 '까스텔바작' 추가">
              <span class="text">
               까스텔바작
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28900","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--66그렉노먼" title="필터 조건에 '그렉노먼' 추가">
              <span class="text">
               그렉노먼
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28174","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--67강정윤골프" title="필터 조건에 '강정윤골프' 추가">
              <span class="text">
               강정윤골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23560","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--68피지알" title="필터 조건에 '피지알' 추가">
              <span class="text">
               피지알
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27278","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--69블랙캣츠" title="필터 조건에 '블랙캣츠' 추가">
              <span class="text">
               블랙캣츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23589","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--70휘너스" title="필터 조건에 '휘너스' 추가">
              <span class="text">
               휘너스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29035","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--71데상트골프" title="필터 조건에 '데상트골프' 추가">
              <span class="text">
               데상트골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27837","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--72에어워크" title="필터 조건에 '에어워크' 추가">
              <span class="text">
               에어워크
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"42227","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--73헤스켈" title="필터 조건에 '헤스켈' 추가">
              <span class="text">
               헤스켈
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21400","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--74엘로드" title="필터 조건에 '엘로드' 추가">
              <span class="text">
               엘로드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28417","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--75한샘" title="필터 조건에 '한샘' 추가">
              <span class="text">
               한샘
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"59125","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--76나이스어스" title="필터 조건에 '나이스어스' 추가">
              <span class="text">
               나이스어스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28035","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--77이동수골프" title="필터 조건에 '이동수골프' 추가">
              <span class="text">
               이동수골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36277","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--78삼정" title="필터 조건에 '삼정' 추가">
              <span class="text">
               삼정
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36301","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--79최경주골프" title="필터 조건에 '최경주골프' 추가">
              <span class="text">
               최경주골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"54107","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--80알레어골프" title="필터 조건에 '알레어골프' 추가">
              <span class="text">
               알레어골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22388","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--81뉴발란스" title="필터 조건에 '뉴발란스' 추가">
              <span class="text">
               뉴발란스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30788","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--82혼마" title="필터 조건에 '혼마' 추가">
              <span class="text">
               혼마
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36619","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--83썬더랜드" title="필터 조건에 '썬더랜드' 추가">
              <span class="text">
               썬더랜드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"42181","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--84제이다울" title="필터 조건에 '제이다울' 추가">
              <span class="text">
               제이다울
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25361","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--85어헤드" title="필터 조건에 '어헤드' 추가">
              <span class="text">
               어헤드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32508","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--86휠라" title="필터 조건에 '휠라' 추가">
              <span class="text">
               휠라
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25655","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--87아다바트" title="필터 조건에 '아다바트' 추가">
              <span class="text">
               아다바트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29325","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--88미와자키" title="필터 조건에 '미와자키' 추가">
              <span class="text">
               미와자키
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25550","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--89Lpga" title="필터 조건에 'Lpga' 추가">
              <span class="text">
               Lpga
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"60198","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--90선덜랜드" title="필터 조건에 '선덜랜드' 추가">
              <span class="text">
               선덜랜드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33592","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--91디즈니" title="필터 조건에 '디즈니' 추가">
              <span class="text">
               디즈니
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25632","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--92PRGR" title="필터 조건에 'PRGR' 추가">
              <span class="text">
               PRGR
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33897","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--93발렌시아" title="필터 조건에 '발렌시아' 추가">
              <span class="text">
               발렌시아
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26895","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--94라코스테" title="필터 조건에 '라코스테' 추가">
              <span class="text">
               라코스테
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26611","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--95홀인원" title="필터 조건에 '홀인원' 추가">
              <span class="text">
               홀인원
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21291","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--96잔디로" title="필터 조건에 '잔디로' 추가">
              <span class="text">
               잔디로
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30731","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--97오딧세이골프" title="필터 조건에 '오딧세이골프' 추가">
              <span class="text">
               오딧세이골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36429","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--98아우토반" title="필터 조건에 '아우토반' 추가">
              <span class="text">
               아우토반
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"65829","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--99BTR" title="필터 조건에 'BTR' 추가">
              <span class="text">
               BTR
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"60237","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--100앙드레김골프" title="필터 조건에 '앙드레김골프' 추가">
              <span class="text">
               앙드레김골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27309","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--101보르게스" title="필터 조건에 '보르게스' 추가">
              <span class="text">
               보르게스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32164","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--102필골드" title="필터 조건에 '필골드' 추가">
              <span class="text">
               필골드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32786","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--103세서미스트리트" title="필터 조건에 '세서미스트리트' 추가">
              <span class="text">
               세서미스트리트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34405","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--104MFS" title="필터 조건에 'MFS' 추가">
              <span class="text">
               MFS
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33870","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--105투어스테이지" title="필터 조건에 '투어스테이지' 추가">
              <span class="text">
               투어스테이지
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43632","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--106비커즈" title="필터 조건에 '비커즈' 추가">
              <span class="text">
               비커즈
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25181","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--107헤리토리Go" title="필터 조건에 '헤리토리Go' 추가">
              <span class="text">
               헤리토리Go
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23404","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--108위프와프" title="필터 조건에 '위프와프' 추가">
              <span class="text">
               위프와프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"45140","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--109이동수스포츠" title="필터 조건에 '이동수스포츠' 추가">
              <span class="text">
               이동수스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22786","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--110발렌티노" title="필터 조건에 '발렌티노' 추가">
              <span class="text">
               발렌티노
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28482","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--111카스코" title="필터 조건에 '카스코' 추가">
              <span class="text">
               카스코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34448","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--112스커트" title="필터 조건에 '스커트' 추가">
              <span class="text">
               스커트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33960","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--113빈폴" title="필터 조건에 '빈폴' 추가">
              <span class="text">
               빈폴
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21451","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--114히로텍스" title="필터 조건에 '히로텍스' 추가">
              <span class="text">
               히로텍스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"64257","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--115루센" title="필터 조건에 '루센' 추가">
              <span class="text">
               루센
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"56072","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--116이삼구골프" title="필터 조건에 '이삼구골프' 추가">
              <span class="text">
               이삼구골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25543","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--117웅가로" title="필터 조건에 '웅가로' 추가">
              <span class="text">
               웅가로
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27401","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--118임페리얼골프" title="필터 조건에 '임페리얼골프' 추가">
              <span class="text">
               임페리얼골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36046","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--119블랙엔화이트" title="필터 조건에 '블랙엔화이트' 추가">
              <span class="text">
               블랙엔화이트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33495","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--120닥스" title="필터 조건에 '닥스' 추가">
              <span class="text">
               닥스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"65726","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--121762MPH" title="필터 조건에 '762MPH' 추가">
              <span class="text">
               762MPH
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26156","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--122한독" title="필터 조건에 '한독' 추가">
              <span class="text">
               한독
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20778","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--123슈필러" title="필터 조건에 '슈필러' 추가">
              <span class="text">
               슈필러
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27760","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--124노스페이스" title="필터 조건에 '노스페이스' 추가">
              <span class="text">
               노스페이스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"66146","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--125레노마스포츠" title="필터 조건에 '레노마스포츠' 추가">
              <span class="text">
               레노마스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32781","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--126지온골프" title="필터 조건에 '지온골프' 추가">
              <span class="text">
               지온골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29901","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--127앙드레김" title="필터 조건에 '앙드레김' 추가">
              <span class="text">
               앙드레김
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23329","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--128엘레강스" title="필터 조건에 '엘레강스' 추가">
              <span class="text">
               엘레강스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23727","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--129P&amp;L" title="필터 조건에 'P&amp;L' 추가">
              <span class="text">
               P&amp;L
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"48203","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--130페리" title="필터 조건에 '페리' 추가">
              <span class="text">
               페리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32840","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--131애시워스" title="필터 조건에 '애시워스' 추가">
              <span class="text">
               애시워스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26893","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--132라일앤스코트" title="필터 조건에 '라일앤스코트' 추가">
              <span class="text">
               라일앤스코트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34678","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--133패기앤코" title="필터 조건에 '패기앤코' 추가">
              <span class="text">
               패기앤코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26499","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--134헤지스" title="필터 조건에 '헤지스' 추가">
              <span class="text">
               헤지스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22473","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--135폴로랄프로렌" title="필터 조건에 '폴로랄프로렌' 추가">
              <span class="text">
               폴로랄프로렌
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25553","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--136메트로시티" title="필터 조건에 '메트로시티' 추가">
              <span class="text">
               메트로시티
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26253","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--137카스텔바작" title="필터 조건에 '카스텔바작' 추가">
              <span class="text">
               카스텔바작
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25019","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--138벤호건" title="필터 조건에 '벤호건' 추가">
              <span class="text">
               벤호건
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27856","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--139윈드마스터" title="필터 조건에 '윈드마스터' 추가">
              <span class="text">
               윈드마스터
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28084","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--140페라지오" title="필터 조건에 '페라지오' 추가">
              <span class="text">
               페라지오
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29252","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--141레드페이스" title="필터 조건에 '레드페이스' 추가">
              <span class="text">
               레드페이스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28945","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--142PGATour" title="필터 조건에 'PGATour' 추가">
              <span class="text">
               PGATour
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21054","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--143애플라인드" title="필터 조건에 '애플라인드' 추가">
              <span class="text">
               애플라인드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30689","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--144트루사르디" title="필터 조건에 '트루사르디' 추가">
              <span class="text">
               트루사르디
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26802","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--145던롭" title="필터 조건에 '던롭' 추가">
              <span class="text">
               던롭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30464","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--146크로커다일" title="필터 조건에 '크로커다일' 추가">
              <span class="text">
               크로커다일
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34954","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--147캘빈클라인언더웨어" title="필터 조건에 '캘빈클라인언더웨어' 추가">
              <span class="text">
               캘빈클라인언더웨어
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33364","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--148레노마" title="필터 조건에 '레노마' 추가">
              <span class="text">
               레노마
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36032","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--149몽크로스" title="필터 조건에 '몽크로스' 추가">
              <span class="text">
               몽크로스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28187","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--150헨리코튼" title="필터 조건에 '헨리코튼' 추가">
              <span class="text">
               헨리코튼
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20775","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--151SGF슈페리어" title="필터 조건에 'SGF슈페리어' 추가">
              <span class="text">
               SGF슈페리어
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28186","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--152코오롱스포츠" title="필터 조건에 '코오롱스포츠' 추가">
              <span class="text">
               코오롱스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22527","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--153동서" title="필터 조건에 '동서' 추가">
              <span class="text">
               동서
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20465","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--154머렐" title="필터 조건에 '머렐' 추가">
              <span class="text">
               머렐
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34097","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--155인디안" title="필터 조건에 '인디안' 추가">
              <span class="text">
               인디안
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34407","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--156엠유스포츠" title="필터 조건에 '엠유스포츠' 추가">
              <span class="text">
               엠유스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23635","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--157아담스콧" title="필터 조건에 '아담스콧' 추가">
              <span class="text">
               아담스콧
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32777","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--158고랄" title="필터 조건에 '고랄' 추가">
              <span class="text">
               고랄
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32489","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--159팬덤코리아" title="필터 조건에 '팬덤코리아' 추가">
              <span class="text">
               팬덤코리아
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32623","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--160헤드" title="필터 조건에 '헤드' 추가">
              <span class="text">
               헤드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29582","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--161로가디스" title="필터 조건에 '로가디스' 추가">
              <span class="text">
               로가디스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24229","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--162마에스트로" title="필터 조건에 '마에스트로' 추가">
              <span class="text">
               마에스트로
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"65258","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--163카시야" title="필터 조건에 '카시야' 추가">
              <span class="text">
               카시야
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25265","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--164아스트라그레이스" title="필터 조건에 '아스트라그레이스' 추가">
              <span class="text">
               아스트라그레이스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33021","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--165K2" title="필터 조건에 'K2' 추가">
              <span class="text">
               K2
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26797","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--166코스모" title="필터 조건에 '코스모' 추가">
              <span class="text">
               코스모
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"57187","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--167티오" title="필터 조건에 '티오' 추가">
              <span class="text">
               티오
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"67015","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--168YK스포츠" title="필터 조건에 'YK스포츠' 추가">
              <span class="text">
               YK스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24762","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--169리복" title="필터 조건에 '리복' 추가">
              <span class="text">
               리복
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24444","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--170미스터골프" title="필터 조건에 '미스터골프' 추가">
              <span class="text">
               미스터골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24090","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--171파크타운" title="필터 조건에 '파크타운' 추가">
              <span class="text">
               파크타운
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28152","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--172프로스펙스" title="필터 조건에 '프로스펙스' 추가">
              <span class="text">
               프로스펙스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21673","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--173컨셉원" title="필터 조건에 '컨셉원' 추가">
              <span class="text">
               컨셉원
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21433","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--174페리엘리스" title="필터 조건에 '페리엘리스' 추가">
              <span class="text">
               페리엘리스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21571","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--175PGA" title="필터 조건에 'PGA' 추가">
              <span class="text">
               PGA
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33915","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--176버버리" title="필터 조건에 '버버리' 추가">
              <span class="text">
               버버리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21194","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--177유나이티드누드" title="필터 조건에 '유나이티드누드' 추가">
              <span class="text">
               유나이티드누드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21540","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--178피에르가르뎅" title="필터 조건에 '피에르가르뎅' 추가">
              <span class="text">
               피에르가르뎅
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31733","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--179발리골프" title="필터 조건에 '발리골프' 추가">
              <span class="text">
               발리골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22141","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--180바나나리퍼블릭" title="필터 조건에 '바나나리퍼블릭' 추가">
              <span class="text">
               바나나리퍼블릭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"37234","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--181지오다노" title="필터 조건에 '지오다노' 추가">
              <span class="text">
               지오다노
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20777","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--182프랑코페라로" title="필터 조건에 '프랑코페라로' 추가">
              <span class="text">
               프랑코페라로
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36723","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--183에스프리" title="필터 조건에 '에스프리' 추가">
              <span class="text">
               에스프리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23171","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--184겐지야마모토" title="필터 조건에 '겐지야마모토' 추가">
              <span class="text">
               겐지야마모토
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21399","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--185코오롱글로텍" title="필터 조건에 '코오롱글로텍' 추가">
              <span class="text">
               코오롱글로텍
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26166","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--186질스튜어트" title="필터 조건에 '질스튜어트' 추가">
              <span class="text">
               질스튜어트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25010","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--187베스트로" title="필터 조건에 '베스트로' 추가">
              <span class="text">
               베스트로
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23049","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--188올젠" title="필터 조건에 '올젠' 추가">
              <span class="text">
               올젠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43678","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--189유니맥스" title="필터 조건에 '유니맥스' 추가">
              <span class="text">
               유니맥스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24220","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--190KBF" title="필터 조건에 'KBF' 추가">
              <span class="text">
               KBF
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36299","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--191SGF67" title="필터 조건에 'SGF67' 추가">
              <span class="text">
               SGF67
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25983","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--192엠포리오아르마니" title="필터 조건에 '엠포리오아르마니' 추가">
              <span class="text">
               엠포리오아르마니
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21684","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--193타미힐피거" title="필터 조건에 '타미힐피거' 추가">
              <span class="text">
               타미힐피거
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43145","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--194본" title="필터 조건에 '본' 추가">
              <span class="text">
               본
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28524","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--195캘빈클라인골프" title="필터 조건에 '캘빈클라인골프' 추가">
              <span class="text">
               캘빈클라인골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34144","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--196베스띠벨리" title="필터 조건에 '베스띠벨리' 추가">
              <span class="text">
               베스띠벨리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"44117","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--197밀레" title="필터 조건에 '밀레' 추가">
              <span class="text">
               밀레
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34608","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--198이오믹" title="필터 조건에 '이오믹' 추가">
              <span class="text">
               이오믹
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26924","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--199듀라핏" title="필터 조건에 '듀라핏' 추가">
              <span class="text">
               듀라핏
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21296","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--200잭필드" title="필터 조건에 '잭필드' 추가">
              <span class="text">
               잭필드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20356","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--201리바이스" title="필터 조건에 '리바이스' 추가">
              <span class="text">
               리바이스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23469","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--202이반" title="필터 조건에 '이반' 추가">
              <span class="text">
               이반
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31890","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--203로베르타디까메리노" title="필터 조건에 '로베르타디까메리노' 추가">
              <span class="text">
               로베르타디까메리노
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23611","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--204피에이티" title="필터 조건에 '피에이티' 추가">
              <span class="text">
               피에이티
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35843","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--205카츠야마모토" title="필터 조건에 '카츠야마모토' 추가">
              <span class="text">
               카츠야마모토
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22274","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--206금강제화" title="필터 조건에 '금강제화' 추가">
              <span class="text">
               금강제화
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30405","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--207웨스트우드" title="필터 조건에 '웨스트우드' 추가">
              <span class="text">
               웨스트우드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31519","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--208에코" title="필터 조건에 '에코' 추가">
              <span class="text">
               에코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30258","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--209아날도바시니" title="필터 조건에 '아날도바시니' 추가">
              <span class="text">
               아날도바시니
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30299","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--210휴고보스" title="필터 조건에 '휴고보스' 추가">
              <span class="text">
               휴고보스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22468","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--211라푸마" title="필터 조건에 '라푸마' 추가">
              <span class="text">
               라푸마
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28019","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--212피요르드" title="필터 조건에 '피요르드' 추가">
              <span class="text">
               피요르드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"19776","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--213지방시" title="필터 조건에 '지방시' 추가">
              <span class="text">
               지방시
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21455","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--214힐크릭" title="필터 조건에 '힐크릭' 추가">
              <span class="text">
               힐크릭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"65776","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--215질스튜어트스포츠" title="필터 조건에 '질스튜어트스포츠' 추가">
              <span class="text">
               질스튜어트스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"40879","filter_yn":"y","request_id":"7e54af55c99143ca960fd0dcb27dff3f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--216플라이워크" title="필터 조건에 '플라이워크' 추가">
              <span class="text">
               플라이워크
              </span>
             </label>
            </div>
            <button class="button--show_more_filter_as_each_item" title="브랜드 필터 더보기" type="button">
             <span class="text">
              더보기
             </span>
            </button>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1023">
         <div class="component component--filter type--toggle name--price on">
          <h4 class="text--module_title">
           가격대
          </h4>
          <p class="filter_title">
           가격대
          </p>
          <button class="button--filter_toggle" title="'가격대 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '가격대 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section--price">
            <div class="section--price_form">
             <label for="min_price">
              최소금액
             </label>
             <span class="text--hyphen">
              ~
             </span>
             <label for="max_price">
              최대금액
             </label>
             <button class="button--filter_price" title="입력하신 가격대로 검색합니다." type="button">
              <span class="ir">
               가격 필터 적용
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1022">
         <div class="component component--filter type--toggle name--search on">
          <h4 class="text--module_title">
           결과 내 검색
          </h4>
          <p class="filter_title">
           결과 내 검색
          </p>
          <button class="button--filter_toggle" title="'결과 내 검색 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '결과 내 검색 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section--research">
            <label for="research">
             결과 내 검색어 입력 필드
            </label>
            <button class="button--research" title="입력하신 키워드로 재검색 합니다." type="button">
             <span class="ir">
              결과 내 검색
             </span>
            </button>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div id="region--content_body">
       <h3 class="text--region_title">
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h3>
       <div id="section--inner_content_body_container">
        <div class="section--module_wrap" module-design-id="1020">
         <div class="component component--chance_shopping">
          <h4 class="text--module_title">
           찬스쇼핑
           광고 상품 목록
          </h4>
          <div class="section--component_title">
           <p class="text--title">
            찬스쇼핑
           </p>
           <div class="section--advertisement">
            <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
             <span class="text">
              광고
             </span>
            </button>
            <div class="layer--information">
             <strong class="text--information_title">
              찬스쇼핑이란?
             </strong>
             <p class="text--information_description">
              찬스쇼핑 광고를 구매한 상품으로 입찰가 순으로 전시됩니다.
             </p>
             <button class="button--close_layer" type="button">
              <span class="ir">
               광고
               안내 레이어 닫기
              </span>
             </button>
            </div>
           </div>
          </div>
          <a class="link--page" href="r" target="_blank" title="찬스쇼핑 상품등록 바로가기">
           <span class="text">
            상품등록
           </span>
          </a>
          <ul class="list--chance_shopping">
           <li class="item">
            [linkx]
            
            <div class="section--item_information">
             <a class="link--seller" href="/yamaguchie" target="_blank">
              야마구찌
             </a>
             [linkx]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               29,000
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            <a class="link--thumbnail_item" href="/DetailView.aspx?itemno=A502243524" target="_blank" title="야마구찌의 야마구찌 봄여름중년청바지/고탄력스판/골프청바지 페이지로 이동합니다.">
            </a>
            <div class="section--item_information">
             [ahref]
             
             <a class="link--description_1" href="/DetailView.aspx?itemno=A502243524" target="_blank">
              야마구찌 봄여름중년청바지/고탄력스판/골프청바지
             </a>
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               78,000
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            <a class="link--thumbnail_item" href="/DetailView.aspx?itemno=A507443305" target="_blank" title="야마구찌의 여름중년청바지/사방 고탄력스판/패치자수 페이지로 이동합니다.">
            </a>
            <div class="section--item_information">
             [ahref]
             
             <a class="link--description_1" href="/DetailView.aspx?itemno=A507443305" target="_blank">
              여름중년청바지/사방 고탄력스판/패치자수
             </a>
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               29,000
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [ahref]
            
            <div class="section--item_information">
             [linkx]
             
             <a class="link--description_1" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB678535157&amp;data=wyF8nBF5RAO8Q04j5VvtWtefiQ6MMOTQeMlJSgLn3McFz0tOuY9IsDDSHi3UBruZ0aSf%2f1l5j1kEEeLtEB6aDeW4VHkD19tpqHwYRPI9kTQZbyAh8Zolq7%2fJUTPDWm3b2jThazKDTmOhq7mbXbWAR%2f09POefsdhlBro%2fRkSkpY8X3x2LsaFQF%2bUII2jjtSkBOiuSWtflu7UzauDLg72t%2bNjZ6geoOc%2b%2fN2jSjHBFBOXiSYWYzmPDoB5zD7sVuGuNM%2buUanE5VLLv7SWtaih4MMewsRGXdM%2fnz5rXmjQkJ1L3P2l%2fNQlKtZl%2fXkQ37wJJW89S9aaOnotJ6vIHasb5vfOS6RouKmlqB%2bICwf36nHvAMNRhNuVKjbEdoEGT3bpbxETDzr8ycnucyFHJ8v%2bTSz7sV0kqxVCvaxe03oO2G%2bNRXyfkpSSGq%2fUpDUKT4m9ErZv%2b5P%2foQpitdZJZgfWvT3EpQweCuYujlilhKH8cAYAoMapIady0guY5AbqAchmyNdsqCbnt6ysr%2bpn8b5j%2b0E7chdvaPME6z&amp;referrer=app%3a%2f%2f&amp;seq=125824238483&amp;type=2" target="_blank">
              나이키골프행사 남성 플랙스 팬츠 833197-010(갤러리아)
             </a>
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               76,000
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            <a class="link--thumbnail_item" href="/DetailView.aspx?itemno=B713609544" target="_blank" title="GS SHOP의 헤드골프 남성 썸머 라이트 팬츠 3종+벨트 1종 세트 페이지로 이동합니다.">
            </a>
            <div class="section--item_information">
             [linkx]
             
             [ahref]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               88,000
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1016">
         <div class="component component--tab_list type--simple">
          <div class="section--tab_arear">
           <ul class="list--tab">
            <li class="item--tab on">
             <a class="link--tab" href="/list?category=08011000&amp;t=a">
              <span class="text--tab_name">
               전체
              </span>
              <span class="text--item_count">
               31,740
              </span>
              <span class="for-a11y">
               개 상품보기
              </span>
              <span class="for-a11y">
               현재 활성화된 탭입니다.
              </span>
             </a>
            </li>
            <li class="item--tab">
             [ahref]
             
            </li>
            <li class="item--tab">
             [linkx]
             
            </li>
            <li class="item--tab">
             [ahref]
             
            </li>
            <li class="item--tab">
             <a class="link--tab" href="/list?category=08011000&amp;t=u">
              <span class="text--tab_name">
               중고장터
              </span>
              <span class="text--item_count">
               1,483
              </span>
              <span class="for-a11y">
               개 상품보기
              </span>
             </a>
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             파워클릭
            </p>
            <div class="section--advertisement">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               파워클릭이란?
              </strong>
              <p class="text--information_description">
               파워클릭 광고를 구매한 상품 중, 연관성과 입찰가를 고려하여 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
            [ahref]
            
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB208968842&amp;data=w3YoKjKgvE4KvU%2bnP8w1Dh%2bWinyqblF4hDTK7GBIsTWBmf%2fdwtR4E8dePGmajf7zyVk4K87ySVfyYduKAYFrRUm%2fBrYmJ8EJYZ1X5EwBXgpGQkFE6WFdK7W2UFxEnn0pW2Wwu2tVVuqjV1bU5nSSmnmy9EFufAzI%2bipKKBWLy5yBFy1BXXTz%2fwVjecTWtKKTVFdLaXMT4G0k5sVL6K8yLdEgneFAg0NR8GvGTQKGpoLzAXGQm%2f0TfAz5M4VW79vJdJph%2f6AYF0Gj1DT%2fnxvSBVFBv%2fED6HVgJjYsJzgPEyF3YqBzEsecWzsB%2b%2fAyv6rsHMG8u6RhFIxIQMibLKXyhTawMlwRhZu%2fy%2bAKz9P0QznEst%2fyHWiYf2TB5TU4uhuYjGaV%2fyJx4FD5JJoo4oZuBvXoQq1kSHQ235QljeT4pE%2bgk0bsvrz9H%2bjnGUrjRkqkdgE1wES8fBwYVJyn1rzGI2gqDL9aWv19LJYHOWdXENuJNIVG4C9pUBCbf7Hv5O92jeVWROq5u0XoNeWGbZcJl5zqJTQyGh8r7&amp;referrer=app%3a%2f%2f&amp;seq=125824238475&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름 골프바지 여름바지 면바지 슬랙스 허리조절밴딩
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,214
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,144
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB232947832&amp;data=wzQfJQn77V9BerNNS9f93fQW1Atl7VB7EWkz6%2fa3gZEhFGLQJgNBc%2bvvauARfaYiEABkjXDKDHE8embNxo83IC9c4kAyoUJwVqatK0UwxukyFDhrZ1%2fOdKdBcEYV4Oc2aUy6MsIQYQR83%2bcRE0IWgHHAf2TL%2fxdH86TEjBoJATaIQooD65yCVVNLI6yvonHBAyWbQvBnGqID3Xn7X8Oy56AY5OhQqWO7ezYqGlifTW2vtMbNYaa1P6VKgVITYDcOvf3MMb44zqmCIrP3kZL0lIR5OMy4tI5jnRIsmxC8KMRqNsWkTTtmpoAsRuEHd461TAURrPWqQUixAMTvpfZx1y6Nw2oAlMrVyMC1I1Q29Lf%2frllFuOjR1O5uwBuHzO7eMUmX0ssdl9f2Earpcr9f4r9KBoGC%2bmsUfAu7mPqjgrIE6peTKx%2bbu7Mb6MQHG0wCUetcFfM20BdZtH4kb9Kat6kp%2bv7iHjpBFYrMHwmChZZybtwvNxwKtlB%2f7LxO3QZPUojbhVFNbzg9rjUx2tehMeea0lgwDmf5f&amp;referrer=app%3a%2f%2f&amp;seq=125824238476&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 22,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,508
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,678
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dA900356774&amp;data=w3YoKjKgvE4K2dxCmAivQNYHVv4OMqgOsKYDakenGJFD2IWMF%2fUbAD7V0Bazv6itT%2bSehtW3TwYh9oMeCaSLrVnPON1yd9zovpZeHKyIjN%2fBEEChbz0gIflbvPZoQTCZY9GtzB8VFdtjLEHnRub3%2b4pcLCRYanXbfA%2fg5PVkmCTLkSvX0iN7tBBVOJO%2bUyOkxQ9b1eRHzMM%2b1teetokT8MaW0o%2bBBDIw3ORUDwh7SSgv3RFo%2bqZ9p0VoyZKFUxzEIgG1u7nog5xsMaBnxdN7vdzGRHlCob3H3Jq9LM6pu%2fVF%2bTa739VcVVMFJnluvN9jgfRO95lZ5C1kbgZsGw%2bCM3f%2f9V05PnFsuPajUYx0wZGR4pPIGKmU4XymZ7ihy93PzYbe6HUIvCpqLRFykksx5SjKsrR3hJ3018twWFu%2bS4aDg1mEfKQx3VDFYiFn0De49xK85XxlOEYwOJ%2fWKg%2fp%2bA%2fiMOmZbYfy8Tac2kfp2tmlq14N%2fmavIJP%2fjsENCv1GXVwMeJ8VDmIxv0VaIlIqxjBwRlG8qpGKcwNtHrsWUl84%3d&amp;referrer=app%3a%2f%2f&amp;seq=125824238477&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dA900356774&amp;data=w3YoKjKgvE4K2dxCmAivQNYHVv4OMqgOsKYDakenGJFD2IWMF%2fUbAD7V0Bazv6itT%2bSehtW3TwYh9oMeCaSLrVnPON1yd9zovpZeHKyIjN%2fBEEChbz0gIflbvPZoQTCZY9GtzB8VFdtjLEHnRub3%2b4pcLCRYanXbfA%2fg5PVkmCTLkSvX0iN7tBBVOJO%2bUyOkxQ9b1eRHzMM%2b1teetokT8MaW0o%2bBBDIw3ORUDwh7SSgv3RFo%2bqZ9p0VoyZKFUxzEIgG1u7nog5xsMaBnxdN7vdzGRHlCob3H3Jq9LM6pu%2fVF%2bTa739VcVVMFJnluvN9jgfRO95lZ5C1kbgZsGw%2bCM3f%2f9V05PnFsuPajUYx0wZGR4pPIGKmU4XymZ7ihy93PzYbe6HUIvCpqLRFykksx5SjKsrR3hJ3018twWFu%2bS4aDg1mEfKQx3VDFYiFn0De49xK85XxlOEYwOJ%2fWKg%2fp%2bA%2fiMOmZbYfy8Tac2kfp2tmlq14N%2fmavIJP%2fjsENCv1GXVwMeJ8VDmIxv0VaIlIqxjBwRlG8qpGKcwNtHrsWUl84%3d&amp;referrer=app%3a%2f%2f&amp;seq=125824238477&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  마스터베어
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  봄/여름/골프바지/남성/마스터베어/허리밴드/스판바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 22,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 23,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 273
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 999
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB711999576&amp;data=wGQgIPptjsx%2fzqylSaiLyFhQI0LqeP3bIPPYqVdeTclTSaqRgcmIXHjzR2VAbi6Z1pn%2foS7T%2f42quwRPrHLa7DxwZ8Gxgn4oIMqUPsykoeZSinlr9yvWF590gf7FMGmS9cXkoIEAvO9dqhgMoisP7ORwt1MUduGgiyDj52l9JM5sDJmRYKITxW%2b5q7UtNdpczt6kjXF4cMCYtRkvmbrhDvze%2fAzUn8azKIV63Ba8w9%2bZAkdHc4x%2bz1wjrzjOHpMYrU6sOp6U7vCLjzkXK2eCgdhVwi2iHvm1yysy9V8Z3rvhhCHvXKyo1dXIOLhAnvNgxoV0e0gk61h4gAU0jeoUjmjrZwQVGJvkB%2bY0DvgmgBXfWuhIkl9dG5HnhNnTJnFhWZ3N7gl8UJPerBWyZqjhbgEHs5Ux16JN%2fb4iEiGYLZjveFBNg4dQVfZgBmTsW7tqgAmscStcrppUy3BPyDpDvgh8Dt4kCsvnaOnsf%2br62UT8QL3VKb%2bUbZGw77TgUq9WXE%2b5WcJa%2f%2bLyAqdRlz%2fD4DuSwU6vZX%2f5W&amp;referrer=app%3a%2f%2f&amp;seq=125824238478&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  아놀드파마  여름 최종가/경량 냉감스판 남성 골프 반바지/긴바지 4종 택1/골프웨어_246361(갤러리아)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 28,780
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 30,300
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4점
                </span>
                <div class="seller_awards" title="후기평점 4점">
                 <span class="awards_points" style="width:80%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB711582130&amp;data=wsP07KgqvfbwnIuMTm67Z8aqgBfLpBpvYGRf093M%2bdd4Hq7vp7%2b5DrrjEzxGfITOW%2fobBmoGqICPzWzYqkpNZLsOH%2bLQJmhR9Enb1rkZLcyApgbdU3%2bRqlVXZIQp36jBuSU4HUALEzlR2UeBvHFUeQdQwvM%2b5659Q14b8d8qz6F%2fGXVMMJw42vT%2fg4sv9LoFB2Qdfwdqy0P140VaPqb5mmyoJtKOD7cS8rQR5twLnkV94QvjtQGal%2f79GIkRVvdshL%2feCq3lAOjvF77YwvLv5icWa4qNMDtc4HcAcieHBodeSQb7F2I4FfkZcVZ9Z%2fe0sy71w0RK6KI17Bcq0IFp8mbInLfSCT0VFQjPuIlncI4b8EuGffL43VeNqLYyNdLZVRNg7%2f8NHv%2b6ESHl9WhTwfDtNhPgv%2bDn0iykGQFmn1JCJDHRurDMhd0yRNLt%2boFeYCyIelouxWLhp%2fBq1Ccddqiz63p1EF6qUx5dt73DmXjA8XuzY7soTzw51yezJduJBh8Bd5lFlxAqwpqzLYxJOa8G%2ba7TJUtQV&amp;referrer=app%3a%2f%2f&amp;seq=125824238479&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB711582130&amp;data=wsP07KgqvfbwnIuMTm67Z8aqgBfLpBpvYGRf093M%2bdd4Hq7vp7%2b5DrrjEzxGfITOW%2fobBmoGqICPzWzYqkpNZLsOH%2bLQJmhR9Enb1rkZLcyApgbdU3%2bRqlVXZIQp36jBuSU4HUALEzlR2UeBvHFUeQdQwvM%2b5659Q14b8d8qz6F%2fGXVMMJw42vT%2fg4sv9LoFB2Qdfwdqy0P140VaPqb5mmyoJtKOD7cS8rQR5twLnkV94QvjtQGal%2f79GIkRVvdshL%2feCq3lAOjvF77YwvLv5icWa4qNMDtc4HcAcieHBodeSQb7F2I4FfkZcVZ9Z%2fe0sy71w0RK6KI17Bcq0IFp8mbInLfSCT0VFQjPuIlncI4b8EuGffL43VeNqLYyNdLZVRNg7%2f8NHv%2b6ESHl9WhTwfDtNhPgv%2bDn0iykGQFmn1JCJDHRurDMhd0yRNLt%2boFeYCyIelouxWLhp%2fBq1Ccddqiz63p1EF6qUx5dt73DmXjA8XuzY7soTzw51yezJduJBh8Bd5lFlxAqwpqzLYxJOa8G%2ba7TJUtQV&amp;referrer=app%3a%2f%2f&amp;seq=125824238479&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  아놀드파마  여름 최종가/경량 냉감 스판 남성 골프바지 4종 택1/골프웨어_246347(갤러리아)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,810
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB529627226&amp;data=wyF8nBF5RAO8mXCoKtF0nQDzYkYBJ%2fQOXMN8PzKcSG%2bYEDnBX3RWcnn%2bEccdv%2bFyXnFXu7oNI4BypEJQUxuVqqfA7Qzp2TiJnVlNrjK6X796LYzASyB6ZXasdOy6DXufLmdhRbM0WvFV5SK9WETVUmVeFkDdV75a%2bNY52XYJx%2f7ivHmyHSoiy3Gdb54QmP13nE8Z9ehGafEA11%2f%2ffybvdMtCP%2b4qQ3OYx9SUHb4DVWNIUztxn9l%2fdf8gucsBqyKkQ00Fp2SMgXGWvGDEltZgVkmCIwBtd%2fnBSd%2btRAYp7%2fi7Bvsg%2frko3b3Q%2fJJgPbpBHsXGoHhD%2feRMuep%2brCLZBANEs6V13%2f8sYRsXGL88U9jY07Ctb%2frGTtHY4nsLbA%2fVf6GQ817PD9YOs513H2Z%2fTrKnvRN9vLvoBN2ke7r4%2b2FDFMiq9hrsEh2LBPhdHz8A4kDH6NpXMqHwDPmpKJP3LHdDAkq5tiUX%2bLKCfFBYXk0uLO8hvpeNr%2faZwWME1ud%2fXQ8qwMVA139O1nub4AcHWgVcd7j6STa7I&amp;referrer=app%3a%2f%2f&amp;seq=125824238480&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB529627226&amp;data=wyF8nBF5RAO8mXCoKtF0nQDzYkYBJ%2fQOXMN8PzKcSG%2bYEDnBX3RWcnn%2bEccdv%2bFyXnFXu7oNI4BypEJQUxuVqqfA7Qzp2TiJnVlNrjK6X796LYzASyB6ZXasdOy6DXufLmdhRbM0WvFV5SK9WETVUmVeFkDdV75a%2bNY52XYJx%2f7ivHmyHSoiy3Gdb54QmP13nE8Z9ehGafEA11%2f%2ffybvdMtCP%2b4qQ3OYx9SUHb4DVWNIUztxn9l%2fdf8gucsBqyKkQ00Fp2SMgXGWvGDEltZgVkmCIwBtd%2fnBSd%2btRAYp7%2fi7Bvsg%2frko3b3Q%2fJJgPbpBHsXGoHhD%2feRMuep%2brCLZBANEs6V13%2f8sYRsXGL88U9jY07Ctb%2frGTtHY4nsLbA%2fVf6GQ817PD9YOs513H2Z%2fTrKnvRN9vLvoBN2ke7r4%2b2FDFMiq9hrsEh2LBPhdHz8A4kDH6NpXMqHwDPmpKJP3LHdDAkq5tiUX%2bLKCfFBYXk0uLO8hvpeNr%2faZwWME1ud%2fXQ8qwMVA139O1nub4AcHWgVcd7j6STa7I&amp;referrer=app%3a%2f%2f&amp;seq=125824238480&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  골프바지남성남자바람막이빅사이즈의류옷복카라티
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 70
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 24,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 83,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <h1>
                  <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                 </h1>
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 14
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 38
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 39,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lovelyB" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                러블리비
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 23,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 40
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 118
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lovelyB" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                러블리비
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             파워등록
            </p>
            <div class="section--advertisement">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               파워등록이란?
              </strong>
              <p class="text--information_description">
               파워등록 광고를 구매한 상품으로 입찰가순으로 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
            <a class="link--page" href="/Guide/ad_guide1_1.aspx?adCategory=1&amp;adArea=1#a" target="_blank" title="파워등록 상품등록 페이지로 이동합니다.">
             <span class="text">
              상품등록
             </span>
            </a>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 14
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 34,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 12
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 102
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A526275139" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 393
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,455
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/woorrungs" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                샤인힐즈
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,215
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,630
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 43 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                43
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A104606111" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A104606111" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름용 골프바지/빅사이즈/스판바지/면바지/청바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 21
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 37,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,326
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,181
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A941772554" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 14
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 22,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 121
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 541
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A517844368" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A517844368" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명 [area1][mkey1]<li>[area1][keywordx]</li><li>[pkeyx]</li>[area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                 </span>
                 <span class="text--title">
                  화려한디테일/중년반바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 23,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.4점
                </span>
                <div class="seller_awards" title="후기평점 4.4점">
                 <span class="awards_points" style="width:88%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 28
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 86
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B278391332" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 27,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 122
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 305
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/yamaguchie" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                야마구찌
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 22,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,508
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,678
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B208968842" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B208968842" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름 골프바지 여름바지 면바지 슬랙스 허리조절밴딩
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,214
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,144
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/mhj1026" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                패션아이스타일
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B233485487" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름용 고급 골프바지 스판바지 허리조절밴드 44까지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 31,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 144
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 535
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/mhj1026" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                패션아이스타일
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             프리미엄등록
            </p>
            <div class="section--advertisement">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               프리미엄등록이란?
              </strong>
              <p class="text--information_description">
               프리미엄 광고를 구매한 상품으로 옥션랭킹순으로 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B672975557" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 76
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 237
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/maxspeed44" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                맥스스피드43
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 13 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                13
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 32,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 23
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 83
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?[linkx]<li>[area1][mkey1]</li>[area1][mkey1]<li>[pkeyx]</li><li>[pkeyx]</li>
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 30 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                30
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B697830060" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,800원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 49
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jkmode" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이모드
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 25 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                25
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              [ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][ahref][linkx][linkx][ahref][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][ahref][pkeyx][ahref][ahref][pkeyx][pkeyx][ahref][ahref][area1][keywordx]
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 49
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 152
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 30 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                30
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B544447700" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B544447700" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  베어마스팬츠 남자 여름 골프바지 골프복바지 골프복
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 27,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 52
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 150
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jjooya" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                JJOOYA
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 30 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                30
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B530925326" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,800원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 129
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 359
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jkmode" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이모드
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 25 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                25
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B232947832" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 22,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,508
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,678
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/ywhero58" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                캣츠앤걸
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,800원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 31
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 59
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jkmode" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이모드
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 25 개가 있습니다. ">
              <[keywordx]>
              </[keywordx]>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B660203286" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  고랄 남자 여름 쿨 골프바지 스판바지 일상복 2911
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 275
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 820
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/maxspeed44" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                맥스스피드43
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 13 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                13
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B659354745" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B659354745" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  알칸스 여름 남성 골프바지 남자 골프웨어 25종
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 219
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 673
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/alkans" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                알칸스
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B208968842" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름 골프바지 여름바지 면바지 슬랙스 허리조절밴딩
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,214
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,144
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/mhj1026" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                패션아이스타일
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B701688046" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,800원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 13
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 49
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jkmode" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이모드
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?[ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][linkx][linkx][pkeyx][area1][mkey1][pkeyx][ahref]
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 25 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                25
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B672977259" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  고랄 남자 여름 쿨 골프바지 스판 바지 일상복 2914
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 62
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 147
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 13 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                13
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <li>[pkeyx]</li>[pkeyx]<li>[area1][mkey1]</li>[area1][mkey1][linkx]
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              [pkeyx]<li>[area1][mkey1]</li>[ahref]<li>[area1][mkey1]</li>[area1][mkey1]
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B646549023" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B646549023" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  호젤 봄 여름 남성 밴드 골프바지 골프웨어 MBPM1061
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 37,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 4
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 15
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 22 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                22
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 3.9점
                </span>
                <div class="seller_awards" title="후기평점 3.9점">
                 <span class="awards_points" style="width:78%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 26
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/JKLOOK" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이룩
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 29 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                29
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B544441526" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B544441526" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  남자 여름 쿨 골프바지 스판바지 고랄골프바지9807
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                  [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 70
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 180
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 13 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                13
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,800원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 48
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 129
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jkmode" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이모드
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 25 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                25
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B694190400" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 26,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/JKLOOK" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이룩
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 29 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                29
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B593082517" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B593082517" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름 남성 골프바지 남자 골프웨어 스판 빅사이즈모음
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 23,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 127
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 382
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lovelyB" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                러블리비
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B244582661" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 16,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 17,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 98
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 399
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B570336618" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B570336618" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  볼칸 스판청바지 남성 청바지 남자 골프바지 블랙진
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 34,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 13
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jjooya" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                JJOOYA
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 30 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                30
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 175
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 434
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 13 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                13
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B401664348" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  커터앤벅
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  커터앤벅 남성 스판 슬림 일자 골프바지- 1472-104-61
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 9
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 49,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 54,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 30
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 98
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/winglife" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                WingLife
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B544438802" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  남자 여름 쿨 골프바지 스판바지 고랄골프바지9803
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 22,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 41
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 108
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <li>[area1][mkey1]</li><li>[pkeyx]</li><li>[area1][keywordx]</li><li>[area1][mkey1]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 13 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                13
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A904669356" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  선덜랜드
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  선덜랜드 남성 국산 스판소재 골프바지/팬츠 4종 택1
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 11
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 39,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 44,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 30
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 104
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/sunderland" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                선덜랜드코리아
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A900356774" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 22,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 23,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 273
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 999
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/shinhwa0303" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                신화어페럴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B401221285" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 11
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 39,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 44,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/sunderland" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                선덜랜드코리아
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B277090684" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 59,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 16
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 53
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B204600304" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  골프바지 골프웨어 면바지 남자 빅사이즈 바지 골프복
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 33
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 540
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,996
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B596320390" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B596320390" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  필우드
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  국산  골프바지 골프웨어 체크 스판 50%세일 초특가
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,810
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 15
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 42
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/broskim" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                브로스킴
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 58,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 21
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 87
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A712936929" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A712936929" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름신상 골프바지/골프웨어/면바지/남성아웃도어바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 33
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 279
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,117
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 23,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 24,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 107
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 300
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A517844368" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 23,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.4점
                </span>
                <div class="seller_awards" title="후기평점 4.4점">
                 <span class="awards_points" style="width:88%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 28
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 86
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           [pkeyx][linkx][area1][mkey1]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B713387675" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 3점
                </span>
                <div class="seller_awards" title="후기평점 3점">
                 <span class="awards_points" style="width:60%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 8
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/apolken" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                에이폴켄
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 20
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 2,528
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 10,578
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B657331337" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B657331337" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름용 30~40사이즈 허리밴드 남자골프바지 스판바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 46
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 154
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B317382043" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 20,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 872
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,684
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/focus0313" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                포커스코리안
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B566944227" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  마스터베어
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  봄 여름 남자 슬랙스 패션 골프바지 골프웨어 골프복
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 199
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 548
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B646549300" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 33,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 12
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 52
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 22 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                22
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 21
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 22 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                22
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 81,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 11
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/outdoorking" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="img" style="background-image:url(http://image.esmplus.com/Store/20181001/17/9c47b764135b422a/0)">
                아웃도어킹
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 22 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                22
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B307967194" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 21,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 256
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 870
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B647629082" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 30,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 3.5점
                </span>
                <div class="seller_awards" title="후기평점 3.5점">
                 <span class="awards_points" style="width:70%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 8
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 6 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                6
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A710022754" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  남자골프바지 골프웨어 골프의류 스포츠 레져 스판바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,215
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,630
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/drimyoung" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                블루아이7
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 43 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                43
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B544437501" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  남자 여름 골프바지스판바지 작업복 고랄골프바지9801
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 22,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 32
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 83
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 13 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                13
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 29
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 6 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                6
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B679846400" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  아바쿠스골프 입체고주파 폴로 카라셔츠 AG9M6673
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 18
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/luxgolfstore" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                럭스골프
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 42 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                42
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 16
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 46
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/mjdo2013" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                엠디지몰
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 8 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                8
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B675888162" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B675888162" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  돌핀 반바지 남자 여름 골프반바지 골프바지 골프웨어
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 27,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 22
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 30 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                30
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B707181288" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,800원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 4
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 11
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jkmode" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이케이모드
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 25 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                25
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B561837308" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 23,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 14
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 20 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                20
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 69,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 79,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 53
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 313
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/sunderland" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                선덜랜드코리아
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B398849464" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B398849464" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  선덜랜드
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  선덜랜드 남성 면 스판 체크 골프바지 - 16721PT41
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 11
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 39,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 44,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B515141212" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  커터앤벅 남성 스판 체크 골프바지 - 14-182-104-81
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 7
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 59,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 64,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 4
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 8
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A104606111" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 21
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 37,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1,326
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,181
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/road777" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                로드몰
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          [area1][mkey1][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 7
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 59,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 64,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 13
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 42
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/winglife" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                WingLife
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A941772554" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름 빅사이즈 등산바지 아웃도어 등산복 작업복 남성
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 14
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 22,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 121
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 541
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B347274667" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 48
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 38,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4점
                </span>
                <div class="seller_awards" title="후기평점 4점">
                 <span class="awards_points" style="width:80%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 11
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 26
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B661024819" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름 프리미엄 레저등산바지/골프/팬츠/빅사이즈
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 11,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.1점
                </span>
                <div class="seller_awards" title="후기평점 4.1점">
                 <span class="awards_points" style="width:82%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 11
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 95
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/kcnsly388" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                모든상사
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B452507753" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  몽크로스
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  몽크로스 국내생산 남성 뱀부바지 구김없는 노턱바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               [area1][mkey1][pkeyx][ahref][pkeyx][area1][mkey1][ahref][area1][mkey1][linkx][ahref][linkx][linkx][area1][keywordx][pkeyx][pkeyx][ahref][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx]
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 20,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/yamaguchie" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                야마구찌
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 71
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 221
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A102177564" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  봄여름/신사골프바지/체크/NC/밴딩/스판/링클프리-42
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.5점
                </span>
                <div class="seller_awards" title="후기평점 4.5점">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 201
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,302
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lyu245" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                필우드골프
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B340457865" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 143
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 342
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 15,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 16,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 30
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 104
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B676280296" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B676280296" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  봄 여름 남성 골프바지 골프웨어 7부 반바지 중년의류
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 65,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 14
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/outdoorking" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="img" style="background-image:url(http://image.esmplus.com/Store/20181001/17/9c47b764135b422a/0)">
                아웃도어킹
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 41
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 34,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 294
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 736
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B302033218" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 36,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 145
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 454
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/mjdo2013" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                엠디지몰
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B233485487" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  여름용 고급 골프바지 스판바지 허리조절밴드 44까지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 31,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 144
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 535
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B709690121" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4점
                </span>
                <div class="seller_awards" title="후기평점 4점">
                 <span class="awards_points" style="width:80%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A503389208" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 24,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 25,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 526
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,917
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lyu245" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                필우드골프
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           [linkx][ahref][area1][keywordx]<li>[ahref]</li>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A526275139" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 393
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,455
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B234351382" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  핏이 대박~그렌에코 봄여름 남성 골프바지/신상/이월
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 38,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 75
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 463
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/glenecho" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                그렌에코
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
              [area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][pkeyx][pkeyx][area1][keywordx][pkeyx][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][ahref][area1][mkey1][pkeyx][pkeyx][area1][mkey1][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][linkx][pkeyx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A507443625" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  야마구찌쎄일 /최고급N/C소재/골프바지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 37,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.6점
                </span>
                <div class="seller_awards" title="후기평점 4.6점">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 239
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,237
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/yamaguchie" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                야마구찌
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             일반등록
            </p>
            <span class="text--smiledelivery_slogan">
            </span>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B713609544" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  헤드골프 남성 썸머 라이트 팬츠 3종+벨트 1종 세트
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 88,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 28
                </span>
                <span class="for-a11y">
                 건[pkeyx][area1][mkey1][area1][mkey1][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][keywordx][pkeyx][area1][mkey1][ahref][area1][mkey1][pkeyx][pkeyx][ahref]
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/gsshoplive" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                GS SHOP
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li>[ahref]<li>[ahref]</li>[area1][keywordx]
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="24">
         <div class="component component--pagination">
          <h4 class="text--module_title">
           페이징
          </h4>
          <span class="link--previous_page off" title="첫 페이지 입니다">
           <span class="icon">
            <span class="ir">
             첫 페이지 입니다.
            </span>
           </span>
          </span>
          <span class="link--page on" title="현재 페이지는 1 페이지 입니다.">
           1
           <span class="ir">
            현재 페이지는 1 페이지 입니다.
           </span>
          </span>
          [ahref]
          
          [linkx]
          
          [ahref]
          
          <a class="link--page" href="/list?category=08011000&amp;k=18&amp;p=5" title="5 페이지로 이동합니다.">
           5
           <span class="ir">
            5 페이지로 이동합니다.
           </span>
          </a>
          <a class="link--page" href="/list?category=08011000&amp;k=18&amp;p=6" title="6 페이지로 이동합니다.">
           6
           <span class="ir">
            6 페이지로 이동합니다.
           </span>
          </a>
          [ahref]
          
          [linkx]
          
          <a class="link--page" href="/list?category=08011000&amp;k=18&amp;p=9" title="9 페이지로 이동합니다.">
           9
           <span class="ir">
            9 페이지로 이동합니다.
           </span>
          </a>
          [linkx]
          
          <a class="link--next_page" href="/list?category=08011000&amp;k=18&amp;p=2" title="다음 페이지로 이동">
           <span class="ir">
            다음 페이지로 이동
           </span>
          </a>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="25">
         <div class="component component--sponsor_link">
          <h4 class="text--module_title">
           스폰서링크
          </h4>
          <div class="section--component_title">
           <p class="text--title">
            스폰서링크
           </p>
           <div class="section--advertisement">
            <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
             <span class="text">
              광고
             </span>
            </button>
            <div class="layer--information">
             <strong class="text--information_title">
              스폰서링크란?
             </strong>
             <p class="text--information_description">
              제휴사의 광고가 전시되는 영역입니다.
             </p>
             <button class="button--close_layer" type="button">
              <span class="ir">
               광고
               안내 레이어 닫기
              </span>
             </button>
            </div>
           </div>
          </div>
          <a class="link--ask_sponsor" href="/adbiz/searchad/intro.nhn" target="_blank" title="스폰서링크 신청하기">
           <span class="text">
            신청하기
           </span>
          </a>
          <ul class="section--link_list">
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              1
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=o4+0bIB6v+TWnImO/8lpYv./w==k0QEkUxOQ1viye59FUaDQVcLsPtORJI2Adcm2ZfNk4yRxV/5gAQvP+jWaCGobgKirvWOVVe+X8qxjo7EuGMhLsuFT1QAlvxjr7G8vOkzNAcFlBk07ykLSVfwUCiD4AZtxJK3SdRTlLMKYk1KFAAvdNFiZ+Kyhsvl/iVgeqZTjetit7yk44CwiFlOxc00j1K06+7Ge5VGm5j/4xZURbtLVZtpmWUi1YMMboDHLmGblQB+deBZUq28qvuO3Uk5oAOhUNntDh+c2+ab9HHgtyba7YOA2NQHlZpCnglWoKcwpVdHqXnZsy+C7g2a78YswUsmr6QMnlU1zdJeA5fxXsDih72FW/GnlW0jMBERvu0FQuPvhgbnTLzpRdswHGM+lX4ElHl4D3v2LN4UabbgrfWtOcYvcV5v/W1FjZQg4Q7/KoCPUMo9+JrRe1ije5y7SIXtcspClx0tSWeIoTpLW5/MRmDtV3gL6FpKOHFOnkTELIRKQA9MnFQG6xzKNF72W8DPp6v1FrICkoXkUtznnh5ZZyDAIp2V+hEuB8LkjSszNy5qWqebkH970F7r2dFOfuNqtTty/wDCfG2IP2YWp7muYV2kNvniJyK9giKGvamglOKpgxnG0EYTjyOMtAg3atXSVBqPNsXxJIybHOf/aD2VUCmmIY8UaDPa8gWiCebIlQaaf54ywU4xbHInxrhfgvnsuuLdxD+YtN85Pugvhg85Iew==" target="_blank" title="감성룩, 퀄리티중심 머시따 페이지로 이동합니다.">
             <p class="title">
              감성룩, 퀄리티중심 머시따
             </p>
             <p class="link">
              www.meosidda.com
             </p>
             <p class="description">
              데일리룩,퀄리티중심,남자옷,반팔티,셔츠,반바지,티셔츠,청바지,슬랙스,키높이신발
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              2
             </span>
            </div>
            [ahref]
            
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              3
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=OrmsYaxfEsOS+MQ7q608a..w==ku5JFusv+lf5aVl0I9yMGAE9UhEIK65JrrQ/G6WgftMfvInlRMkWaaGf01YijSO7b714TzXjA1n8op77qQFzzizOeijBeEpP8c7ALTDOFe8Dl8PBLCGg/UUr4UC4b9p6PIEAmuL+0wQj9g33DNetIg/J6zXMvWW59D1pd4bZOftt0aITy+qoNAnbP0a7YBm1frmBkC5ehiKeWV8BiNXEQ6/quV6QvJKRZfvWLV74eJLpO5dSBogob8XjOcStcKqszElP+80uxrofi9hKbLsDJXFZ2qH6lJlACQb1AfrO+AESgUU67kN7u0IOxH82AmobvrN+ZLNww8XcUB9yYYetG3GSf6j79Ro+sixKJZrBczrEfQ4kz5zAtWTXutGkf1gKD/oTI1zrvl3bqMhtigXATizbzSG1wVT/ZbtmH6FYSbZaFLK6OTjwfzTl/iJjveW77XdPGvaAPw3gntKDAbT1jGrBnpvGGCm4Mq+fJ8PK3PKJeMTjdVj9pnsQtHA3GyK9l2zvnn3Smhzty4c+RbzqAoKM2bIYvJKWjb7l3P0Pj0ptMdwVDtOlSkdSz8yScdiwsrZXhXQUxIa91NZmZQu+gkQ==" target="_blank" title="10대여자쇼핑몰 단지랑 페이지로 이동합니다.">
             <p class="title">
              10대여자쇼핑몰 단지랑
             </p>
             <p class="link">
              danjirang.com
             </p>
             <p class="description">
              10대데일리룩,캐쥬얼,맨투맨,10대여자코디,데일리룩은 단지랑과 함께
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              4
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=32LwTQmTkES18NeUd1bwUv./w==kCsRVGddP9P3Yh3et/MKjrImrFbAY4rmx1GCERYf1UpvxfuabrVmavuf7NXcOKgmERsPYsAG30PfWUb2Is/UslvlgB2UUR0oP2T0ZmxZPRogYy8JTRW4cY1KksNOrgQiQOT41aV5YxkRzOFHHfPv+Wwpk2CLHx+25g1/aXzWYgRb21SRXdYfd7H7BdnBPnfUxAQ116/ZKYtTE4ZgjZua5/0AhEbgf03L+cd9E5YM+HuOdg1P4Kwnijzp9meTbIy14/zr+dzj9GOIJz9R0oSvjK6hONDlrfludiYyV7HEMNYckkVW4ZrKOVHCsVAgo7fe0mXQPE18txV/ZXf0ouXPZBDztkfQjyQvGUNRXSduhBGRvXH0FcHj/da7FbXfR4XOfKJK3NKrYLXqN3+UFHjwaeRKL4/pqLkBIpbN2luDCUxYeF956qq8kB4OEXPxGUdQfkVSMNX7Y/ByV/gnnh6AlgFg7Thc/suvyl8eKL7Pjds1Zfs8/KSZYCi4XALiy4ylSRx0lhOEa/YOxEWIyn6EU03nCUUFrL9QHg2Asd8Xq6HzmbBa48Yt5MpvmpX4hWD4L" target="_blank" title="프리미엄 셀렉트샵 스캄 페이지로 이동합니다.">
             <p class="title">
              프리미엄 셀렉트샵 스캄
             </p>
             <p class="link">
              skam.co.kr
             </p>
             <p class="description">
              하이퀄리티 셀렉트샵, 완판률 100%, 해외스트릿 패션, 베트멍, 오프와이트 등
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              5
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=BGjWiMVM3soxEw6rYNrChP./w==kklaMdsiQeL19iKRDzJdUk5qJDUPKGqPlYwz9KiBssHqpsL1CeyicpDr3p/2RBPWgEET7gR8a+HR8NR4ZTPvfCUcTEdTYMIjosRr1oP7I6k6CtKSEOgmeHNdXNmXcW0Jfsex+BBT8LAg84xCknDny4PGalc+yxG4h8N1EzRA9xEWg+YQHwePG6c9ou/awU3e588t2eAAA8JJpT6pHTcbhwfiLaO7YFRHEIZj8/uehisrOpNp2C30s5muRey+LIDGLPXXWWtANg0gP1s/+Wk5gMfAxqeftb4I85lC/hSPkGUioAvU7X2bGN9Bs7fEMNvsBQ8AI69enjx4la+LQM/P4j3BNBnHMAy/PwpuAouraXdsqBRmG9BIfzZdyWzjA1osUTIdnXFLtK6w0Ax9rzwnYt7ZDr+3TvSnj0L9oX08z0SCas5h5LxDkxv4/PC5djWUhC5jYpex7jOEcMi4xgkhkvoUsddMj+ZBq87Ib8fL5jhqvcHWQ4AbAY31iIL8uufu/UMs1JxRx8DJEMlusRpimWTqrZZYhHUbe5IRdHAxrC9fLybKaAihJVnywWJzsR/rg0OZnDsja4vWad3c9L69oUcfPRtGKurrpebRD6D4fUTYvMLkZmmNvKbcZfuWd4bpUwO/kLJ95b+/hd5u2NxAiiV6QEXWUIGy+nYiXh356V2kbbPlL3stLKI6QQ6UZ4pUrTxTOnXB/dDP9OFaqUSFaOhamtrn3PpxqEZbSj8biK+hQ9PwvV8jJt40PdZvD0M9fBYQq4OCcMKKxHJQrNufBXGfsahLpa+eaHOvqvBahSCbpsXIi24lw5l71nRKCWzX5" target="_blank" title="칸투칸 기간 한정 할인! 페이지로 이동합니다.">
             <p class="title">
              칸투칸 기간 한정 할인!
             </p>
             <p class="link">
              www.kantukan.co.kr
             </p>
             <p class="description">
              최대 85%! 시원한 여름 도와줄 칸투칸 아쿠아 할인전!
             </p>
            </a>
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="portal--layer">
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0413
  </b>
 </body>
</html>|<---