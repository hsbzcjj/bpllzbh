--->|<!DOCTYPE html>
<html class="os__safari" data-reactroot="" lang="ko">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta charset="utf-8"/>
  <meta content="#000000" name="theme-color"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="on" http-equiv="x-dns-prefetch-control"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="//pics.auction.co.kr/pc/common/sns/facebook/default.png" property="og:image"/>
  <meta content="옥션 골프우산 상품" property="og:image:alt"/>
 </head>
 <body class="service__snowwhite page__list">
  <div id="root">
   <h4 class="text--module_title">
    컨텐츠 퀵메뉴
   </h4>
   <ul id="list--local_skip_navigation">
    <li class="item">
     <a class="link" href="y">
      플로팅 검색 바로가기
     </a>
    </li>
    <li class="item">
     [linkx]
     
    </li>
    <li class="item">
     [ahref]
     
    </li>
    <li class="item">
     [ahref]
     
    </li>
   </ul>
   <div class="state--content_view_type__list" id="content">
    <h3 class="text--region_title">
     <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
    </h3>
    <div class="section--module_wrap" module-design-id="1025">
     <div class="section--content_header_container">
      <div id="region--content_header">
       <h4 class="text--module_title">
        로고
       </h4>
       [linkx]
       
       <div class="section--form_keyword_search">
        <h4 class="text--module_title">
         키워드 검색
        </h4>
        <label class="custom_form--label" for="search">
         키워드 검색어 입력창
        </label>
        <button class="button--keyword_search" type="button">
         <span class="ir">
          키워드 검색 버튼
         </span>
        </button>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           [ahref]
           
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            높은가격순
           </span>
          </li>
          <li class="item">
           <a class="link" href="/list?category=08130400&amp;s=13">
            <span class="ir">
             평점높은순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         [linkx]
         
         [linkx]
         
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="section--content_body_container">
     <div id="region--content_status_information">
      <h3 class="text--region_title">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <div class="section--module_wrap" module-design-id="20">
       <div class="section--breadcrumb">
        <ul class="list--breadcrumb">
         <li class="item">
          [linkx]
          
         </li>
         <li class="item">
          <a class="link--page" href="/category/category08.html" title="골프클럽/의류/용품 카테고리 페이지로 이동합니다.">
           <span class="text--page_name">
            골프클럽/의류/용품
           </span>
          </a>
         </li>
         <li class="item">
          [ahref]
          
         </li>
         <li class="item on">
          <span class="text--page">
           <span class="text--page_name">
            골프우산
           </span>
           <span class="text--item_total">
            (
            1,926
            )
           </span>
          </span>
         </li>
        </ul>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           [ahref]
           
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item">
           [ahref]
           
           <span class="text--selected_sort_item">
            높은가격순
           </span>
          </li>
          <li class="item">
           [ahref]
           
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item">
           [linkx]
           
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         [ahref]
         
         [linkx]
         
        </div>
       </div>
      </div>
     </div>
     <div class="section--inner_content_body">
      <div id="region--content_filter">
       <h3 class="text--region_title">
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h3>
       <div class="section--content_filter_container">
        <div class="section--module_wrap" module-design-id="1021">
         <div class="component component--filter type--toggle name--category on">
          <h4 class="text--module_title">
           카테고리
           필터
          </h4>
          <p class="filter_title">
           카테고리
          </p>
          <button class="button--filter_toggle" title="'카테고리 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '카테고리 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content section--search_category">
           [ahref]
           
           <div class="section--category_group on">
            <ul class="list--category depth3">
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              <a class="link--category" href="/list?category=08130200">
               볼마커
              </a>
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
         <div class="component component--filter type--simple name--free_shipping">
          <h4 class="text--module_title">
           무료배송
          </h4>
          <div class="filter_content">
           <div class="section__checkbox_form">
            <label class="custom_form--label" data-montelena-acode="100001163" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__isFreeShipping--1무료배송" title="필터 조건에 '무료배송' 추가">
             <span class="text">
              무료배송
             </span>
            </label>
           </div>
          </div>
         </div>
         <div class="component component--filter type--toggle name--option on">
          <h4 class="text--module_title">
           브랜드
           필터
          </h4>
          <p class="filter_title">
           브랜드
          </p>
          [ahref]
          
          <div class="filter_content">
           <div class="section__checkbox_form_group">
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36567","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--0타이틀리스트" title="필터 조건에 '타이틀리스트' 추가">
              <span class="text">
               타이틀리스트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43100","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--1볼빅" title="필터 조건에 '볼빅' 추가">
              <span class="text">
               볼빅
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28945","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--2PGATour" title="필터 조건에 'PGATour' 추가">
              <span class="text">
               PGATour
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26200","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--3캘러웨이" title="필터 조건에 '캘러웨이' 추가">
              <span class="text">
               캘러웨이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"37337","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--4투딘골프" title="필터 조건에 '투딘골프' 추가">
              <span class="text">
               투딘골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34888","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--5예스" title="필터 조건에 '예스' 추가">
              <span class="text">
               예스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33668","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--6마루망" title="필터 조건에 '마루망' 추가">
              <span class="text">
               마루망
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20159","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--7젝시오" title="필터 조건에 '젝시오' 추가">
              <span class="text">
               젝시오
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21571","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--8PGA" title="필터 조건에 'PGA' 추가">
              <span class="text">
               PGA
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32542","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--9엑스넬스" title="필터 조건에 '엑스넬스' 추가">
              <span class="text">
               엑스넬스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32841","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--10테일러메이드" title="필터 조건에 '테일러메이드' 추가">
              <span class="text">
               테일러메이드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36935","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--11스위스밀리터리" title="필터 조건에 '스위스밀리터리' 추가">
              <span class="text">
               스위스밀리터리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"52168","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--12로베르타" title="필터 조건에 '로베르타' 추가">
              <span class="text">
               로베르타
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28482","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--13카스코" title="필터 조건에 '카스코' 추가">
              <span class="text">
               카스코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22651","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--14미즈노" title="필터 조건에 '미즈노' 추가">
              <span class="text">
               미즈노
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33435","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--15스릭슨" title="필터 조건에 '스릭슨' 추가">
              <span class="text">
               스릭슨
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23158","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--16윌슨" title="필터 조건에 '윌슨' 추가">
              <span class="text">
               윌슨
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33877","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--17블런트" title="필터 조건에 '블런트' 추가">
              <span class="text">
               블런트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31858","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--18핑" title="필터 조건에 '핑' 추가">
              <span class="text">
               핑
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26802","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--19던롭" title="필터 조건에 '던롭' 추가">
              <span class="text">
               던롭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33696","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--20로마로" title="필터 조건에 '로마로' 추가">
              <span class="text">
               로마로
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28938","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--21빅야드" title="필터 조건에 '빅야드' 추가">
              <span class="text">
               빅야드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21432","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--22페르시안캣" title="필터 조건에 '페르시안캣' 추가">
              <span class="text">
               페르시안캣
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23635","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--23아담스콧" title="필터 조건에 '아담스콧' 추가">
              <span class="text">
               아담스콧
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31215","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--24나이키" title="필터 조건에 '나이키' 추가">
              <span class="text">
               나이키
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34286","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--25풋조이" title="필터 조건에 '풋조이' 추가">
              <span class="text">
               풋조이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25632","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--26PRGR" title="필터 조건에 'PRGR' 추가">
              <span class="text">
               PRGR
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26717","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--27세인트나인" title="필터 조건에 '세인트나인' 추가">
              <span class="text">
               세인트나인
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24444","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--28미스터골프" title="필터 조건에 '미스터골프' 추가">
              <span class="text">
               미스터골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29068","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--29니켄트" title="필터 조건에 '니켄트' 추가">
              <span class="text">
               니켄트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28050","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--30잭니클라우스" title="필터 조건에 '잭니클라우스' 추가">
              <span class="text">
               잭니클라우스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33870","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--31투어스테이지" title="필터 조건에 '투어스테이지' 추가">
              <span class="text">
               투어스테이지
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"60224","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--32헤지스골프" title="필터 조건에 '헤지스골프' 추가">
              <span class="text">
               헤지스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23697","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--33플레이보이" title="필터 조건에 '플레이보이' 추가">
              <span class="text">
               플레이보이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"67631","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--34브리지스톤" title="필터 조건에 '브리지스톤' 추가">
              <span class="text">
               브리지스톤
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27584","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--35아디다스골프" title="필터 조건에 '아디다스골프' 추가">
              <span class="text">
               아디다스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30788","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--36혼마" title="필터 조건에 '혼마' 추가">
              <span class="text">
               혼마
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21455","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--37힐크릭" title="필터 조건에 '힐크릭' 추가">
              <span class="text">
               힐크릭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34348","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--38예스골프" title="필터 조건에 '예스골프' 추가">
              <span class="text">
               예스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"60237","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--39앙드레김골프" title="필터 조건에 '앙드레김골프' 추가">
              <span class="text">
               앙드레김골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23830","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--40클리브랜드" title="필터 조건에 '클리브랜드' 추가">
              <span class="text">
               클리브랜드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27099","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--41미스테리골프" title="필터 조건에 '미스테리골프' 추가">
              <span class="text">
               미스테리골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21291","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--42잔디로" title="필터 조건에 '잔디로' 추가">
              <span class="text">
               잔디로
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29056","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--43커터앤벅" title="필터 조건에 '커터앤벅' 추가">
              <span class="text">
               커터앤벅
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34949","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--44지브이투어" title="필터 조건에 '지브이투어' 추가">
              <span class="text">
               지브이투어
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30545","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--45타겟골프" title="필터 조건에 '타겟골프' 추가">
              <span class="text">
               타겟골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"33037","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--46아놀드파마" title="필터 조건에 '아놀드파마' 추가">
              <span class="text">
               아놀드파마
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31042","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--47겜프" title="필터 조건에 '겜프' 추가">
              <span class="text">
               겜프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"47104","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--48기가골프" title="필터 조건에 '기가골프' 추가">
              <span class="text">
               기가골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32982","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--49파워빌트" title="필터 조건에 '파워빌트' 추가">
              <span class="text">
               파워빌트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28900","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--50그렉노먼" title="필터 조건에 '그렉노먼' 추가">
              <span class="text">
               그렉노먼
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36559","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--51헤즈" title="필터 조건에 '헤즈' 추가">
              <span class="text">
               헤즈
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35838","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--52르꼬끄" title="필터 조건에 '르꼬끄' 추가">
              <span class="text">
               르꼬끄
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32781","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--53지온골프" title="필터 조건에 '지온골프' 추가">
              <span class="text">
               지온골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23658","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--54오피스플러스" title="필터 조건에 '오피스플러스' 추가">
              <span class="text">
               오피스플러스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35855","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--55랜드스케이프" title="필터 조건에 '랜드스케이프' 추가">
              <span class="text">
               랜드스케이프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26048","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--56Goker" title="필터 조건에 'Goker' 추가">
              <span class="text">
               Goker
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21251","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--57웍스골프" title="필터 조건에 '웍스골프' 추가">
              <span class="text">
               웍스골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"31030","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--58가파치" title="필터 조건에 '가파치' 추가">
              <span class="text">
               가파치
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"28957","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--59기라로쉬" title="필터 조건에 '기라로쉬' 추가">
              <span class="text">
               기라로쉬
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34678","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--60패기앤코" title="필터 조건에 '패기앤코' 추가">
              <span class="text">
               패기앤코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27977","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--61제이린드버그" title="필터 조건에 '제이린드버그' 추가">
              <span class="text">
               제이린드버그
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"29791","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--62아디다스" title="필터 조건에 '아디다스' 추가">
              <span class="text">
               아디다스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34498","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--63요지야마모토" title="필터 조건에 '요지야마모토' 추가">
              <span class="text">
               요지야마모토
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32380","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--64X스파이더스" title="필터 조건에 'X스파이더스' 추가">
              <span class="text">
               X스파이더스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24450","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--65그랑프리" title="필터 조건에 '그랑프리' 추가">
              <span class="text">
               그랑프리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"35839","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--66르꼬끄골프" title="필터 조건에 '르꼬끄골프' 추가">
              <span class="text">
               르꼬끄골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27376","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--67코브라골프" title="필터 조건에 '코브라골프' 추가">
              <span class="text">
               코브라골프
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30321","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--68포틴" title="필터 조건에 '포틴' 추가">
              <span class="text">
               포틴
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"61503","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--69코브라" title="필터 조건에 '코브라' 추가">
              <span class="text">
               코브라
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20387","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--70링스스포츠" title="필터 조건에 '링스스포츠' 추가">
              <span class="text">
               링스스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25807","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--71까스텔바작" title="필터 조건에 '까스텔바작' 추가">
              <span class="text">
               까스텔바작
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34407","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--72엠유스포츠" title="필터 조건에 '엠유스포츠' 추가">
              <span class="text">
               엠유스포츠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26888","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--73라이트" title="필터 조건에 '라이트' 추가">
              <span class="text">
               라이트
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21318","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--74제이스" title="필터 조건에 '제이스' 추가">
              <span class="text">
               제이스
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"21452","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--75히스케이" title="필터 조건에 '히스케이' 추가">
              <span class="text">
               히스케이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23720","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--76콘스타" title="필터 조건에 '콘스타' 추가">
              <span class="text">
               콘스타
              </span>
             </label>
            </div>
            <div class="section__checkbox_form">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23171","filter_yn":"y","request_id":"f7a72e1940bb4e1d9936f26380bb024f","tracking_id":"e8035p9023r9089m14744d1024s20i0"}' for="attribute__default--77겐지야마모토" title="필터 조건에 '겐지야마모토' 추가">
              <span class="text">
               겐지야마모토
              </span>
             </label>
            </div>
            <button class="button--show_more_filter_as_each_item" title="브랜드 필터 더보기" type="button">
             <span class="text">
              더보기
             </span>
            </button>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1023">
         <div class="component component--filter type--toggle name--price on">
          <h4 class="text--module_title">
           가격대
          </h4>
          <p class="filter_title">
           가격대
          </p>
          <button class="button--filter_toggle" title="'가격대 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '가격대 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section--price">
            <div class="section--price_form">
             <label for="min_price">
              최소금액
             </label>
             <span class="text--hyphen">
              ~
             </span>
             <label for="max_price">
              최대금액
             </label>
             <button class="button--filter_price" title="입력하신 가격대로 검색합니다." type="button">
              <span class="ir">
               가격 필터 적용
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1022">
         <div class="component component--filter type--toggle name--search on">
          [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1][area1][keywordx][area1][mkey1][area1][keywordx][linkx][area1][mkey1][ahref][area1][keywordx][linkx][ahref][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx]
         </div>
        </div>
       </div>
      </div>
      <div id="region--content_body">
       <h3 class="text--region_title">
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h3>
       <div id="section--inner_content_body_container">
        <div class="section--module_wrap" module-design-id="1016">
         <div class="component component--tab_list type--simple">
          <div class="section--tab_arear">
           <ul class="list--tab">
            <li class="item--tab on">
             <a class="link--tab" href="/list?category=08130400&amp;t=a">
              <span class="text--tab_name">
               전체
              </span>
              <span class="text--item_count">
               1,926
              </span>
              <span class="for-a11y">
               개 상품보기 [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li><li>[area1][mkey1]</li>
              </span>
              <span class="for-a11y">
               현재 활성화된 탭입니다.
              </span>
             </a>
            </li>
            <li class="item--tab">
             [linkx]
             
            </li>
            <li class="item--tab">
             [linkx]
             
            </li>
            <li class="item--tab">
             <a class="link--tab" href="/list?category=08130400&amp;t=d">
              <span class="text--tab_name">
               올킬
              </span>
              <span class="text--item_count">
               0
              </span>
              <span class="for-a11y">
               개 상품보기
              </span>
             </a>
            </li>
            <li class="item--tab">
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             프리미엄등록
            </p>
            <div class="section--advertisement">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               프리미엄등록이란?
              </strong>
              <p class="text--information_description">
               프리미엄 광고를 구매한 상품으로 옥션랭킹순으로 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 848
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,414
                </span>
                <span class="for-a11y">
                 건[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][area1][keywordx][linkx][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][pkeyx][ahref][area1][mkey1][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1]
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/cielkd" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                씨엘Ciel
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 21,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.7점
                </span>
                <div class="seller_awards" title="후기평점 4.7점">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 171
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 777
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 642
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,457
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B357454281" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 3
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 38,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 39,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 45
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 147
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B714033492" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 13,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 16,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A803065302" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  대형사이즈 80 자동 이중방풍 골프우산/폈을때137cm/자외선차단/장우산/필드용품/장마철대비/선물용/행사용
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 15
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 28,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 33,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 95
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 493
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/LUXCOMPANY" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                LUXCOMPANY
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 21,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 67
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 249
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 27,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 [pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][area1][mkey1][ahref][area1][keywordx][linkx][area1][keywordx][area1][mkey1][linkx][area1][mkey1][pkeyx]
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 21
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/onegolf" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="img" style="background-image:url(http://image.esmplus.com/Store/20181024/18/0fc4ac9186c649c8/0)">
                원골프
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 퀵서비스
                </span>
               </li>
               <li class="item">
                <h1>
                 <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                </h1>
                <span class="text--addinfo">
                 방문수령
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.9점
                </span>
                <div class="seller_awards" title="후기평점 4.9점">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 35
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 145
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             일반등록
            </p>
            <span class="text--smiledelivery_slogan">
            </span>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B555463825" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 44,060
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 49,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 27
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 34,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 38,200
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 18
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 49,200
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 60,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx]
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 27,490
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건[area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 23
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 32,040
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 36,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B537896517" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  VIP 의전용 골프 장우산 (UV/EVA)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 13,400
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.3점
                </span>
                <div class="seller_awards" title="후기평점 4.3점">
                 <span class="awards_points" style="width:86%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 48
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자<li>[ahref]</li><li>[pkeyx]</li><li>[linkx]</li>[area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B525469311" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 퀵서비스
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 방문수령
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B301691182" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  벤츠 아우디 폭스바겐 장우산 대형 자동우산 골프우산
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 3
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 14,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 15,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.8점
                </span>
                <div class="seller_awards" title="후기평점 4.8점">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 85
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 375
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 39,690
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 44,100
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottei1" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데아이몰
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 37,980
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 42,200
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B491249081" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  미즈노
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  무배/최저가 미즈노정품 1단 골프우산
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 22,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 39
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B601194567" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  YES 예스03 수동 이중방풍 골프우산 블랙 자외선차단
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B663920782" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B663920782" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  캘러웨이
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2018 56인치 싱글 캐노피 오토 골프우산 화이트
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 17
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 42,480
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 51,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [area1][mkey1][area1][keywordx][linkx]
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 16,530
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 63,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 70,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4점
                </span>
                <div class="seller_awards" title="후기평점 4점">
                 <span class="awards_points" style="width:80%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 58,290
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 67,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 [area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx]</li>[area1][mkey1]
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 27,460
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 31,560
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 40,890
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 47,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B511580034" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  스위스밀리터리
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2단자동 클래식
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,270
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 21,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.3점
                </span>
                <div class="seller_awards" title="후기평점 4.3점">
                 <span class="awards_points" style="width:86%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 21,750
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 25,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 20,010
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 23,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 11
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 75,650
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 85,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 4
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B406709387" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B406709387" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  PGA
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  75 자동 올화이바 무지
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 32,040
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 36,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4점
                </span>
                <div class="seller_awards" title="후기평점 4점">
                 <span class="awards_points" style="width:80%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B536336428" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  타이틀리스트
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2018년 투어 싱글 캐노피 골프우산 TA8PLPSCU-0(Tour Single Canop
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 11
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 66,750
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 75,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 3점
                </span>
                <div class="seller_awards" title="후기평점 3점">
                 <span class="awards_points" style="width:60%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 40,280
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 46,290
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B535623589" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 111,860
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 119,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B406709399" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 27,460
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 31,560
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 39,250
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 44,100[area1][keywordx][ahref][area1][mkey1][ahref][area1][mkey1][area1][keywordx][area1][mkey1][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][ahref][area1][mkey1][ahref][pkeyx]
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 41,760
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 48,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B535623576" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 93,060
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 99,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B406709379" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  PGA
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  70 카본 자동 극세사
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 82,380
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 94,680
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 64,380
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 74,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 67,860
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 78,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 13
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 39,150
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 45,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 43,290
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 48,100
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B686798814" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 38,590
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 60,310
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B686799308" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  윌슨 골프 장우산 와인색 70 고급우산 판촉물 야외우
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 38,590
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 60,310
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/tradesale3" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                tradesale3
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 28,400
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 31,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B659782249" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  젝시오
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  던롭코리아 정품  골프 우산 GGP-18007I
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 13,770
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 14,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B554640138" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 75,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 68,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 11,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 55,980
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 87,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 40,780
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 63,720
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 35
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 57,620
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 90,030
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 40,780
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 63,720
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 57,450
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 89,770
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B650678618" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  플로키 대형 접이식 자동골프우산 (네이비색) 필드용
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B650679311" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  플로키 대형 접이식 자동골프우산 (와인색) 필드용우
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 57,550
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 89,930
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 38,590
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 60,310
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 38,590[pkeyx]<li>[linkx]</li>[area1][mkey1]
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 60,310
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 20,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 32,540
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B524246043" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  붐 주문 제작 우산 골프우산 골프우산주문제작
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 37,440
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 58,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B660691238" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 48,400
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 55,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 44,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 50,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B660691241" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  캘러웨이
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2018년형 CG 더블 캐노피 블랙
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 51,920
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 59,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B563500664" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 37,300
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 40,100
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B666063459" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  타이틀리스트
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  정품 투어 싱글 캐노피 골프우산 TA8PLPSCU-01
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 70,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 75,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 5점
                </span>
                <div class="seller_awards" title="후기평점 5점">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 88,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 89,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/sixgolf1" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="img" style="background-image:url(http://gi.esmplus.com/test4plan/logos/a/sixgolf.jpg)">
                식스골프
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A934960064" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 29,810
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 32,050
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 49,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 53,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B665052436" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  엑스넬스
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  PGA투어 80 이중방풍 골프우산 더블케노피 우산
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 30,400
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 32,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 28,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 30,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 2점
                </span>
                <div class="seller_awards" title="후기평점 2점">
                 <span class="awards_points" style="width:40%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 5
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 25,650
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 27,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 30,060
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 46,980
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 2 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                2
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>[area1][mkey1][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][area1][keywordx][linkx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][ahref][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][keywordx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 30,060
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 46,980
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 2 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                2
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 11
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 40,050
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 45,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 14
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 11
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 55,180
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 62,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B541815023" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 37,740
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 42,400
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B547957068" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 132,320
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 206,760
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/bjk4bbr" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                bjk4몰
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 7
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,600
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 20,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 후기평점 4.4점
                </span>
                <div class="seller_awards" title="후기평점 4.4점">
                 <span class="awards_points" style="width:88%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 후기
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 70
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <li>[area1][mkey1]</li>[linkx]<li>[pkeyx]</li>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 6
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 77,470
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 83,300
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/lottecom" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                롯데닷컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 40,550
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 63,370
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 43,140
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 67,410
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
              <li>[area1][keywordx]</li><li>[ahref]</li>[area1][mkey1]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 40,570
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 63,400
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 38,620
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 60,350
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/naviju" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                나비주
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B604172426" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B604172426" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  주문 제작 우산 골프우산 홀인원 기념품 답례품
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 47,140
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 73,660
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B695222631" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B695222631" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  70장우산 장우산 골프우산 블랙우산 편한장우산 블랙
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,440
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 14,760
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 31,010
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 48,460
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B563709654" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  잭니클라우스
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  자동 골프우산 장우산 발수 방오 코팅
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 12
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 13,310
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 15,290
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B717410793" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 43,730
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 68,330
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B682093804" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  골프우산 알루미늄 장우산 튼튼한장우산 국산장우산
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 29,190
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 45,610
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B710580535" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 23,910
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 37,360
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 카드10%
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B721854383" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 36
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 29,770
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 46,520
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jmcom77" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                제이엠쇼핑몰
               </span>
              </a>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B644490082" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 8
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 117,760
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 128,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="24">
         <div class="component component--pagination">
          <h4 class="text--module_title">
           페이징
          </h4>
          <span class="link--previous_page off" title="첫 페이지 입니다">
           <span class="icon">
            <span class="ir">
             첫 페이지 입니다.
            </span>
           </span>
          </span>
          <span class="link--page on" title="현재 페이지는 1 페이지 입니다.">
           1
           <span class="ir">
            현재 페이지는 1 페이지 입니다.
           </span>
          </span>
          [ahref]
          
          [ahref]
          
          [ahref]
          
          [linkx]
          
          [linkx]
          
          <a class="link--page" href="/list?category=08130400&amp;k=0&amp;p=7" title="7 페이지로 이동합니다.">
           7
           <span class="ir">
            7 페이지로 이동합니다.
           </span>
          </a>
          [linkx]
          
          [linkx]
          
          <a class="link--page" href="/list?category=08130400&amp;k=0&amp;p=10" title="10 페이지로 이동합니다.">
           10
           <span class="ir">
            10 페이지로 이동합니다.
           </span>
          </a>
          <a class="link--next_page" href="/list?category=08130400&amp;k=0&amp;p=2" title="다음 페이지로 이동">
           <span class="ir">
            다음 페이지로 이동
           </span>
          </a>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="25">
         <div class="component component--sponsor_link">
          <h4 class="text--module_title">
           스폰서링크
          </h4>
          <div class="section--component_title">
           <p class="text--title">
            스폰서링크
           </p>
           <div class="section--advertisement">
            <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
             <span class="text">
              광고
             </span>
            </button>
            <div class="layer--information">
             <strong class="text--information_title">
              스폰서링크란?
             </strong>
             <p class="text--information_description">
              제휴사의 광고가 전시되는 영역입니다.
             </p>
             <button class="button--close_layer" type="button">
              <span class="ir">
               광고
               안내 레이어 닫기
              </span>
             </button>
            </div>
           </div>
          </div>
          [linkx]
          
          <ul class="section--link_list">
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              1
             </span>
            </div>
            [ahref]
            
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              2
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=WG3J9ywenwH89e0kODN/gf./w==kuSrcev4nhy/Z76BG70Biv3WvyeJGgLmFLR6ZfSQkii7k6k+mWgetq0/LqQFn4iTAfl/wQFwv6T+Mg7Q0/Ij/AEGyKlikc/EfsWreNoqEfFbX45T2UwgpclthwxgpDdOUh5lOOPwxm7vXD1mDFN6MKtvtmDmPLPhjfje+PXb4MEqnZd8PrEXDYJT+yVRFWd8hJLimN2InoWrGss86gGJYWRxUPVMwNn8jfZa7PX5uzmLy+VIyGM5Y3lfEDt4g5ogRftN6OS+rDuz9gU/wxgGaP3oViu9jU1/znjMwZhqNuHTH+jztr1H1Xw5i1AZ3HC/gunoSiWvU3KkgLq6DTjpA8Im3sDpLUayB1BOf7E0295si6atUQAgpEIUBDgufa2xDAzXpKSkaywRw5Kx9PLQDbPX4Mwg63l3PZ4oBchryTGjOBg5KhBo/qd0XheaiEziViJ/X9+lya2U2rokrYF3kyY3qJfleXO4wXD2XOQOQKL/yOxudTVu7iGptTbyM4AHq0kCXDEQFQFmP3bYIM01+LjAmQCUGJ73tnjF+NzSNAsdZFgzPHBBElIGK8sMaSoOWX/4pIwXK5HkmuRTV6y386zUkplapkIRGzbxXGi4L0nefhB+q99NERe4GkzJYy+tmw3UWvehKq5EFAWBN8FLEP9k4x8cIsaHSgcF7Vn7+bdJFMIjmkCearVEPI+aw8zUvwcN8SSnaYpmmcip4/Is7pcmq+PHsrn3Nl4PvW2/5MPg=" target="_blank" title="우산전문 킹콩기프트 페이지로 이동합니다.">
             <p class="title">
              우산전문 킹콩기프트
             </p>
             <p class="link">
              www.k-kong.co.kr
             </p>
             <p class="description">
              행사용, 홍보용, 판촉용 우산 전문제작, 2단, 3단 골프우산, 장우산, 무료배송
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              3
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=vnV9F66KWnzwllycwmlvjv./w==krcqn+MSpa17Y5v1YUtFbxZ6FSXpjZRlhXKNX5AWdn/0qJJBvZWHMsz49aqyGmlC1zhU7MR/p+Plra/UbRhO2oMmTp/pvzNq7vYbS/jWEGX7+RyexUX2nNe89GiF9+LTW52i3ylytTUsnLOp57yJBmQ6FXfjQJbEs0cljAM8QmXt8tpXxU0T14ZqHLsVcPkPWghPozuLoWV4DKHxshI+dizeJFwjLeRHIPGPuMob4eh9G3ZHb0jFEeURdXeQOSEXk205e4S43dKXPFK1M9dAcQOWegBe3PHY0U9aP78OkTktS/yeP2Vgue1ATOtYkdOBw2+hdaZM6F1rRe7iwhZAijPjc13jc96Y0B/29Jd1XVmsuaZ+ncvREUGHZjOz2PrK0C/+nO/vzRpuV2USvrceNE0UuGySZ3+M9MM5hm9Z2+yuEORp9AgQnGfMyg1vgHc2QRK/0NbDbq+cjUICD7W2ZLO5fcnrng0Mozo+8ygZDcH7Y/ep+vHeZGWijvPeCvEIG1YM8c77CnnEldNmEJlqQqBcmoYYyStNIIZEHnfniJU3zPGWHd+hNwGqrEgb/Y0/fRLtpPukX97mCJ9ypN9U0wtGq1PQu+8CsJy3uYEuIh/+3gRZWcYsYU2TV1u2QxmpSfkANJc26DkhffsaZNUHfBI5ltYJ0Y2XT81Hp+2kOyrF9w3emm1TwM4lPVnCKocmPVtU+XcmyAHmvKOMAHHAZfbGWqRLeWN8+AMGzUHrOaPSspjdlVQWfUlzDpkO+f1RVovOjEAHJY5I4Yf7Rt6/Zug==" target="_blank" title="골프우산, 기프트코리아 페이지로 이동합니다.">
             <p class="title">
              골프우산, 기프트코리아
             </p>
             <p class="link">
              www.giftcorea.com
             </p>
             <p class="description">
              #판촉물 잘하는 곳, 단체행사기념품, 실속 답례품, 증정 사은품,골프우산
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              4
             </span>
            </div>
            [ahref]
            
           </li>
           <li class="item">
            <div class="section--item_index">
             5[pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[ahref]</li><li>[pkeyx]</li>
            </div>
            <a class="link--sponsor" href="/adcr?x=RDCr2M6iiKO+JI8xMpkGr..w==kl5YKij4QycHYD5OTLENOzIUZ0+oHakMLSLL9IenktG+fhOxHFsuHBna9HexedQj/ExIT7/P0yuuzQW1HE5oHvJEFCM+prHxCzVl3rzJ3PBWjtiCmLxep7SWciZygj+yDdLiVGUNnkikZZNagu414kT5gLRj/joXphcj05/UPIAcxkXhWc8okRIggRIFfzc6usIYc0sottOPD8lvJwXYRNe8ssQkrTPf+XL0TYDgw6bVSWirxZ8yYGpJoP5XHC406sDfDWQOkh2vU7qYW4j1o9z5S0eI4FErlhVFgEdpxhlTRWqG1wr0aV0rya2NKglLKqBQuva05ChkdlUlu3hB5xtC5V9IdONmLPp2SEQDBerTo3TqPfreZvvcSylNVwfZOp9/4wyrUf0AYkxsuANKhjJ5VGPkXcwZAEG7RgW1QXLm18JxOUvPmpOE82QB7nnRoPmDDvdjiRL6VPpDtEtt1avOULfli8YCcEtYNji9p6zSoxk+lM7jf1DMfsapi6Mw6ZiKFHBS8eXoqvxl0dAOv54IJmFYM+zkaMr/FrEQi+SjfW6imAsUews1PcyThu1e0fbo/JZE+2SfNSJxY04L5Qy6fZbIVM1Qx2Vntpih7gVqH4Bi5YYkuR9caJDqrUaAiVK8qDy0obEKWbV9qkVIknI2d9Iv2NTADPWdOjsFO9fA59puZP3/wblr0Q+JXyuOEovOjEAHJY5I4Yf7Rt6/Zug==" target="_blank" title="우산전문 망또우산나라 페이지로 이동합니다.">
             <p class="title">
              우산전문 망또우산나라
             </p>
             <p class="link">
              www.woosannara.kr
             </p>
             <p class="description">
              MBC뉴스투데이방송 우산타올공장, 동대문도매매장, 답례품, 단체주문, 소량인쇄가능
             </p>
            </a>
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="portal--layer">
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0409
  </b>
 </body>
</html>|<---