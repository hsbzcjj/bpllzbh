--->|<!DOCTYPE doctype html>
<html lang="ko-kr">
 <head>
  <meta charset="utf-8"/>
  <meta content="telephone=no" name="format-detection"/>
  <meta content="ie=edge" http-equiv="x-ua-compatible"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description">
   <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords">
   </meta>
  </meta>
 </head>
 <body class="LeviKR">
  <div class="pt_product-search-result" id="wrapper">
   <div class="header-banner">
    <div class="html-slot-container">
     <span itemscope="" itemtype="https://schema.org/Organization">
      [ahref]
      
      [linkx]
      
      [ahref]
      
      [linkx]
      
     </span>
     <div class="header-banner-slot">
      [ahref]
      
      [ahref]
      
      [ahref]
      
     </div>
    </div>
    <div class="header-signin">
     [ahref]
     
    </div>
    <div class="content-asset">
     <div class="header-flag">
      [linkx]
      
     </div>
    </div>
   </div>
   <h1 style="display:none">
    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
   </h1>
   <div class="top-banner" role="banner">
    <button class="menu-toggle" data-event="event-data-navigation" data-header-nav="MenuHamburger">
     <i class="menu-icon">
     </i>
     <span class="visually-hidden">
      Menu
     </span>
    </button>
    <div class="content-asset">
     [linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][pkeyx][area1][keywordx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][mkey1]
    </div>
    <span class="header-search-icon">
     <button id="header-mobile-search-icon">
     </button>
    </span>
    <span class="header-close-icon">
     <button id="header-mobile-close-icon">
     </button>
    </span>
    <nav id="navigation" role="navigation">
     <ul class="menu-utility-user">
      <li class="user-info">
       <i class="fa fa-user" style="display:none">
       </i>
       [ahref]
       
       <div class="user-panel">
        <div class="user-links">
         [linkx]
         
         [linkx]
         
         [ahref]
         
         [ahref]
         
         [linkx]
         
         [ahref]
         
        </div>
       </div>
      </li>
      <li class="user-wishlist-info">
       [ahref]
       
      </li>
     </ul>
     <ul class="menu-category level-1" style="display:none">
      <li class="main-menu 남성">
       <i class="menu-item-toggle fa fa-plus">
       </i>
       <h2>
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h2>
       <div class="level-2">
        <ul class="menu-horizontal">
         <li>[ahref]</li><li>[linkx]</li><li>[area1][keywordx]</li><li>[linkx]</li>[linkx]
        </ul>
       </div>
      </li>
      <li class="main-menu 여성">
       <i class="menu-item-toggle fa fa-plus">
       </i>
       <h2>
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h2>
       <div class="level-2">
        <ul class="menu-horizontal">
         <li>
          <i class="level2-toggle fa fa-plus">
          </i>
          [ahref]
          
          <ul class="level-3">
           <li>
            [linkx]
            
           </li>
           <li>
            [area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][area1][keywordx][ahref][linkx][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref]
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
          </ul>
         </li>
         <li>
          <i class="level2-toggle fa fa-plus">
          </i>
          [ahref]
          
          <ul class="level-3">
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </li>
         <li>
          <i class="level2-toggle fa fa-plus">
          </i>
          [linkx]
          
          <ul class="level-3">
           <li>
            [linkx]
            
           </li>
           <li>
            <a data-event="event-data-navigation" data-header-nav="Category:710 슈퍼스키니" href="/%EC%97%AC%EC%84%B1/%EC%A7%84_%EB%B0%94%EC%9D%B4_%EC%8A%A4%ED%83%80%EC%9D%BC/710_%EC%8A%88%ED%8D%BC%EC%8A%A4%ED%82%A4%EB%8B%88">
             710 슈퍼스키니
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </li>
         <li>
          <i class="level2-toggle fa fa-plus">
          </i>
          [ahref]
          
          <ul class="level-3">
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
          </ul>
         </li>
        </ul>
       </div>
      </li>
      <li class="main-menu 501">
       <i class="menu-item-toggle fa fa-plus">
       </i>
       <h2>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
       <div class="level-2">
        <ul class="menu-vertical">
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </li>
      <li class="main-menu lstory">
       <i class="menu-item-toggle fa fa-plus">
       </i>
       <h2>
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h2>
       <div class="level-2">
        <ul class="menu-vertical">
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </li>
      <li class="main-menu 할인">
       <i class="menu-item-toggle fa fa-plus">
       </i>
       <h2>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
       <div class="level-2">
        <ul class="menu-vertical">
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </li>
      <li class="main-menu 신상품">
       <i class="menu-item-toggle fa fa-plus">
       </i>
       <h2>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
       <div class="level-2">
        <ul class="menu-vertical">
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </li>
      <li class="main-menu hot-deal">
       <h2>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
      </li>
     </ul>
     <div class="header-search">
      <form action="/search" method="get" name="simpleSearch" role="search">
       <fieldset>
        <label class="visually-hidden" for="q">
         Search Catalog
        </label>
        <div class="header-search-button">
         <button type="submit">
          <span class="visually-hidden">
           검색
          </span>
         </button>
        </div>
       </fieldset>
      </form>
     </div>
     <div class="header-banner-mobile">
      <div class="html-slot-container">
       <span itemscope="" itemtype="https://schema.org/Organization">
        [linkx]
        
        [ahref]
        
        [linkx]
        
        [linkx]
        
       </span>
       <div class="header-banner-slot">
        [linkx]
        
        [linkx]
        
        [linkx]
        
       </div>
      </div>
     </div>
    </nav>
    <div id="mini-cart">
     <div class="mini-cart-total">
      <div>
       [ahref]
       
      </div>
     </div>
    </div>
   </div>
   <div class="header-offers">
    <div class="html-slot-container">
     <div class="header-promotion-offer">
      <span class="subsale" id="subsale1">
       <span class="bullet-banner-sec">
       </span>
       신규 가입 후, 첫 구매 시 20% 할인
       [linkx]
       
       <div class="offerdetails hidden">
        <h1 style="font-style: normal; margin-right: 5px;">
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h1>
        <div style="text-align:justify; font-size: smaller;">
         <li>
          사용방법 : 가입시 이메일 수신동의를 해주시면 20%쿠폰코드가 발송됩니다.
         </li>
         <li>
          본 쿠폰은 신규가입쿠폰으로 한 아이디당 1회 사용 가능합니다.
         </li>
         <li>
          본 쿠폰은 리바이스 모든 상품에 적용 가능합니다. (단, LVC,일부신규상품 제외)
         </li>
         <br/>
        </div>
       </div>
      </span>
      <div class="expand-header-offer" id="myheaderoffer">
       <span>
       </span>
      </div>
      <span class="subsale" id="subsale2">
       <span class="bullet-banner-sec">
       </span>
       네이버페이 공지안내
       [ahref]
       
       <div class="offerdetails hidden" style="text-align:center;">
        <h1 style="font-style: normal; margin-right: 5px;">
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h1>
        <div style="text-align:justify; font-size: smaller;">
         <li>
          리바이스 코리아입니다. 6월 14일부터 네이버페이 사용이 가능합니다.
         </li>
         <li>
          많은 참여 부탁드리겠습니다. 감사합니다.
         </li>
        </div>
       </div>
      </span>
      <div class="jsHidden">
      </div>
     </div>
    </div>
   </div>
   <div class="clearfix" id="main" role="main">
    <div id="browser-check">
     <noscript>
      <div class="browser-compatibility-alert">
       <i class="fa fa-exclamation-triangle fa-2x pull-left">
       </i>
       <p class="browser-error">
        Your browser's Javascript functionality is turned off. Please turn it on so that you can experience the full capabilities of this site.
       </p>
      </div>
     </noscript>
    </div>
    <div class="breadcrumb">
     [linkx]
     
     [linkx]
     
     [linkx]
     
    </div>
    <div class="content-slot slot-grid-header">
    </div>
    <div class="primary-content" id="primary">
     <div class="search-result-options">
      <div class="sort-by">
       <form action="/%EB%82%A8%EC%84%B1/%EC%9D%98%EB%A5%98/%EB%B0%94%EC%A7%80" method="post" name="Product-Sorting-Options">
        <label for="grid-sort-header">
         정렬
        </label>
        <select data-click="Filter-Sorting-inventory-high-to-low" data-event="event-data-searchresult-Interaction" id="grid-sort-header">
         <option value="https://www.levi.co.kr/%EB%82%A8%EC%84%B1/%EC%9D%98%EB%A5%98/%EB%B0%94%EC%A7%80?srule=price-low-to-high&amp;sz=12&amp;start=0">
          낮은가격순[area1][keywordx][area1][mkey1][pkeyx][linkx][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][pkeyx][linkx][area1][mkey1][area1][keywordx]<li>[pkeyx]</li>[area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
         </option>
         <option value="https://www.levi.co.kr/%EB%82%A8%EC%84%B1/%EC%9D%98%EB%A5%98/%EB%B0%94%EC%A7%80?srule=price-high-to-low&amp;sz=12&amp;start=0">
          높은가격순
         </option>
         <option value="https://www.levi.co.kr/%EB%82%A8%EC%84%B1/%EC%9D%98%EB%A5%98/%EB%B0%94%EC%A7%80?srule=top-sellers&amp;sz=12&amp;start=0">
          베스트셀러
         </option>
         <option selected="" value="https://www.levi.co.kr/%EB%82%A8%EC%84%B1/%EC%9D%98%EB%A5%98/%EB%B0%94%EC%A7%80?srule=inventory-high-to-low&amp;sz=12&amp;start=0">
          추천상품
         </option>
        </select>
        <button class="sbHolder" title="Filter products" type="button">
         상세검색
        </button>
       </form>
      </div>
      <div class="col-left sidebar on">
       <div class="block block-layered-nav">
        <div class="block-close">
         <span>
          상세검색
         </span>
         [linkx]
         
        </div>
        <div class="block-content">
         <div class="refinements" id="secondary_plp">
          <h2 class="visually-hidden">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
          <span class="refinement-header">
           상세검색
          </span>
          <div class="mobilefilteractions">
           [ahref]
           
           [linkx]
           
          </div>
          <div class="refinement category-refinement">
           <h3 class="toggle">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h3>
           <div>
            <ul id="category-level-1">
             <li class="expandable angle-right active angle-down">
              [ahref]
              
              <ul id="category-level-2">
               <li>
                [linkx]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[ahref]<li>[area1][keywordx]</li><li>[pkeyx]</li>
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                <li>[pkeyx]</li><li>[pkeyx]</li><li>[linkx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx]</li><li>[ahref]</li><li>[linkx]</li><li>[area1][keywordx]</li>
               </li>
              </ul>
             </li>
             <li class="expandable angle-right">
              <li>[area1][mkey1]</li>[pkeyx][linkx][area1][mkey1][area1][mkey1]
             </li>
             <li class="expandable angle-right">
              [linkx]
              
             </li>
             <li class="expandable angle-right">
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
          <div class="refinement fit">
           <h3 class="toggle">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h3>
           <ul>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
          <div class="refinement refinementWaist">
           <h3 class="toggle">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h3>
           <ul>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
          <div class="refinement">
           <h3 class="toggle">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h3>
           <ul>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
          <div class="mobilefilteractions">
           [linkx]
           
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="pagination">
       <div class="results-hits">
        <span class="style-count">
         12
        </span>
        개 상품
       </div>
      </div>
     </div>
     <div class="search-result-content">
      <ul class="search-result-items tiles-container clearfix hide-compare" id="search-result-items">
       <li class="grid-tile" data-colors-to-show="0003">
        <div class="product-tile" data-itemid="727970003" id="55576b51abdc41b3f1fdc539d0">
         <div class="product-image">
          <div class="badge-text">
           <p>
            <span style="font-size: 11px;">
             <span style="color: rgb(255, 255, 255);">
              <span style="background-color: rgb(192, 57, 43);">
               HOT DEAL
              </span>
             </span>
            </span>
           </p>
          </div>
          [ahref]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-standard-price" title="Standard Price">
           <span class="pricevalue">
            ₩109,000
           </span>
          </span>
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩49,000
           </span>
          </span>
          <div class="discount-amount">
           <span class="promo-discount">
            55% OFF
           </span>
          </div>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0015">
        <div class="product-tile" data-itemid="577830015" id="ca23bbb31789227d36a991bd3d">
         <div class="product-image">
          <div class="badge-text">
           <p>
            <span style="font-size: 11px;">
             <span style="color: rgb(255, 255, 255);">
              <span style="background-color: rgb(192, 57, 43);">
               HOT DEAL
              </span>
             </span>
            </span>
           </p>
          </div>
          [linkx]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-standard-price" title="Standard Price">
           <span class="pricevalue">
            ₩89,000
           </span>
          </span>
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩40,000
           </span>
          </span>
          <div class="discount-amount">
           <span class="promo-discount">
            55% OFF
           </span>
          </div>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0026">
        <div class="product-tile" data-itemid="577830026" id="5e07ec778e4bc6c8c7d7eb6210">
         <div class="product-image">
          <div class="badge-text">
           <p>
            <span style="font-size: 11px;">
             <span style="color: rgb(255, 255, 255);">
              <span style="background-color: rgb(192, 57, 43);">
               HOT DEAL
              </span>
             </span>
            </span>
           </p>
          </div>
          [ahref]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-standard-price" title="Standard Price">
           <span class="pricevalue">
            ₩89,000
           </span>
          </span>
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩40,000
           </span>
          </span>
          <div class="discount-amount">
           <span class="promo-discount">
            55% OFF
           </span>
          </div>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0002">
        <div class="product-tile" data-itemid="798880002" id="a4502093ddec626dbe7dfbca30">
         <div class="product-image">
          [ahref]
          
         </div>
         <div class="product-name">
          [linkx]
           [pkeyx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][pkeyx][linkx][area1][keywordx][area1][keywordx][area1][mkey1][linkx][ahref][ahref][linkx][pkeyx][area1][mkey1][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩99,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0014">
        <div class="product-tile" data-itemid="195090014" id="a5d0b6fb9b5e527a62c35d4f13">
         <div class="product-image">
          [linkx]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩270,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0000">
        <div class="product-tile" data-itemid="798880000" id="223b36237520d02d7903c83f96">
         <div class="product-image">
          [ahref]
          
         </div>
         <div class="product-name">
          [linkx]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩99,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0013">
        <div class="product-tile" data-itemid="195090013" id="fa51f55d5ee4bf04f39c660fe0">
         <div class="product-image">
          [ahref]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩270,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0001">
        [ahref]<li>[area1][mkey1]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
       </li>
       <li class="grid-tile" data-colors-to-show="0000">
        <div class="product-tile" data-itemid="748770000" id="069b7ca8483d40b244fea9bc37">
         <div class="product-image">
          [ahref]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩300,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0001">
        <div class="product-tile" data-itemid="229620001" id="bf55a244416cad46df2da6251d">
         <div class="product-image">
          [linkx]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩270,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0002">
        <div class="product-tile" data-itemid="748840002" id="0616c10544a904941d464e5604">
         <div class="product-image">
          [ahref]
          
         </div>
         <div class="product-name">
          [ahref]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩200,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
       <li class="grid-tile" data-colors-to-show="0000">
        <div class="product-tile" data-itemid="599780000" id="5f209863570d3d2aa5cc26adeb">
         <div class="product-image">
          [ahref]
          
         </div>
         <div class="product-name">
          [linkx]
          
         </div>
         <div class="product-pricing">
          <span class="product-sales-price" title="Sale Price">
           <span class="pricevalue">
            ₩270,000
           </span>
          </span>
          <span class="null" title="null">
           <span class="pricevalue">
           </span>
          </span>
         </div>
        </div>
       </li>
      </ul>
     </div>
     <div class="html-slot-container">
     </div>
     <div id="backToTop">
      [ahref]
      
     </div>
    </div>
    <div class="refinements" id="secondary">
     <h2 class="visually-hidden">
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h2>
     <span class="refinement-header">
      상세검색
     </span>
     <div class="mobilefilteractions">
      [ahref]
      
      [linkx]
       <li>[ahref]</li><li>[linkx]</li>[ahref]
      
     </div>
     <div class="refinement category-refinement">
      <[keywordx]>
      </[keywordx]>
      <div>
       <ul id="category-level-1">
        <li class="expandable angle-right active angle-down">
         [linkx]
         
         <ul id="category-level-2">
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="expandable angle-right">
         [ahref]
          [area1][keywordx]<li>[area1][mkey1]</li><li>[area1][keywordx]</li><li>[ahref]</li>
         
        </li>
        <li class="expandable angle-right">
         <a class="refinement-link" data-click="Category Refinement" data-event="event-data-searchresult-refinement" href="/%EB%82%A8%EC%84%B1/%EC%A7%84_%EB%B0%94%EC%9D%B4_%EC%8A%A4%ED%83%80%EC%9D%BC" title="Go to Category: 진 바이 스타일">
          진 바이 스타일
         </a>
        </li>
        <li class="expandable angle-right">
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
     <div class="refinement fit">
      <h3 class="toggle">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <ul>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="refinement refinementWaist">
      <h3 class="toggle">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="refinement">
      <h3 class="toggle">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="mobilefilteractions">
      [linkx]
      
     </div>
    </div>
   </div>
   <footer>
    <div class="footer-container">
     <div class="cookiebar" style="display:none;">
      <div class="content-asset">
       <p class="privacytext">
        리바이스 공식 온라인몰은 이용자의 편의와 맞춤형 서비스 제공을 위하여 쿠키를 운영합니다.
고객님께서는 사이트 사용을 위해
        [ahref]
        
        과
        [ahref]
        
        에 따라 쿠키사용에 동의합니다.
       </p>
       <button id="dismissbtn" name="dismiss">
        계속
       </button>
      </div>
     </div>
     <div class="footer">
      <div class="footer-item">
       <div class="heading1">
        E-매거진 구독하기
       </div>
       <div class="subscribe-heading">
        <div>
         리바이스 E-매거진 구독 신청 시, 15% OFF 쿠폰을 드립니다
        </div>
       </div>
      </div>
      <div class="footer-item">
       <h3>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h3>
       <form action="/on/demandware.store/Sites-LeviKR-Site/ko_KR/Order-Track" class="track-order" id="dwfrm_ordertrack" method="post">
        <div class="form-row required">
         <label for="dwfrm_ordertrack_orderNumber_d0xhjagcjlnl">
          <span class="required-indicator">
           •
          </span>
          <span>
          </span>
         </label>
         <div class="field-wrapper">
         </div>
         <div class="form-caption">
         </div>
        </div>
        <div class="form-row required">
         <label for="dwfrm_ordertrack_orderEmail_d0frogndqmrt">
          <span class="required-indicator">
           •
          </span>
          <span>
          </span>
         </label>
         <div class="field-wrapper">
         </div>
         <div class="form-caption">
         </div>
        </div>
        <div class="form-row form-row-button">
         <button class="track" data-event="event-data-navigation" data-footer-nav="TrackOrder" name="dwfrm_ordertrack_findorder" type="submit" value="조회">
          조회
         </button>
        </div>
       </form>
      </div>
     </div>
     <div class="footer-item">
      <ul class="menu-footer menu pipe">
       <div class="help">
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/help-faq.html#delivery" title="배송">
          배송
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
       </div>
       <div>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </div>
       <div>
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
       <div>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
       </div>
       <div>
        <li>
         [ahref]
         
         [ahref]
         
        </li>
        <li>
         [ahref]
         
         [ahref]
         
        </li>
        <span>
         주중(오전 9:30 - 오후 6:30)
        </span>
       </div>
      </ul>
     </div>
     <div class="footer-item">
      <div class="content-asset">
       <div class="footer-copyright">
        리바이스트라우스 코리아 주식회사 | 대표이사 : 파스칼센코프 | 개인정보관리책임자:파스칼센코프 | 서울특별시 강남구 도산대로 414, 한성빌딩 11층 사업자등록번호 : 120-81-00074 | 통신판매업 신고번호 : 제 2017-서울강남-02417 호 ,
        [ahref]
        
        | 호스팅 사업자 : salesforce.com, inc. | NHN KCP를 통해 신용카드 결제 및 구매안전서비스를 제공합니다.
        <br/>
       </div>
       <div class="copyright">
        Levi Strauss Korea Ltd. 2017 All Rights Reserved.
       </div>
      </div>
     </div>
    </div>
   </footer>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0090
  </b>
 </body>
</html>
|<---