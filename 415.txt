--->|<meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
<meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
<!DOCTYPE HTML>
<html class="no-js" dir="ltr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1, minimum-scale=0.5, maximum-scale=1, user-scalable=yes" id="resResponsiveViewport" name="viewport"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="http://www.ksa.or.kr/sites/ksa_kr/masterSkin/ksa_kr_M/images/logo.png" property="og:image"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
 </head>
 <body class="sub _responsiveObj">
  <dl class="skipMenu">
   <dt>
    바로가기 메뉴[pkeyx][ahref][area1][keywordx][area1][keywordx][pkeyx][pkeyx][area1][keywordx][area1][keywordx][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][linkx][linkx][area1][mkey1][linkx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][mkey1][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][ahref][area1][keywordx]
   </dt>
   <dd>
    <a class="accessibility01" href="p">
     본문 바로가기
    </a>
   </dd>
   <dd>
    [ahref]
    
   </dd>
  </dl>
  <div id="_wrap">
   <div id="mListClose">
   </div>
   <div id="_wrapHeader">
    <div id="wrapGnbBG">
    </div>
    <div id="_header">
     <div class="mymenu">
      <a href="/ksa_kr/2405/subview.do">
       마이메뉴
      </a>
     </div>
     <div class="sitemap">
      [ahref]
      
     </div>
     <div class="unb">
      <ul>
       <li>
        <button class="mList" id="mListOpen">
         전체메뉴
        </button>
       </li>
      </ul>
     </div>
     <h2 id="_logo">
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h2>
     <div class="topSearch">
      <meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
      <form action="/search.jsp" method="post" name="totalSearchForm" onsubmit="jf_totalTargetSet();">
       [linkx]
       
      </form>
     </div>
     <div class="topLanguage">
      <label for="topLanguage">
      </label>
      <select id="topLanguage" name="topLanguage" title="언어선택">
       <option value="">
        Language
       </option>
       <option value="http://eng.ksa.or.kr">
        English
       </option>
       <option value="http://cn.ksa.or.kr">
        中國語
       </option>
      </select>
      <a href="#" onclick="goLinks(); return false;" title="새창에서 열림">
       이동
      </a>
     </div>
     <div class="mtopLanguage">
      <ul>
       <li>
        <a class="eng" href="r" target="_blank" title="새창에서 열림">
         English
        </a>
       </li>
       <li>
        <a class="chn" href="r" target="_blank" title="새창에서 열림">
         中國語
        </a>
       </li>
      </ul>
     </div>
     <div id="wrapGnb" tabindex="0">
      <meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
      <nav class="menuUItop">
       <div class="top_div div_1">
        <ul class="top_k2wiz_GNB _wizOdr ul_1">
         <li class="li_1_792 li_1">
          [linkx]
          
          <div class="top_div_792 div_2">
           <ul class="top_k2wiz_GNB_ul_792 _wizOdr ul_2">
            <li class="li_2_800 li_2">
             <a class="top_k2wiz_GNB_800 a_2 k2wiz_GNB_792" href="/ksa_kr/839/subview.do" target="_self">
              표준소개
             </a>
             <div class="top_div_800 div_3">
              <ul class="top_k2wiz_GNB_ul_800 _wizOdr ul_3">
               <li class="li_3_839 li_3">
                [linkx]
                
               </li>
               <li class="li_3_840 li_3">
                [ahref]
                
                <div class="top_div_840 div_4">
                 <ul class="top_k2wiz_GNB_ul_840 _wizOdr ul_4">
                  <li class="li_4_942 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_943 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_944 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_945 li_4">
                   <a class="top_k2wiz_GNB_945 a_4 k2wiz_GNB_840" href="/ksa_kr/945/subview.do" target="_self">
                    국제표준 개발 절차
                   </a>
                  </li>
                  <li class="li_4_946 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_841 li_3">
                [linkx]
                
                <div class="top_div_841 div_4">
                 <ul class="top_k2wiz_GNB_ul_841 _wizOdr ul_4">
                  <li class="li_4_947 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_948 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_842 li_3">
                <a class="top_k2wiz_GNB_842 a_3 k2wiz_GNB_800" href="/ksa_kr/950/subview.do" target="_self">
                 적합성평가
                </a>
                <div class="top_div_842 div_4">
                 <ul class="top_k2wiz_GNB_ul_842 _wizOdr ul_4">
                  <li class="li_4_950 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_951 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_952 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_953 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_954 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_843 li_3">
                [ahref]
                
                <div class="top_div_843 div_4">
                 <ul class="top_k2wiz_GNB_ul_843 _wizOdr ul_4">
                  <li class="li_4_955 li_4">
                   <a class="top_k2wiz_GNB_955 a_4 k2wiz_GNB_843" href="/ksa_kr/955/subview.do" target="_self">
                    표준화와 지식재산권
                   </a>
                  </li>
                  <li class="li_4_956 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_957 li_4">
                   <a class="top_k2wiz_GNB_957 a_4 k2wiz_GNB_843" href="/ksa_kr/957/subview.do" target="_self">
                    표준특허
                   </a>
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_844 li_3">
                [linkx]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_801 li_2">
             <a class="top_k2wiz_GNB_801 a_2 k2wiz_GNB_792" href="/ksa_kr/845/subview.do" target="_self">
              표준연구
             </a>
             <div class="top_div_801 div_3">
              <ul class="top_k2wiz_GNB_ul_801 _wizOdr ul_3">
               <li class="li_3_845 li_3">
                [ahref]
                
               </li>
               <li class="li_3_846 li_3">
                [ahref]
                
               </li>
               <li class="li_3_848 li_3">
                <a class="top_k2wiz_GNB_848 a_3 k2wiz_GNB_801" href="/ksa_kr/848/subview.do" target="_self">
                 Next Standards
                </a>
               </li>
               <li class="li_3_3232 li_3">
                [linkx]
                
               </li>
               <li class="li_3_3233 li_3">
                [ahref]
                
               </li>
               <li class="li_3_3433 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5516 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_802 li_2">
             [ahref]
             
             <div class="top_div_802 div_3">
              <ul class="top_k2wiz_GNB_ul_802 _wizOdr ul_3">
               <li class="li_3_851 li_3">
                <a class="top_k2wiz_GNB_851 a_3 k2wiz_GNB_802" href="/ksa_kr/851/subview.do" target="_self">
                 서비스 표준화
                </a>
               </li>
               <li class="li_3_5247 li_3">
                [ahref]
                
               </li>
               <li class="li_3_853 li_3">
                [linkx]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_803 li_2">
             <a class="top_k2wiz_GNB_803 a_2 k2wiz_GNB_792" href="/ksa_kr/854/subview.do" target="_self">
              표준진흥ㆍ교육
             </a>
             <div class="top_div_803 div_3">
              <ul class="top_k2wiz_GNB_ul_803 _wizOdr ul_3">
               <li class="li_3_854 li_3">
                <a class="top_k2wiz_GNB_854 a_3 k2wiz_GNB_803" href="/ksa_kr/854/subview.do" target="_self">
                 세계표준의 날
                </a>
               </li>
               <li class="li_3_855 li_3">
                [ahref]
                
               </li>
               <li class="li_3_6884 li_3">
                [ahref]
                
               </li>
               <li class="li_3_859 li_3">
                [linkx]
                
               </li>
               <li class="li_3_857 li_3">
                [linkx]
                
               </li>
               <li class="li_3_856 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_804 li_2">
             [linkx]
             
             <div class="top_div_804 div_3">
              <ul class="top_k2wiz_GNB_ul_804 _wizOdr ul_3">
               <li class="li_3_863 li_3">
                <a class="top_k2wiz_GNB_863 a_3 k2wiz_GNB_804" href="/ksa_kr/863/subview.do" target="_self">
                 구입가능표준
                </a>
               </li>
               <li class="li_3_862 li_3">
                [linkx]
                
               </li>
               <li class="li_3_3449 li_3">
                [ahref]
                
               </li>
               <li class="li_3_3448 li_3">
                [linkx][pkeyx][ahref]<li>[pkeyx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li>[area1][mkey1][area1][keywordx]
               </li>
               <li class="li_3_864 li_3">
                <a class="top_k2wiz_GNB_864 a_3 k2wiz_GNB_804" href="/stdBook/KS_book_list.asp" target="_blank" title="새 창">
                 표준품질도서
                </a>
               </li>
               <li class="li_3_5248 li_3">
                <a class="top_k2wiz_GNB_5248 a_3 k2wiz_GNB_804" href="/statusRegister.asp" target="_blank" title="새 창">
                 단체표준
                </a>
               </li>
              </ul>
             </div>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_1_793 li_1">
          [ahref]
          
          <div class="top_div_793 div_2">
           <ul class="top_k2wiz_GNB_ul_793 _wizOdr ul_2">
            <li class="li_2_806 li_2">
             [ahref]
             
             <div class="top_div_806 div_3">
              <ul class="top_k2wiz_GNB_ul_806 _wizOdr ul_3">
               <li class="li_3_866 li_3">
                [linkx]
                
                <div class="top_div_866 div_4">
                 <ul class="top_k2wiz_GNB_ul_866 _wizOdr ul_4">
                  <li class="li_4_958 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_959 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_960 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_5246 li_4">
                   <a class="top_k2wiz_GNB_5246 a_4 k2wiz_GNB_866" href="/ksa_kr/5246/subview.do" target="_self">
                    관련교육
                   </a>
                  </li>
                  <li class="li_4_961 li_4">
                   <a class="top_k2wiz_GNB_961 a_4 k2wiz_GNB_866" href="/ksa_kr/961/subview.do" target="_self">
                    심사 처리절차
                   </a>
                  </li>
                  <li class="li_4_962 li_4">
                   <a class="top_k2wiz_GNB_962 a_4 k2wiz_GNB_866" href="/ksa_kr/962/subview.do" target="_self">
                    정기심사 및 이전심사
			
		[pkeyx][linkx][area1][keywordx][linkx][area1][keywordx][area1][keywordx][pkeyx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                   </a>
                  </li>
                  <li class="li_4_963 li_4">
                   <a class="top_k2wiz_GNB_963 a_4 k2wiz_GNB_866" href="/ksa_kr/963/subview.do" target="_self">
                    1년 주기 공장심사
                   </a>
                  </li>
                  <li class="li_4_964 li_4">
                   [ahref]
                    [linkx]<li>[ahref]</li>[pkeyx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_867 li_3">
                [ahref]
                
                <div class="top_div_867 div_4">
                 <ul class="top_k2wiz_GNB_ul_867 _wizOdr ul_4">
                  <li class="li_4_965 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_966 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_967 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_868 li_3">
                [linkx]
                
                <div class="top_div_868 div_4">
                 <ul class="top_k2wiz_GNB_ul_868 _wizOdr ul_4">
                  <li class="li_4_968 li_4">
                   [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1][area1][mkey1][area1][mkey1][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][area1][keywordx][area1][mkey1]
                  </li>
                  <li class="li_4_969 li_4">
                   [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx]
                  </li>
                  <li class="li_4_970 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_971 li_4">
                   <a class="top_k2wiz_GNB_971 a_4 k2wiz_GNB_868" href="/ksa_kr/971/subview.do" target="_self">
                    부적합개선조치
                   </a>
                  </li>
                  <li class="li_4_972 li_4">
                   <a class="top_k2wiz_GNB_972 a_4 k2wiz_GNB_868" href="/ksa_kr/972/subview.do" target="_self">
                    생산(서비스)중단 및 재게 보고
                   </a>
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_869 li_3">
                <a class="top_k2wiz_GNB_869 a_3 k2wiz_GNB_806" href="/ksa_kr/869/subview.do" target="_self">
                 인증업체 검색
                </a>
               </li>
               <li class="li_3_6637 li_3">
                [linkx]
                
               </li>
               <li class="li_3_870 li_3">
                [linkx]
                
                <div class="top_div_870 div_4">
                 <ul class="top_k2wiz_GNB_ul_870 _wizOdr ul_4">
                  <li class="li_4_973 li_4">
                   <a class="top_k2wiz_GNB_973 a_4 k2wiz_GNB_870" href="/ksa_kr/973/subview.do" target="_self">
                    담당자 정보
                   </a>
                  </li>
                  <li class="li_4_974 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_975 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_976 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_5221 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_5856 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_5222 li_3">
                <a class="top_k2wiz_GNB_5222 a_3 k2wiz_GNB_806" href="/ksa_kr/5223/subview.do" target="_self">
                 KS서비스 인증
                </a>
                <div class="top_div_5222 div_4">
                 <ul class="top_k2wiz_GNB_ul_5222 _wizOdr ul_4">
                  <li class="li_4_5223 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_5224 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_5225 li_4">
                   <a class="top_k2wiz_GNB_5225 a_4 k2wiz_GNB_5222" href="/ksa_kr/5225/subview.do" target="_self">
                    처리절차
                   </a>
                  </li>
                  <li class="li_4_5226 li_4">
                   <a class="top_k2wiz_GNB_5226 a_4 k2wiz_GNB_5222" href="/ksa_kr/5226/subview.do" target="_self">
                    심사신청
                   </a>
                  </li>
                  <li class="li_4_5227 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_5228 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_807 li_2">
             [linkx]
             
             <div class="top_div_807 div_3">
              <ul class="top_k2wiz_GNB_ul_807 _wizOdr ul_3">
               <li class="li_3_872 li_3">
                <a class="top_k2wiz_GNB_872 a_3 k2wiz_GNB_807" href="/ksa_kr/872/subview.do" target="_self">
                 임직원 공평성선언문
                </a>
               </li>
               <li class="li_3_873 li_3">
                <a class="top_k2wiz_GNB_873 a_3 k2wiz_GNB_807" href="/iso.do" target="_self">
                 경영시스템 인증
                </a>
                <div class="top_div_873 div_4">
                 <ul class="top_k2wiz_GNB_ul_873 _wizOdr ul_4">
                  <li class="li_4_977 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_978 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_6624 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_979 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_5528 li_4">
                   <a class="top_k2wiz_GNB_5528 a_4 k2wiz_GNB_873" href="/ksa_kr/5528/subview.do" target="_self">
                    ISO 37001
                   </a>
                  </li>
                  <li class="li_4_986 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_981 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_988 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_987 li_4">
                   <a class="top_k2wiz_GNB_987 a_4 k2wiz_GNB_873" href="/ksa_kr/987/subview.do" target="_self">
                    ISO 55001
                   </a>
                  </li>
                  <li class="li_4_982 li_4">
                   <a class="top_k2wiz_GNB_982 a_4 k2wiz_GNB_873" href="/ksa_kr/982/subview.do" target="_self">
                    ISO 22000
                   </a>
                  </li>
                  <li class="li_4_984 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_985 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_980 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_5397 li_3">
                <a class="top_k2wiz_GNB_5397 a_3 k2wiz_GNB_807" href="/ksa_kr/5398/subview.do" target="_self">
                 인증 취득효과 사례
                </a>
                <div class="top_div_5397 div_4">
                 <ul class="top_k2wiz_GNB_ul_5397 _wizOdr ul_4">
                  <li class="li_4_5398 li_4">
                   <a class="top_k2wiz_GNB_5398 a_4 k2wiz_GNB_5397" href="/ksa_kr/5398/subview.do" target="_self">
                    ISO 9001 인증사례
                   </a>
                  </li>
                  <li class="li_4_5399 li_4">
                   <a class="top_k2wiz_GNB_5399 a_4 k2wiz_GNB_5397" href="/ksa_kr/5399/subview.do" target="_self">
                    ISO 14001 인증사례
                   </a>
                  </li>
                  <li class="li_4_5400 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_874 li_3">
                [ahref]
                
                <div class="top_div_874 div_4">
                 <ul class="top_k2wiz_GNB_ul_874 _wizOdr ul_4">
                  <li class="li_4_989 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_990 li_4">
                   <a class="top_k2wiz_GNB_990 a_4 k2wiz_GNB_874" href="/ksa_kr/990/subview.do" target="_self">
                    인증유지안내
                   </a>
                  </li>
                  <li class="li_4_991 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_992 li_4">
                   <a class="top_k2wiz_GNB_992 a_4 k2wiz_GNB_874" href="/ksa_kr/992/subview.do" target="_self">
                    인증수행범위
                   </a>
                  </li>
                  <li class="li_4_993 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_994 li_4">
                   <a class="top_k2wiz_GNB_994 a_4 k2wiz_GNB_874" href="/ksa_kr/994/subview.do" target="_self">
                    인증명판 신청
                   </a>
                  </li>
                  <li class="li_4_5929 li_4">
                   <a class="top_k2wiz_GNB_5929 a_4 k2wiz_GNB_874" href="/ksa_kr/5929/subview.do" target="_self">
                    심사원 현황
                   </a>
                  </li>
                  <li class="li_4_995 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_875 li_3">
                [ahref]
                
               </li>
               <li class="li_3_876 li_3">
                <a class="top_k2wiz_GNB_876 a_3 k2wiz_GNB_807" href="/ksa_kr/876/subview.do" target="_self">
                 경영시스템 인증조직 검색
                </a>
               </li>
               <li class="li_3_877 li_3">
                [linkx]
                
                <div class="top_div_877 div_4">
                 <ul class="top_k2wiz_GNB_ul_877 _wizOdr ul_4">
                  <li class="li_4_996 li_4">
                   <a class="top_k2wiz_GNB_996 a_4 k2wiz_GNB_877" href="/ksa_kr/996/subview.do" target="_self">
                    국내외 인정기관
                   </a>
                  </li>
                  <li class="li_4_997 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_878 li_3">
                <a class="top_k2wiz_GNB_878 a_3 k2wiz_GNB_807" href="/ksa_kr/878/subview.do" target="_self">
                 자료실
                </a>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_808 li_2">
             <a class="top_k2wiz_GNB_808 a_2 k2wiz_GNB_793" href="/ksa_kr/879/subview.do" target="_self">
              JIS인증
             </a>
             <div class="top_div_808 div_3">
              <ul class="top_k2wiz_GNB_ul_808 _wizOdr ul_3">
               <li class="li_3_879 li_3">
                [linkx]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_5320 li_2">
             [ahref]
             
             <div class="top_div_5320 div_3">
              <ul class="top_k2wiz_GNB_ul_5320 _wizOdr ul_3">
               <li class="li_3_5321 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_809 li_2">
             [ahref]
             
             <div class="top_div_809 div_3">
              <ul class="top_k2wiz_GNB_ul_809 _wizOdr ul_3">
               <li class="li_3_880 li_3">
                [linkx]
                
               </li>
               <li class="li_3_881 li_3">
                <a class="top_k2wiz_GNB_881 a_3 k2wiz_GNB_809" href="/ksa_kr/881/subview.do" target="_self">
                 배출권거래제 검증
                </a>
               </li>
               <li class="li_3_882 li_3">
                [linkx]
                
               </li>
               <li class="li_3_883 li_3">
                [linkx]
                
               </li>
               <li class="li_3_884 li_3">
                <a class="top_k2wiz_GNB_884 a_3 k2wiz_GNB_809" href="/ksa_kr/884/subview.do" target="_self">
                 CDM
                </a>
               </li>
               <li class="li_3_886 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_810 li_2">
             <a class="top_k2wiz_GNB_810 a_2 k2wiz_GNB_793" href="/ksa_kr/887/subview.do" target="_self">
              민간인증
             </a>
             <div class="top_div_810 div_3">
              <ul class="top_k2wiz_GNB_ul_810 _wizOdr ul_3">
               <li class="li_3_887 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_5364 li_2">
             <a class="top_k2wiz_GNB_5364 a_2 k2wiz_GNB_793" href="/ksa_kr/5368/subview.do" target="_self">
              인증심사원
             </a>
             <div class="top_div_5364 div_3">
              <ul class="top_k2wiz_GNB_ul_5364 _wizOdr ul_3">
               <li class="li_3_5366 li_3">
                [linkx]
                
                <div class="top_div_5366 div_4">
                 <ul class="top_k2wiz_GNB_ul_5366 _wizOdr ul_4">
                  <li class="li_4_5372 li_4">
                   <a class="top_k2wiz_GNB_5372 a_4 k2wiz_GNB_5366" href="/ksa_kr/5372/subview.do" target="_self">
                    자격조건
                   </a>
                  </li>
                  <li class="li_4_5373 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_5367 li_3">
                <a class="top_k2wiz_GNB_5367 a_3 k2wiz_GNB_5364" href="/ksa_kr/5375/subview.do" target="_self">
                 에너지온실가스검증심사원
                </a>
                <div class="top_div_5367 div_4">
                 <ul class="top_k2wiz_GNB_ul_5367 _wizOdr ul_4">
                  <li class="li_4_5375 li_4">
                   <a class="top_k2wiz_GNB_5375 a_4 k2wiz_GNB_5367" href="/ksa_kr/5375/subview.do" target="_self">
                    자격조건
                   </a>
                  </li>
                  <li class="li_4_5376 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
              </ul>
             </div>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_1_794 li_1">
          <a class="top_k2wiz_GNB_794 a_1 k2wiz_GNB_342" href="/ksa_kr/2259/subview.do" target="_self">
           교육훈련
          </a>
          <div class="top_div_794 div_2">
           <ul class="top_k2wiz_GNB_ul_794 _wizOdr ul_2">
            <li class="li_2_811 li_2">
             [linkx]
             
             <div class="top_div_811 div_3">
              <ul class="top_k2wiz_GNB_ul_811 _wizOdr ul_3">
               <li class="li_3_2259 li_3">
                [linkx]
                
               </li>
               <li class="li_3_889 li_3">
                <a class="top_k2wiz_GNB_889 a_3 k2wiz_GNB_811" href="/ksa_kr/889/subview.do" target="_self">
                 교육신청/증빙 안내
                </a>
               </li>
               <li class="li_3_890 li_3">
                [ahref]
                
               </li>
               <li class="li_3_891 li_3">
                [linkx]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_812 li_2">
             [linkx]
             
            </li>
            <li class="li_2_813 li_2">
             [ahref]
             
             <div class="top_div_813 div_3">
              <ul class="top_k2wiz_GNB_ul_813 _wizOdr ul_3">
               <li class="li_3_5276 li_3">
                [ahref]
                
               </li>
               <li class="li_3_5277 li_3">
                [ahref]
                
               </li>
               <li class="li_3_895 li_3">
                [ahref]
                
                <div class="top_div_895 div_4">
                 <ul class="top_k2wiz_GNB_ul_895 _wizOdr ul_4">
                  <li class="li_4_1021 li_4">
                   <a class="top_k2wiz_GNB_1021 a_4 k2wiz_GNB_895" href="/ksa_kr/1021/subview.do" target="_self">
                    계층역량ㆍ리더십
                   </a>
                  </li>
                  <li class="li_4_1022 li_4">
                   <a class="top_k2wiz_GNB_1022 a_4 k2wiz_GNB_895" href="/ksa_kr/1022/subview.do" target="_self">
                    조직활성화
                   </a>
                  </li>
                  <li class="li_4_1023 li_4">
                   <a class="top_k2wiz_GNB_1023 a_4 k2wiz_GNB_895" href="/ksa_kr/1023/subview.do" target="_self">
                    직무역량
                   </a>
                  </li>
                  <li class="li_4_1024 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_1025 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1026 li_4">
                   <a class="top_k2wiz_GNB_1026 a_4 k2wiz_GNB_895" href="/ksa_kr/1026/subview.do" target="_self">
                    맞춤형 국내외 연수
                   </a>
                  </li>
                  <li class="li_4_5319 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_897 li_3">
                [ahref]
                
               </li>
               <li class="li_3_898 li_3">
                <a class="top_k2wiz_GNB_898 a_3 k2wiz_GNB_813" href="/" target="_blank" title="새 창">
                 행동혁신
                </a>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_815 li_2">
             [ahref]
             
             <div class="top_div_815 div_3">
              <ul class="top_k2wiz_GNB_ul_815 _wizOdr ul_3">
               <li class="li_3_904 li_3">
                [linkx]
                
                <div class="top_div_904 div_4">
                 <ul class="top_k2wiz_GNB_ul_904 _wizOdr ul_4">
                  <li class="li_4_1034 li_4">
                   <a class="top_k2wiz_GNB_1034 a_4 k2wiz_GNB_904" href="/ksa_kr/1034/subview.do" target="_self">
                    Value Chain에 따른  품질경영활동
                   </a>
                  </li>
                  <li class="li_4_5959 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_5955 li_4">
                   <a class="top_k2wiz_GNB_5955 a_4 k2wiz_GNB_904" href="/ksa_kr/5955/subview.do" target="_self">
                    개발/설계 품질
                   </a>
                  </li>
                  <li class="li_4_5956 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_5957 li_4">
                   <a class="top_k2wiz_GNB_5957 a_4 k2wiz_GNB_904" href="/ksa_kr/5957/subview.do" target="_self">
                    제조/공정 품질
                   </a>
                  </li>
                  <li class="li_4_5958 li_4">
                   <a class="top_k2wiz_GNB_5958 a_4 k2wiz_GNB_904" href="/ksa_kr/5958/subview.do" target="_self">
                    시장 품질
                   </a>
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_907 li_3">
                <a class="top_k2wiz_GNB_907 a_3 k2wiz_GNB_815" href="/ksa_kr/1040/subview.do" target="_self">
                 생산/설비/기술
                </a>
                <div class="top_div_907 div_4">
                 <ul class="top_k2wiz_GNB_ul_907 _wizOdr ul_4">
                  <li class="li_4_1040 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_5250 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1042 li_4">
                   <a class="top_k2wiz_GNB_1042 a_4 k2wiz_GNB_907" href="/ksa_kr/1042/subview.do" target="_self">
                    원가관리
			
		[area1][keywordx][ahref][area1][mkey1][area1][mkey1]
                   </a>
                  </li>
                  <li class="li_4_1043 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_1044 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_905 li_3">
                <a class="top_k2wiz_GNB_905 a_3 k2wiz_GNB_815" href="/ksa_kr/905/subview.do" target="_self">
                 경영ㆍHR
                </a>
               </li>
               <li class="li_3_908 li_3">
                [ahref]
                
                <[keywordx]>
                </[keywordx]>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_820 li_2">
             [ahref]
             
             <div class="top_div_820 div_3">
              <ul class="top_k2wiz_GNB_ul_820 _wizOdr ul_3">
               <li class="li_3_5278 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5100 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5101 li_3">
                [linkx]
                
                <div class="top_div_5101 div_4">
                 <ul class="top_k2wiz_GNB_ul_5101 _wizOdr ul_4">
                  <li class="li_4_5230 li_4">
                   [ahref]
                    [linkx][area1][keywordx][ahref]<li>[area1][mkey1]</li>
                   
                  </li>
                 </ul>
                </div>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_816 li_2">
             <a class="top_k2wiz_GNB_816 a_2 k2wiz_GNB_794" href="/portal/olcourse/main.list.user?paramMap.cmpy_category_seq=23490" target="_blank" title="새 창">
              국내외연수
             </a>
             <div class="top_div_816 div_3">
              <ul class="top_k2wiz_GNB_ul_816 _wizOdr ul_3">
               <li class="li_3_3228 li_3">
                <a class="top_k2wiz_GNB_3228 a_3 k2wiz_GNB_816" href="/portal/olcourse/main.list.user?paramMap.cmpy_category_seq=23490" target="_blank" title="새 창">
                 국내연수
                </a>
               </li>
               <li class="li_3_909 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_817 li_2">
             [linkx]
             
            </li>
            <li class="li_2_818 li_2">
             <li>[area1][mkey1]</li>[linkx]<li>[linkx]</li><li>[ahref]</li>
            </li>
            <li class="li_2_819 li_2">
             [linkx]
             
             <div class="top_div_819 div_3">
              <ul class="top_k2wiz_GNB_ul_819 _wizOdr ul_3">
               <li class="li_3_5097 li_3">
                [ahref]
                
               </li>
               <li class="li_3_5098 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_1_795 li_1">
          <a class="top_k2wiz_GNB_795 a_1 k2wiz_GNB_342" href="/ksa_kr/795/subview.do" target="_self">
           품질ㆍ서비스
          </a>
         </li>
         <li class="li_1_796 li_1">
          <a class="top_k2wiz_GNB_796 a_1 k2wiz_GNB_342" href="/event.do" target="_self">
           주요행사
          </a>
         </li>
         <li class="li_1_797 li_1">
          [linkx]
          
         </li>
         <li class="li_1_798 li_1">
          [linkx]
          
          <div class="top_div_798 div_2">
           <ul class="top_k2wiz_GNB_ul_798 _wizOdr ul_2">
            <li class="li_2_823 li_2">
             [linkx]
             
            </li>
            <li class="li_2_824 li_2">
             [ahref]
             
             <div class="top_div_824 div_3">
              <ul class="top_k2wiz_GNB_ul_824 _wizOdr ul_3">
               <li class="li_3_917 li_3">
                <a class="top_k2wiz_GNB_917 a_3 k2wiz_GNB_824" href="/ksa_kr/917/subview.do" target="_self">
                 설립목적
                </a>
               </li>
               <li class="li_3_918 li_3">
                [linkx]
                
                <div class="top_div_918 div_4">
                 <ul class="top_k2wiz_GNB_ul_918 _wizOdr ul_4">
                  <li class="li_4_1051 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_1052 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1053 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_915 li_3">
                <a class="top_k2wiz_GNB_915 a_3 k2wiz_GNB_824" href="/ksa_kr/915/subview.do" target="_self">
                 미션&amp;비전
                </a>
               </li>
               <li class="li_3_919 li_3">
                [ahref]
                
               </li>
               <li class="li_3_916 li_3">
                <a class="top_k2wiz_GNB_916 a_3 k2wiz_GNB_824" href="/ksa_kr/3234/subview.do" target="_self">
                 기관운영
                </a>
                <div class="top_div_916 div_4">
                 <ul class="top_k2wiz_GNB_ul_916 _wizOdr ul_4">
                  <li class="li_4_3234 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_6334 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_933 li_4">
                   <a class="top_k2wiz_GNB_933 a_4 k2wiz_GNB_916" href="/ksa_kr/933/subview.do" target="_self">
                    담당업무별 연락처
                   </a>
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_925 li_3">
                [linkx]
                
                <div class="top_div_925 div_4">
                 <ul class="top_k2wiz_GNB_ul_925 _wizOdr ul_4">
                  <li class="li_4_3450 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_3451 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_920 li_3">
                <a class="top_k2wiz_GNB_920 a_3 k2wiz_GNB_824" href="/ksa_kr/920/subview.do" target="_self">
                 CI
                </a>
               </li>
               <li class="li_3_5322 li_3">
                [ahref]
                
               </li>
               <li class="li_3_5190 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5946 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_827 li_2">
             [linkx]
             
             <div class="top_div_827 div_3">
              <ul class="top_k2wiz_GNB_ul_827 _wizOdr ul_3">
               <li class="li_3_926 li_3">
                [ahref]
                
               </li>
               <li class="li_3_927 li_3">
                [ahref]
                
               </li>
               <li class="li_3_928 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5531 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5313 li_3">
                <a class="top_k2wiz_GNB_5313 a_3 k2wiz_GNB_827" href="/ksa_kr/5313/subview.do" target="_self">
                 청탁금지법 적용대상기관
                </a>
               </li>
               <li class="li_3_929 li_3">
                <a class="top_k2wiz_GNB_929 a_3 k2wiz_GNB_827" href="/ksa_kr/929/subview.do" target="_self">
                 부패행위자 제재현황 공개
                </a>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_828 li_2">
             [linkx]
             
             <div class="top_div_828 div_3">
              <ul class="top_k2wiz_GNB_ul_828 _wizOdr ul_3">
               <li class="li_3_930 li_3">
                [ahref]
                
               </li>
               <li class="li_3_931 li_3">
                <a class="top_k2wiz_GNB_931 a_3 k2wiz_GNB_828" href="/ksa_kr/1060/subview.do" target="_self">
                 고객서비스이행표준
                </a>
                <div class="top_div_931 div_4">
                 <ul class="top_k2wiz_GNB_ul_931 _wizOdr ul_4">
                  <li class="li_4_1060 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1061 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1062 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1063 li_4">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_5720 li_2">
             [linkx]
             
            </li>
            <li class="li_2_826 li_2">
             [ahref]
             
             <div class="top_div_826 div_3">
              <ul class="top_k2wiz_GNB_ul_826 _wizOdr ul_3">
               <li class="li_3_3235 li_3">
                [linkx]
                
                <div class="top_div_3235 div_4">
                 <ul class="top_k2wiz_GNB_ul_3235 _wizOdr ul_4">
                  <li class="li_4_3238 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_3239 li_4">
                   <a class="top_k2wiz_GNB_3239 a_4 k2wiz_GNB_3235" href="/ksa_kr/3239/subview.do" target="_self">
                    조직도
                   </a>
                  </li>
                  <li class="li_4_3240 li_4">
                   <a class="top_k2wiz_GNB_3240 a_4 k2wiz_GNB_3235" href="/ksa_kr/3240/subview.do" target="_self">
                    연혁
                   </a>
                  </li>
                  <li class="li_4_5019 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_3236 li_3">
                [ahref]
                
                <div class="top_div_3236 div_4">
                 <ul class="top_k2wiz_GNB_ul_3236 _wizOdr ul_4">
                  <li class="li_4_3241 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_3242 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_5229 li_4">
                   <a class="top_k2wiz_GNB_5229 a_4 k2wiz_GNB_3236" href="/ksa_kr/5229/subview.do" target="_self">
                    사회취약계층 생활지원
                   </a>
                  </li>
                  <li class="li_4_3244 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_3243 li_4">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </li>
               <li class="li_3_3237 li_3">
                [linkx]
                
                <div class="top_div_3237 div_4">
                 <ul class="top_k2wiz_GNB_ul_3237 _wizOdr ul_4">
                  <li class="li_4_3245 li_4">
                   <a class="top_k2wiz_GNB_3245 a_4 k2wiz_GNB_3237" href="/ksa_kr/3245/subview.do" target="_self">
                    기부에 참여하신 분들
                   </a>
                  </li>
                  <li class="li_4_3246 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_3247 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_3248 li_4">
                   <a class="top_k2wiz_GNB_3248 a_4 k2wiz_GNB_3237" href="/ksa_kr/3248/subview.do" target="_self">
                    Annual Report
                   </a>
                  </li>
                 </ul>
                </div>
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_830 li_2">
             <a class="top_k2wiz_GNB_830 a_2 k2wiz_GNB_798" href="/ksa_kr/934/subview.do" target="_self">
              찾아오시는길
             </a>
             <div class="top_div_830 div_3">
              <ul class="top_k2wiz_GNB_ul_830 _wizOdr ul_3">
               <li class="li_3_934 li_3">
                [ahref]
                
               </li>
               <li class="li_3_935 li_3">
                [linkx]
                
               </li>
               <li class="li_3_936 li_3">
                [linkx]
                
               </li>
               <li class="li_3_937 li_3">
                <a class="top_k2wiz_GNB_937 a_3 k2wiz_GNB_830" href="/ksa_kr/1067/subview.do" target="_self">
                 지역본부
                </a>
                <div class="top_div_937 div_4">
                 <ul class="top_k2wiz_GNB_ul_937 _wizOdr ul_4">
                  <li class="li_4_1067 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1065 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1068 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1072 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_1071 li_4">
                   <a class="top_k2wiz_GNB_1071 a_4 k2wiz_GNB_937" href="/ksa_kr/1071/subview.do" target="_self">
                    충북지역본부
                   </a>
                  </li>
                  <li class="li_4_1070 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_1073 li_4">
                   [linkx]
                   
                  </li>
                  <li class="li_4_1077 li_4">
                   <a class="top_k2wiz_GNB_1077 a_4 k2wiz_GNB_937" href="/ksa_kr/1077/subview.do" target="_self">
                    부산지역본부
                   </a>
                  </li>
                  <li class="li_4_1078 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_1076 li_4">
                   [ahref]
                   
                  </li>
                  <li class="li_4_1080 li_4">
                   <a class="top_k2wiz_GNB_1080 a_4 k2wiz_GNB_937" href="/ksa_kr/1080/subview.do" target="_self">
                    광주전남제주지역본부
                   </a>
                  </li>
                  <li class="li_4_1079 li_4">
                   <a class="top_k2wiz_GNB_1079 a_4 k2wiz_GNB_937" href="/ksa_kr/1079/subview.do" target="_self">
                    전북지역본부
                   </a>
                  </li>
                 </ul>
                </div>
               </li>
              </ul>
             </div>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_1_799 li_1">
          <a class="top_k2wiz_GNB_799 a_1 k2wiz_GNB_342" href="/ksa_kr/5217/subview.do" target="_self">
           고객센터
          </a>
          <div class="top_div_799 div_2">
           <ul class="top_k2wiz_GNB_ul_799 _wizOdr ul_2">
            <li class="li_2_835 li_2">
             [ahref]
             
             <div class="top_div_835 div_3">
              <ul class="top_k2wiz_GNB_ul_835 _wizOdr ul_3">
               <li class="li_3_5217 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5219 li_3">
                [linkx]
                
               </li>
               <li class="li_3_5220 li_3">
                [linkx]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_833 li_2">
             [ahref]
             
            </li>
            <li class="li_2_834 li_2">
             [ahref]
             
            </li>
            <li class="li_2_831 li_2">
             [ahref]
             
            </li>
            <li class="li_2_5115 li_2">
             [linkx]
             
             <div class="top_div_5115 div_3">
              <ul class="top_k2wiz_GNB_ul_5115 _wizOdr ul_3">
               <li class="li_3_5118 li_3">
                <a class="top_k2wiz_GNB_5118 a_3 k2wiz_GNB_5115" href="/account.do" target="_self">
                 사업자등록증/계좌안내
                </a>
               </li>
               <li class="li_3_5119 li_3">
                <a class="top_k2wiz_GNB_5119 a_3 k2wiz_GNB_5115" href="/bill.do" target="_self">
                 전자계산서 확인
                </a>
               </li>
               <li class="li_3_5120 li_3">
                [ahref]
                
               </li>
              </ul>
             </div>
            </li>
            <li class="li_2_5121 li_2">
             [ahref]
             
             <div class="top_div_5121 div_3">
              <ul class="top_k2wiz_GNB_ul_5121 _wizOdr ul_3">
               <li class="li_3_5254 li_3">
                [linkx]
                
               </li>
              </ul>
             </div>
            </li>
           </ul>
          </div>
         </li>
        </ul>
       </div>
      </nav>
     </div>
    </div>
    <div id="_menuGnbSubWrap">
    </div>
    <div id="masterNavigation">
     <div class="location" id="submenuNavigation">
      <ul class="_wizOdr">
       <li>
        [linkx]
        
       </li>
       <li>
        <div class="navTitle" id="pagetitle1">
        </div>
        <div class="navDiv" id="navUldep01">
        </div>
       </li>
       <li>
        <div class="navTitle" id="pagetitle2">
        </div>
        <div class="navDiv" id="navUldep02">
        </div>
       </li>
       <li>
        <div class="navTitle" id="pagetitle3">
        </div>
        <div class="navDiv" id="navUldep03">
        </div>
       </li>
       <li>
        <div class="navTitle" id="pagetitle4">
        </div>
        <div class="navDiv" id="navUldep04">
         [area1][keywordx]<li>[linkx]</li>[linkx]
        </div>
       </li>
       <li>
        <div class="navTitle" id="pagetitle5">
        </div>
        <div class="navDiv" id="navUldep05">
        </div>
       </li>
      </ul>
     </div>
    </div>
   </div>
   <div id="_wrapArticle">
    <div id="_container">
     <div id="_aside">
      <meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
      <nav class="menuUIsub">
       <div class="menuSubTitleUI menuSubTitleUI793" id="menuSubTitleUI793">
        <h2>
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h2>
       </div>
       <div class="sub_div div_2">
        <ul class="sub_k2wiz_GNB _wizOdr ul_2">
         <li class="li_2_806 li_2">
          [linkx]
          
          <div class="sub_div_806 div_3">
           <ul class="sub_k2wiz_GNB_ul_806 _wizOdr ul_3">
            <li class="li_3_866 li_3">
             <a class="sub_k2wiz_GNB_866 a_3 k2wiz_GNB_806" href="/ksa_kr/958/subview.do" target="_self">
              KS인증소개
             </a>
            </li>
            <li class="li_3_867 li_3">
             [linkx]
             
            </li>
            <li class="li_3_868 li_3">
             <a class="sub_k2wiz_GNB_868 a_3 k2wiz_GNB_806" href="/ksa_kr/968/subview.do" target="_self">
              재발급 및 자료제출
			
		<li>[area1][mkey1]</li>[linkx]<li>[area1][keywordx]</li>
             </a>
            </li>
            <li class="li_3_869 li_3">
             [linkx]
             
            </li>
            <li class="li_3_6637 li_3">
             [linkx]
             
            </li>
            <li class="li_3_870 li_3">
             [ahref]
             
            </li>
            <li class="li_3_5222 li_3">
             <a class="sub_k2wiz_GNB_5222 a_3 k2wiz_GNB_806" href="/ksa_kr/5223/subview.do" target="_self">
              KS서비스 인증
             </a>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_2_807 li_2">
          [ahref]
          
          <div class="sub_div_807 div_3">
           <ul class="sub_k2wiz_GNB_ul_807 _wizOdr ul_3">
            <li class="li_3_872 li_3">
             <a class="sub_k2wiz_GNB_872 a_3 k2wiz_GNB_807" href="/ksa_kr/872/subview.do" target="_self">
              임직원 공평성선언문
             </a>
            </li>
            <li class="li_3_873 li_3">
             <a class="sub_k2wiz_GNB_873 a_3 k2wiz_GNB_807" href="/iso.do" target="_self">
              경영시스템 인증
             </a>
            </li>
            <li class="li_3_5397 li_3">
             [linkx]
             
            </li>
            <li class="li_3_874 li_3">
             [ahref]
             
            </li>
            <li class="li_3_875 li_3">
             [linkx]
             
            </li>
            <li class="li_3_876 li_3">
             [linkx]
             
            </li>
            <li class="li_3_877 li_3">
             <a class="sub_k2wiz_GNB_877 a_3 k2wiz_GNB_807" href="/ksa_kr/996/subview.do" target="_self">
              관련기관
             </a>
            </li>
            <li class="li_3_878 li_3">
             <a class="sub_k2wiz_GNB_878 a_3 k2wiz_GNB_807" href="/ksa_kr/878/subview.do" target="_self">
              자료실
             </a>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_2_808 li_2">
          <a class="sub_k2wiz_GNB_808 a_2 k2wiz_GNB_793" href="/ksa_kr/879/subview.do" target="_self">
           JIS인증
          </a>
          <div class="sub_div_808 div_3">
           <ul class="sub_k2wiz_GNB_ul_808 _wizOdr ul_3">
            <li class="li_3_879 li_3">
             <a class="sub_k2wiz_GNB_879 a_3 k2wiz_GNB_808" href="/ksa_kr/879/subview.do" target="_self">
              JIS MARK 안내
             </a>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_2_5320 li_2">
          [linkx]
          
          <div class="sub_div_5320 div_3">
           <ul class="sub_k2wiz_GNB_ul_5320 _wizOdr ul_3">
            <li class="li_3_5321 li_3">
             [ahref]
             
            </li>
           </ul>
          </div>
         </li>
         <li class="li_2_809 li_2">
          [linkx]
          
          <div class="sub_div_809 div_3">
           <ul class="sub_k2wiz_GNB_ul_809 _wizOdr ul_3">
            <li class="li_3_880 li_3">
             [linkx]
             
            </li>
            <li class="li_3_881 li_3">
             [ahref]
             
            </li>
            <li class="li_3_882 li_3">
             <a class="sub_k2wiz_GNB_882 a_3 k2wiz_GNB_809" href="/ksa_kr/882/subview.do" target="_self">
              목표관리제 검증
             </a>
            </li>
            <li class="li_3_883 li_3">
             [ahref]
             
            </li>
            <li class="li_3_884 li_3">
             [ahref]
             
            </li>
            <li class="li_3_886 li_3">
             [ahref]
             
            </li>
           </ul>
          </div>
         </li>
         <li class="li_2_810 li_2">
          [linkx]
          
          <div class="sub_div_810 div_3">
           <ul class="sub_k2wiz_GNB_ul_810 _wizOdr ul_3">
            <li class="li_3_887 li_3">
             <a class="sub_k2wiz_GNB_887 a_3 k2wiz_GNB_810" href="/ksa_kr/887/subview.do" target="_self">
              민간인증 안내
             </a>
            </li>
           </ul>
          </div>
         </li>
         <li class="li_2_5364 li_2">
          [linkx]
          
          <div class="sub_div_5364 div_3">
           <ul class="sub_k2wiz_GNB_ul_5364 _wizOdr ul_3">
            <li class="li_3_5366 li_3">
             [ahref]
             
            </li>
            <li class="li_3_5367 li_3">
             [ahref]
             
            </li>
           </ul>
          </div>
         </li>
        </ul>
       </div>
      </nav>
     </div>
     <div id="_content">
      <div id="masterTitle">
       <h1>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h1>
      </div>
      <div class="fnc">
       <ul>
        <li class="noneT noneM">
         <a class="print" href="#" onclick="pageprint();">
         </a>
        </li>
        <li>
         <a href="#" onclick="$('.snsgup').show(); return false;" title="창열기">
         </a>
         <div class="snsgup">
          <ul>
           <li>
            [ahref]
            
           </li>
           <li>
            <a class="twi" href="#" title="새창에서 열림">
             Twitter
            </a>
           </li>
           <li>
            <a class="kak" href="#" title="새창에서 열림">
             Kakao story
            </a>
           </li>
           <li>
            <a class="url" href="#">
             URL
            </a>
           </li>
          </ul>
          <div class="snsgupclose">
           <a href="#" onclick="$('.snsgup').hide(); return false;" title="창닫기">
            닫기
           </a>
          </div>
         </div>
        </li>
       </ul>
      </div>
      <div id="contentsWrap" tabindex="0">
       <div id="masterTab">
        <meta content="user-scalabl=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" name="viewport"/>
        <nav class="menuUItab">
         <div class="tab_div div_4">
          <ul class="tab_k2wiz_GNB _wizOdr ul_4">
           <li class="li_4_958 li_4">
            [ahref]
            
           </li>
           <li class="li_4_959 li_4">
            [linkx]
            
           </li>
           <li class="li_4_960 li_4">
            <a class="tab_k2wiz_GNB_960 a_4 k2wiz_GNB_866" href="/ksa_kr/960/subview.do" target="_self">
             심사준비사항
            </a>
           </li>
           <li class="li_4_5246 li_4">
            [ahref]
            
           </li>
           <li class="li_4_961 li_4">
            [ahref]
            
           </li>
           <li class="li_4_962 li_4">
            [ahref]
            
           </li>
           <li class="li_4_963 li_4">
            [linkx]
            
           </li>
           <li class="li_4_964 li_4">
            [ahref]
            
           </li>
          </ul>
         </div>
        </nav>
        <button class="tabToggle" id="mTnbOpen">
         메뉴열기
        </button>
        <button class="tabToggle" id="mTnbClose">
         메뉴닫기
        </button>
       </div>
       <div id="contentsEditHtml">
       </div>
      </div>
     </div>
    </div>
   </div>
   <div id="_wrapFooter">
    <footer id="_footer">
     <div class="menuFnb">
      <ul>
       <li>
        [ahref]<li>[area1][mkey1]</li>[area1][mkey1]<li>[area1][keywordx]</li><li>[area1][mkey1]</li>[area1][keywordx]<li>[area1][keywordx]</li><li>[linkx]</li>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/ksa_kr/3450/subview.do">
         인재채용
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/ksa_kr/5120/subview.do">
         대금지급조회서비스
        </a>
       </li>
      </ul>
     </div>
     <div class="_jumpMenu">
      <span>
       <select id="jumpMenuFooter" name="jumpMenuFooter" title="지역센터 바로가기">
        <option value="#">
         지역본부를 선택하세요.
        </option>
        <option value="http://td.ksa.or.kr,_blank">
         인재개발원
        </option>
        <option value="http://ki.ksa.or.kr,_blank">
         경인권 지역본부
        </option>
        <option value="http://cc.ksa.or.kr,_blank">
         충청권 지역본부
        </option>
        <option value="http://dk.ksa.or.kr,_blank">
         대경권 지역본부
        </option>
        <option value="http://dn.ksa.or.kr,_blank">
         동남권 지역본부
        </option>
        <option value="http://hn.ksa.or.kr,_blank">
         호남권 지역본부
        </option>
       </select>
       <button onclick="javascript:jumpMenu('Footer');" title="새창열림">
        이동
       </button>
      </span>
      <span>
       <select id="jumpMenuFooter1" name="jumpMenuFooter1" title="관련기관 선택">
        <option value="#">
         관련기관을 선택하세요
        </option>
        <option value="http://www.motie.go.kr,_blank">
         산업통상자원부
        </option>
        <option value="http://www.moel.go.kr,_blank">
         고용노동부
        </option>
        <option value="http://www.msip.go.kr,_blank">
         미래창조과학부
        </option>
        <option value="http://www.smba.go.kr,_blank">
         중소기업청
        </option>
        <option value="http://www.kats.go.kr,_blank">
         국가기술표준원
        </option>
        <option value="https://www.kab.or.kr/,_blank">
         한국인정지원센터
        </option>
        <option value="http://www.ksamedia.co.kr/,_blank">
         한국표준협회미디어
        </option>
       </select>
       <button onclick="javascript:jumpMenu('Footer1');" title="새창열림">
        이동
       </button>
      </span>
     </div>
     <address>
      06152 서울특별시 강남구 테헤란로 305    대표전화 : 1670-6009
      <br/>
      Copyright(c) 2016 KOREAN STANDARDS ASSOCIATION.
      <span class="brM">
       ALL RIGHTS RESERVED.
      </span>
     </address>
     <div class="markWA">
      WA품질인증마크
     </div>
     <a href="p" id="gotoTop" title="화면 상단으로 이동">
      TOP
     </a>
    </footer>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0458
  </b>
 </body>
</html>
|<---