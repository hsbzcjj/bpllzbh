--->|<!DOCTYPE html>
<html lang="en-US">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
 </head>
 <body class="home page-template-default page page-id-2595 wp-custom-logo ast-page-builder-template ast-no-sidebar astra-1.2.2 ast-header-custom-item-inside ast-single-post elementor-default elementor-page elementor-page-2595" itemscope="itemscope" itemtype="https://schema.org/WebPage">
  <div class="hfeed site" id="page">
   [ahref]
    [linkx][area1][mkey1][pkeyx][area1][keywordx][area1][keywordx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1][area1][keywordx][area1][mkey1][area1][keywordx][ahref][area1][keywordx][linkx]
   
   <header class="site-header header-main-layout-1 ast-mobile-header-inline" id="masthead" itemscope="itemscope" itemtype="https://schema.org/WPHeader" role="banner">
    <div class="main-header-bar-wrap">
     <div class="main-header-bar">
      <div class="ast-container">
       <div class="ast-flex main-header-container">
        <div class="site-branding">
         <div class="ast-site-identity" itemscope="itemscope" itemtype="https://schema.org/Organization">
          <span class="site-logo-img">
           <a class="custom-logo-link" href="/" rel="home">
           </a>
          </span>
         </div>
        </div>
        <div class="ast-mobile-menu-buttons">
         <div class="ast-button-wrap">
          <button aria-controls="primary-menu" aria-expanded="false" class="menu-toggle main-header-menu-toggle" rel="main-menu" type="button">
           <span class="screen-reader-text">
            Main Menu
           </span>
           <i class="menu-toggle-icon">
           </i>
          </button>
         </div>
        </div>
        <div class="ast-main-header-bar-alignment">
         <div class="main-header-bar-navigation">
          <nav aria-label="Site Navigation" class="ast-flex-grow-1" id="site-navigation" itemscope="itemscope" itemtype="https://schema.org/SiteNavigationElement" role="navigation">
           <div class="main-navigation">
            <ul class="main-header-menu ast-flex ast-justify-content-flex-end submenu-with-border" id="primary-menu">
             [area1][keywordx]<li>[ahref]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
            </ul>
           </div>
          </nav>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </header>
   <div class="site-content" id="content">
    <div class="ast-container">
     <div class="content-area primary" id="primary">
      <main class="site-main" id="main" role="main">
       <article class="post-2595 page type-page status-publish ast-article-single" id="post-2595" itemscope="itemscope" itemtype="https://schema.org/CreativeWork">
        <header class="entry-header ast-header-without-markup">
        </header>
        <div class="entry-content clear" itemprop="text">
         <div class="elementor elementor-2595 elementor-bc-flex-widget" data-elementor-id="2595" data-elementor-settings="[]" data-elementor-type="post">
          <div class="elementor-inner">
           <div class="elementor-section-wrap">
            <section class="elementor-element elementor-element-o94a06i elementor-section-full_width elementor-section-height-full elementor-section-height-default elementor-section-items-middle elementor-section elementor-top-section" data-element_type="section" data-id="o94a06i" data-settings='{"background_background":"video","background_video_link":"https:\/\/s3.amazonaws.com\/gamesalad.videos\/BackgroundVideo2.mp4"}'>
             <div class="elementor-background-video-container elementor-hidden-phone">
              [pkeyx][linkx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[ahref]
             </div>
             <div class="elementor-background-overlay">
              [area1][mkey1]<li>[ahref]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx]
             </div>
             <div class="elementor-container elementor-column-gap-default">
              <div class="elementor-row">
               <div class="elementor-element elementor-element-wyshset elementor-column elementor-col-100 elementor-top-column" data-element_type="column" data-id="wyshset">
                <div class="elementor-column-wrap elementor-element-populated">
                 <div class="elementor-widget-wrap">
                  <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[pkeyx]<li>[pkeyx]</li>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </section>
            <section class="elementor-element elementor-element-889ff4f elementor-section-boxed elementor-section-height-default elementor-section-height-default elementor-section elementor-top-section" data-element_type="section" data-id="889ff4f" data-settings='{"background_background":"classic"}'>
             <div class="elementor-container elementor-column-gap-default">
              <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li><li>[pkeyx]</li><li>[pkeyx]</li><li>[ahref]</li>
             </div>
            </section>
            <section class="elementor-element elementor-element-81edeac elementor-section-boxed elementor-section-height-default elementor-section-height-default elementor-section elementor-top-section" data-element_type="section" data-id="81edeac" data-settings='{"background_background":"classic"}'>
             <div class="elementor-container elementor-column-gap-default">
              <div class="elementor-row">
               <div class="elementor-element elementor-element-fd47554 elementor-column elementor-col-100 elementor-top-column" data-element_type="column" data-id="fd47554">
                <div class="elementor-column-wrap elementor-element-populated">
                 [ahref]
                 
                </div>
               </div>
              </div>
             </div>
            </section>
            <section class="elementor-element elementor-element-1a710f4 elementor-section-boxed elementor-section-height-default elementor-section-height-default elementor-section elementor-top-section" data-element_type="section" data-id="1a710f4" data-settings='{"background_background":"classic"}'>
             <div class="elementor-container elementor-column-gap-default">
              <div class="elementor-row">
               <div class="elementor-element elementor-element-bedcee2 elementor-column elementor-col-33 elementor-top-column" data-element_type="column" data-id="bedcee2">
                <div class="elementor-column-wrap elementor-element-populated">
                 <div class="elementor-widget-wrap">
                  <div class="elementor-element elementor-element-2146c26 elementor-hidden-desktop elementor-hidden-tablet elementor-widget elementor-widget-spacer" data-element_type="widget" data-id="2146c26" data-widget_type="spacer.default">
                   <div class="elementor-widget-container">
                    [linkx][area1][mkey1]<li>[area1][mkey1]</li>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-bd4d362 news-image elementor-widget elementor-widget-image" data-element_type="widget" data-id="bd4d362" data-widget_type="image.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-image">
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-8251c45 elementor-widget elementor-widget-text-editor" data-element_type="widget" data-id="8251c45" data-widget_type="text-editor.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-text-editor elementor-clearfix">
                     <h4>
                      <strong>
                       GameSalad Case Studies
                      </strong>
                     </h4>
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-2827d81 elementor-widget elementor-widget-text-editor" data-element_type="widget" data-id="2827d81" data-widget_type="text-editor.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-text-editor elementor-clearfix">
                     <p style="font-size: 15px; font-style: normal;">
                      [ahref][linkx]<li>[area1][keywordx]</li>[pkeyx][area1][keywordx]
                     </p>
                     <p style="font-size: 15px; font-style: normal; font-weight: 400;">
                      [ahref]
                      
                     </p>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="elementor-element elementor-element-cec93b5 elementor-column elementor-col-33 elementor-top-column" data-element_type="column" data-id="cec93b5">
                <div class="elementor-column-wrap elementor-element-populated">
                 <div class="elementor-widget-wrap">
                  <div class="elementor-element elementor-element-5a1d4bb elementor-hidden-desktop elementor-hidden-tablet elementor-widget elementor-widget-spacer" data-element_type="widget" data-id="5a1d4bb" data-widget_type="spacer.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-spacer">
                     <div class="elementor-spacer-inner">
                      [pkeyx][ahref][area1][mkey1][ahref][pkeyx][linkx][linkx][area1][mkey1][pkeyx][area1][keywordx][area1][mkey1][pkeyx][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx]
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-7d5d7d5 news-image elementor-widget elementor-widget-image" data-element_type="widget" data-id="7d5d7d5" data-widget_type="image.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-image">
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-111dcfd elementor-widget elementor-widget-text-editor" data-element_type="widget" data-id="111dcfd" data-widget_type="text-editor.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-text-editor elementor-clearfix">
                     <h4 style="font-size: 1.33333rem; font-style: normal;">
                      <span style="font-size: 20px; font-weight: bold;">
                       BISD Brings STEM Education to all Middle School Students through GameSalad[pkeyx]<li>[area1][keywordx]</li>[linkx][linkx]
                      </span>
                     </h4>
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-4ff1a08 elementor-widget elementor-widget-text-editor" data-element_type="widget" data-id="4ff1a08" data-widget_type="text-editor.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-text-editor elementor-clearfix">
                     <p>
                      The Brownsville Independent School District is enhancing its Science-Technology-Engineering-Mathematics (STEM) Education through the utilization of GameSalad. It is the first district in the state of Texas to make this computer science software available to all of its Middle School students…
                     </p>
                     <p>
                      [ahref]
                      
                     </p>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="elementor-element elementor-element-8ce658c elementor-column elementor-col-33 elementor-top-column" data-element_type="column" data-id="8ce658c">
                <div class="elementor-column-wrap elementor-element-populated">
                 <div class="elementor-widget-wrap">
                  <div class="elementor-element elementor-element-5e7145b elementor-hidden-desktop elementor-hidden-tablet elementor-widget elementor-widget-spacer" data-element_type="widget" data-id="5e7145b" data-widget_type="spacer.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-spacer">
                     <div class="elementor-spacer-inner">
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-f858005 news-image elementor-widget elementor-widget-image" data-element_type="widget" data-id="f858005" data-widget_type="image.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-image">
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-5e10af4 elementor-widget elementor-widget-text-editor" data-element_type="widget" data-id="5e10af4" data-widget_type="text-editor.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-text-editor elementor-clearfix">
                     <h4 style="font-size: 1.33333rem; font-style: normal;">
                      <span style="font-size: 20px; font-weight: bold;">
                       CREEED partners with Canutillo ISD to bring computer science education to all Middle School students
                      </span>
                     </h4>
                    </div>
                   </div>
                  </div>
                  <div class="elementor-element elementor-element-32a4d5c elementor-widget elementor-widget-text-editor" data-element_type="widget" data-id="32a4d5c" data-widget_type="text-editor.default">
                   <div class="elementor-widget-container">
                    <div class="elementor-text-editor elementor-clearfix">
                     <p>
                      Canutillo will offer middle school students innovative GameSalad curriculum over the next five years with financial support from CREEED Today, Canutillo Independent School District announced a new partnership with GameSalad for Education and the Council on Regional Economic Expansion and Educational Development (CREEED) to expand computer science education to its middle school students over the next …
                     </p>
                     <p class="read-more">
                      <a class="" href="/2018/11/01/creeed-partners-with-canutillo-isd-to-bring-computer-science-education-to-all-canutillo-middle-school-students/">
                       <span class="screen-reader-text">
                        CREEED Partners with Canutillo ISD to Bring Computer Science Education to all Canutillo Middle School Students
                       </span>
                       Read More »
                      </a>
                     </p>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </section>
            <section class="elementor-element elementor-element-d509ad8 elementor-section-boxed elementor-section-height-default elementor-section-height-default elementor-section elementor-top-section" data-element_type="section" data-id="d509ad8" data-settings='{"background_background":"classic"}'>
             <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
            </section>
           </div>
          </div>
         </div>
        </div>
       </article>
      </main>
     </div>
    </div>
   </div>
   <footer class="site-footer" id="colophon" itemscope="itemscope" itemtype="https://schema.org/WPFooter" role="contentinfo">
    [area1][mkey1][pkeyx]<li>[ahref]</li><li>[ahref]</li><li>[linkx]</li>
   </footer>
  </div>
  <div style="display:none">
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0187
  </b>
 </body>
</html>
|<---