--->|<!DOCTYPE html>
<html class="no-js" itemscope="itemscope" itemtype="http://schema.org/WebPage" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="width=1000" name="viewport"/>
  <meta content="삼성서울병원" property="og:site_name">
   <meta content="나비" property="og:title">
    <meta content="나는 어느 날 아침에 본, 나무등걸에 붙어 있던 나비의 번데기를 떠올렸다. 나비는 번데기에다 구멍을 뚫고 나올 준비를 서두르고 있었다. 나는 잠시 기다렸지만 오래 걸릴 것 같아 견" property="og:description">
     <meta content="article" property="og:type">
      <meta content="http://www.samsunghospital.com/home/healthInfo/content/contenView.do?CONT_SRC_ID=33530&amp;amp;CONT_SRC=HOMEPAGE&amp;amp;CONT_ID=5633&amp;amp;CONT_CLS_CD=001023001" property="og:url">
       <meta content="http://www.samsunghospital.com/upload/contents/1438575299426_735321.jpg" property="og:image"/>
      </meta>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body class="">
  <form action="" data-ajax="false" id="shareFrm" method="post">
  </form>
  <div class="wrapper">
   <header class="header" data-offset-top="240" data-spy="affix" role="banner">
    <div class="inner-wrap">
     <li>[area1][keywordx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1]
    </div>
    <div class="inner-wrap" role="navigation">
     <ul class="menubar root-level" id="gnb" role="menubar">
      <li class="menu-parent gnb-A" role="presentation">
       [ahref]
       
       <div aria-expanded="false" aria-hidden="true" aria-labelledby="gnb_menu_A" data-height="480" role="menu">
        <div class="inner-wrap">
         <ul class="menu">
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" data-default="true" href="/home/reservation/doctorDetailInfo.do" id="inner_menu_B1" role="menuitem">
            진료과/의료진
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_B1" class="inner-menu" role="menu">
            <li>
             <a href="/home/reservation/doctorDetailInfo.do" role="menuitem">
              의료진 검색
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/home/reservation/deptSearch3.do?DP_TYPE=N" role="menuitem">
              클리닉 검색
             </a>
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
          <li class="has-submenu">
           [linkx]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_B3" class="inner-menu" id="aaa" role="menu">
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
          <li class="hasnt-submenu">
           [ahref]
           
          </li>
          <li class="hasnt-submenu">
           [ahref]
           
          </li>
          <li class="hasnt-submenu">
           <a aria-haspopup="false" class="inner-anchor" href="/home/reservation/fakeCheck.do" id="inner_menu_B12" role="menuitem">
            위/변조문서조회
           </a>
          </li>
         </ul>
        </div>
        <div class="inner-wrap" role="complementary">
         <h2 class="gnb-service-header">
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h2>
         <div class="gnb-panel gnb-panel-reservation">
          <div class="section-A">
           [ahref][pkeyx][area1][mkey1][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][ahref][linkx][area1][mkey1]
          </div>
          <div class="section-B">
           <div class="links">
            <a class="telephone-call" href="0">
             <i class="ico-gnb ico-gnb-call">
             </i>
             <span class="phone-call">
              02-3410-3000
             </span>
             전화예약
            </a>
            [linkx]
            
            [linkx]
            
           </div>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="menu-parent gnb-B" role="presentation">
       [ahref]
       
       <div aria-expanded="false" aria-hidden="true" aria-labelledby="gnb_menu_B" data-height="440" role="menu">
        <div class="inner-wrap">
         <ul class="menu">
          <li class="has-submenu">
           [ahref]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A1" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001020002" role="menuitem">
              질환과 영양
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           [ahref]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A2" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001021005001" role="menuitem">
              건강한체중
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001021004001" role="menuitem">
              노화와 영양
             </a>
            </li>
            <li>
             <a href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001021006001" role="menuitem">
              푸드&amp;라이프스타일
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001022001" id="inner_menu_A3" role="menuitem">
            운동정보
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A3" class="inner-menu" role="menu">
            <li>
             <a href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001022001" role="menuitem">
              운동기초
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001022004" role="menuitem">
              종목별 운동
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           [ahref]
           
          </li>
          <li class="has-submenu">
           [ahref]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A5" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           <a aria-haspopup="false" class="inner-anchor" href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001027" id="inner_menu_A6" role="menuitem">
            건강이야기
           </a>
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/healthInfo/refer/healthList.do?HEALTH_TYPE=020001&amp;ORDER=RCENT" id="inner_menu_A7" role="menuitem">
            건강자료실
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A6" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/healthInfo/refer/healthList.do?HEALTH_TYPE=020002&amp;ORDER=RCENT" role="menuitem">
              오디오
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           [linkx]
            [area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][linkx][pkeyx][area1][mkey1][pkeyx][area1][keywordx][pkeyx][linkx][area1][keywordx][ahref][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][ahref][linkx][area1][keywordx][area1][keywordx]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A8" class="inner-menu" role="menu">
            <li>
             <a href="/home/healthInfo/content/contentList.do?CONT_CLS_CD=001024001&amp;TAB=DIS_CATE" role="menuitem">
              알아두면 좋은 약정보
             </a>
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           [linkx]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A9" class="inner-menu" role="menu">
            <li>
             <a href="/home/smedia/contentList.do?CODE=013001&amp;ORDER=RCENT" role="menuitem">
              교수온라인강의
             </a>
            </li>
            <li>
             <a href="/home/smedia/contentList.do?CODE=013002&amp;ORDER=RCENT" role="menuitem">
              행복을주는의사
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/smedia/contentList.do?CODE=013004&amp;ORDER=RCENT" role="menuitem">
              병원소개
             </a>
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/healthInfo/healthNote.do" id="inner_menu_A10" role="menuitem">
            건강서비스
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_A10" class="inner-menu" role="menu">
            <li>
             <a href="/home/healthInfo/healthNote.do" role="menuitem">
              건강노트
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
         </ul>
        </div>
        <div class="inner-wrap" role="complementary">
         <h2 class="gnb-service-header">
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h2>
         <div class="gnb-panel gnb-panel-health">
          <div class="section-A">
           <div class="vic-item">
            [linkx]
            
           </div>
           <div class="vic-item">
            [linkx]
            
           </div>
           <div class="links links-block sticked_cont_happynovation">
            [ahref]
            
           </div>
          </div>
          <div class="section-B">
           <div class="links">
            [ahref]
            
            [linkx]
            
            [linkx]
            
           </div>
           <div class="links links-block sticked_cont_happynovation">
            [linkx]
            
           </div>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="menu-parent gnb-C" role="presentation">
       <a aria-haspopup="true" href="/home/healthChart/main.do#" id="gnb_menu_C" role="menuitem">
        <span class="sound-only">
         <em>
          진료차트
         </em>
        </span>
       </a>
       <div aria-expanded="false" aria-hidden="true" aria-labelledby="gnb_menu_C" data-height="352" role="menu">
        <div class="inner-wrap">
         <ul class="menu">
          <li class="hasnt-submenu">
           [ahref]
           
          </li>
          <li class="has-submenu">
           [linkx]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_C2" class="inner-menu" role="menu">
            <li>
             <a href="/home/healthChart/inquireMed/inquireReservation.do" role="menuitem">
              진료예약
             </a>
            </li>
            <li>
             <a href="/home/healthChart/inquireMed/inquireCheckup.do" role="menuitem">
              검사예약
             </a>
            </li>
            <li>
             <a href="/home/healthChart/inquireMed/hospitalizationSchedule.do" role="menuitem">
              입원일정
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/healthChart/inquireMed/treatHistory.do" role="menuitem">
              과거진료내역
             </a>
            </li>
            <li>
             <a href="/home/healthChart/inquireMed/examHistory.do" role="menuitem">
              검사이력 및 결과
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/home/healthChart/proxyinfo.do" role="menuitem">
              14세 미만 대리인증 서비스 안내
             </a>
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/healthChart/medChkup/inqMedChkReserve.do" id="inner_menu_C3" role="menuitem">
            건강검진조회
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_C3" class="inner-menu" role="menu">
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           [linkx]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_C5" class="inner-menu" data-height="502" role="menu">
            <li>
             <a href="/home/healthChart/issueService/InfoIssueCertiList.do" role="menuitem">
              발급 서비스 이용안내
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/home/healthChart/issueService/billList.do" role="menuitem">
              진료비 계산서·영수증
             </a>
            </li>
            <li class="">
             [ahref]
             
            </li>
            <li class="">
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li class="">
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/healthChart/issueService/pedVaccineCertiryList.do" role="menuitem">
              소아예방접종 내역서
             </a>
            </li>
            <li>
             <a href="/home/healthChart/issueService/medicament.do" role="menuitem">
              원외처방전 (고객보관용)
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
         </ul>
        </div>
        <div class="inner-wrap" role="complementary">
         <h2 class="gnb-service-header">
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h2>
         <div class="gnb-panel gnb-panel-healthChart">
          <div class="section-A">
           <div class="vic-item">
            <div class="links">
             [ahref]
             
             [ahref]
             
             <a href="/home/healthChart/issueService/inHospitalList.do">
              <i class="ico-gnb ico-gnb-chartE">
              </i>
              입∙퇴원확인서
             </a>
             <a href="/home/healthChart/issueService/medicament.do">
              <i class="ico-gnb ico-gnb-chartF">
              </i>
              원외처방전
              <br/>
              (고객보관용)
             </a>
            </div>
           </div>
          </div>
          <div class="section-B">
           <div class="links">
            [ahref]
             [area1][keywordx][area1][mkey1][pkeyx][area1][mkey1][linkx][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][mkey1]
            
            [linkx]
            
            [linkx]
            
           </div>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="menu-parent gnb-D" role="presentation">
       <a aria-haspopup="true" href="/home/share/main.do" id="gnb_menu_D" role="menuitem">
        <span class="sound-only">
         <em>
          나눔소통
         </em>
        </span>
       </a>
       <div aria-expanded="false" aria-hidden="true" aria-labelledby="gnb_menu_D" data-height="370" role="menu">
        <div class="inner-wrap">
         <ul class="menu">
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" data-default="true" href="/home/share/story.do" id="inner_menu_D2" role="menuitem">
            나눔활동
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_D2" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/share/donation/donationIndex.do" id="inner_menu_D3" role="menuitem">
            나눔참여
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_D3" class="inner-menu" role="menu">
            <li>
             <a href="/home/share/donation/donation.do" role="menuitem">
              기부
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           <a aria-haspopup="false" class="inner-anchor" href="/home/share/happy.do" id="inner_menu_D4" role="menuitem">
            행복스토리
           </a>
          </li>
          <li class="hasnt-submenu">
           [ahref]
           
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/share/compliment.do" id="inner_menu_D7" role="menuitem">
            고객의 소리
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_D7" class="inner-menu" role="menu">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/share/faq.do" id="inner_menu_D8" role="menuitem">
            건강상담
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_D8" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
         </ul>
        </div>
        <div class="inner-wrap" role="complementary">
         <h2 class="gnb-service-header">
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h2>
         <div class="gnb-panel gnb-panel-community">
          <div class="section-A">
           <div class="vic-item">
            <div class="links" style="border:none">
             <h3>
              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
             </h3>
             [linkx]
             
             [ahref]
             
            </div>
           </div>
          </div>
          <div class="section-B">
           <div class="gnb-carousel">
            <div class="swiper-container">
             <ul class="swiper-wrapper">
              <li class="swiper-slide">
               [ahref]
               
              </li>
              <li class="swiper-slide">
               [linkx]
               
              </li>
             </ul>
            </div>
            <div class="swiper-pagination">
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="menu-parent gnb-E" role="presentation">
       [linkx]
       
       <div aria-expanded="false" aria-hidden="true" aria-labelledby="gnb_menu_E" data-height="460" role="menu">
        <div class="inner-wrap">
         <ul class="menu">
          <li class="has-submenu">
           [linkx]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_E54" class="inner-menu" role="menu">
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/home/info/medicalDeliveryInfo.do" role="menuitem">
              의료전달체계안내
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           [ahref]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_E9" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li class="GNBLongTxt">
             <a href="/home/info/hospitalizationInfoParti.do" role="menuitem">
              빠른 쾌유를 돕는 환자참여
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/info/hospitalizationInfoQuit.do" role="menuitem">
              퇴원준비
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           [ahref]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_E11" class="inner-menu" role="menu">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/info/ICUdiary.do" role="menuitem">
              ICU 다이어리[area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][mkey1][ahref][area1][keywordx][area1][keywordx][ahref][area1][mkey1][area1][keywordx][pkeyx][area1][keywordx]
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           [ahref]
           
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/info/notice.do" id="inner_menu_E6" role="menuitem">
            병원소식
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_E6" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/info/news.do" role="menuitem">
              뉴스
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a href="/home/info/letter.do" role="menuitem">
              소식지
             </a>
            </li>
           </ul>
          </li>
          <li class="has-submenu">
           <a aria-haspopup="true" class="inner-anchor" href="/home/info/map.do" id="inner_menu_E4" role="menuitem">
            편의가이드
           </a>
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_E4" class="inner-menu" role="menu">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a href="/home/info/contentsView.do?VIEW_CODE=MAJOR-NUMBER" role="menuitem">
              주요전화번호
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
          <li class="has-submenu">
           [ahref]
           
           <ul aria-expanded="false" aria-hidden="true" aria-labelledby="inner_menu_E7" class="inner-menu" role="menu">
            <li>
             <a href="/home/info/helloSmc.do" role="menuitem">
              서비스안내
             </a>
            </li>
            <li>
             <a href="/home/info/helloSmcForm.do" role="menuitem">
              구독신청
             </a>
            </li>
            <li>
             <a href="/home/info/hellosmcAddressChange.do" role="menuitem">
              주소변경
             </a>
            </li>
            <li>
             <a href="/home/info/helloSmcCalcel.do" role="menuitem">
              구독해지
             </a>
            </li>
           </ul>
          </li>
          <li class="hasnt-submenu">
           [linkx]
           
          </li>
         </ul>
        </div>
        <div class="inner-wrap" role="complementary">
         [area1][mkey1][area1][mkey1]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
        </div>
       </div>
      </li>
     </ul>
     <div class="join-newsletter">
      <li>[area1][keywordx]</li>[linkx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li>
     </div>
     <div class="inner-wrap relatives">
      <div class="header-utility-area">
       <div class="header-outlink">
        <div class="header-hospital-intro">
         [ahref]
         
         <div class="header-hospital-intro-menu">
          <div class="header-hospital-intro-menu-title">
           <a href="/home/info/introduceMain.do">
            병원소개
           </a>
          </div>
          <div class="header-hospital-intro-menu-list">
           <div class="menu-title menu-title-A">
            병원소개
           </div>
           <div class="menu-list">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/home/info/introduce.do?sub=vision">
               비전/미션
              </a>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/home/info/introduce.do?sub=condition">
               병원 현황
              </a>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
           <div class="menu-title menu-title-B">
            환자행복
           </div>
           <div class="menu-list">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              <a href="/home/info/introduce.do?sub=happy_expert&amp;code=022002001">
               행복한 전문가
              </a>
             </li>
            </ul>
           </div>
           <div class="menu-title menu-title-C">
            의료혁신
           </div>
           <div class="menu-list">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
        <ul class="global_page_links">
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
       <form action="/home/search/search.do" class="header-search" method="post" name="totSearch" target="_blank">
        <div class="header-expanded-search">
        </div>
        <div class="search-layer auto-wording">
         <div class="word-list">
          <ul class="tab-panel" id="first-word-view">
           <li>
            <a href="#">
             <span class="word">
              <strong class="important-blue">
               체
              </strong>
              외검사
             </span>
             <span class="search-num">
              123회
             </span>
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="#">
             <span class="word">
              당뇨
             </span>
             <button class="button btn-word-del" role="button" type="button">
              <i aria-hidden="true" class="iconset icon-close04">
              </i>
              <span class="button-text visually-hidden">
               search
              </span>
             </button>
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="#">
             <span class="word">
              <strong class="important-blue">
               체
              </strong>
              온증
             </span>
             <span class="search-num">
              123회
             </span>
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="#">
             <span class="word">
              <strong class="important-blue">
               체
              </strong>
              온증
             </span>
             <span class="search-num">
              123회
             </span>
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
          </ul>
         </div>
         <div class="search-layer-setting">
          <li>[area1][mkey1]</li><li>[linkx]</li>[area1][keywordx]
         </div>
        </div>
        <button class="button button-header-search" role="button" type="button">
         <i aria-hidden="true" class="iconset icon-search">
         </i>
         <span class="visually-hidden">
          검색
         </span>
        </button>
       </form>
       <ul class="wrapper_member_login">
        <li>
         <a href="#" onclick="logIn(encodeURIComponent('http://www.samsunghospital.com/home/healthInfo/content/contenView.do?CONT_SRC_ID=33530&amp;amp;CONT_SRC=HOMEPAGE&amp;amp;CONT_ID=5633&amp;amp;CONT_CLS_CD=001023001'));">
          로그인
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
      </div>
      <section aria-expanded="false" aria-hidden="true" aria-labelledby="user-personalization" class="personalization-area iclearfix" role="complementary">
      </section>
     </div>
     <div class="gnb-background">
      <div class="inner-wrap">
       <div class="horizontal">
       </div>
      </div>
     </div>
    </div>
    <div class="inner-wrap bg-transparent">
     <div class="gnb-location">
      <ul class="breadcrumbs">
       <li>
        <a class="location-home" href="/">
         <i class="ico-location">
         </i>
         <span class="sound-only">
          홈
         </span>
        </a>
       </li>
       <li id="location1">
        <a class="location-label" href="#">
         <span class="location-text">
          나눔소통
         </span>
         <i class="ico-location-expand">
         </i>
        </a>
        <ul class="location-child">
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/home/healthInfo/main.do">
           건강정보
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
      </ul>
      <div class="gnb-location-util">
       <button class="button button-icon button-print" role="button" type="button">
        <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-print">
        </i>
        <span class="button-text visually-hidden">
         Print
        </span>
       </button>
       [ahref]
       
      </div>
      <div class="gnb-location-share">
       <button class="button button-icon" onclick="_share(1);" role="button" type="button">
        <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-facebook">
        </i>
        <span class="button-text visually-hidden">
         facebook
        </span>
       </button>
       <button class="button button-icon" onclick="_share(2);" role="button" type="button">
        <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-twitter">
        </i>
        <span class="button-text visually-hidden">
         twitter
        </span>
       </button>
       <button class="button button-icon" onclick="_share(3);" role="button" type="button">
        <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-gplus">
        </i>
        <span class="button-text visually-hidden">
         google plus
        </span>
       </button>
      </div>
      <div class="header-outlink">
       [ahref]
       
       [ahref]
       
      </div>
     </div>
    </div>
   </header>
   <div class="quick-navigation">
    <div class="inner-wrap">
     <div class="quick-menu">
      <div class="quick-menu-title">
       <button class="button quick-menu-toggle" role="button" type="button">
        <span class="button-text">
         QUICK MENU
        </span>
        <i aria-hidden="true" class="iconset-quick icon-quick-toggle">
        </i>
       </button>
      </div>
      <div class="quick-menu-list">
       <ul>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a class="button" href="/home/cancer/main/index.do" target="_blank" title="새창열림">
          <i aria-hidden="true" class="iconset-quick icon-quick-menu02">
          </i>
          <span class="button-text">
           암병원
          </span>
         </a>
        </li>
        <li>
         <a class="button" href="/home/proton/main/index.do" target="_blank" title="새창열림">
          <i aria-hidden="true" class="iconset-quick icon-quick-menu07">
          </i>
          <span class="button-text">
           양성자치료센터
          </span>
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a class="button" href="/home/main/otWebzineAppli.do">
          <i aria-hidden="true" class="iconset-quick icon-quick-menu05">
          </i>
          <span class="button-text">
           소식지신청
          </span>
         </a>
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
   <div class="header-fixed" data-offset-top="105" data-spy="affix">
    <div class="inner-wrap">
     <button class="header-menu-burger">
      <i class="ico-menu-burger">
      </i>
      <span class="sound-only">
       메뉴 펼치기
      </span>
     </button>
     <em>
      행복한 자녀양육
     </em>
     <div class="gnb-location-util">
      <button class="button button-icon button-print" role="button" type="button">
       <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-print">
       </i>
       <span class="button-text visually-hidden">
        Print
       </span>
      </button>
      [linkx]
      
     </div>
     <div class="gnb-location-share">
      <button class="button button-icon" onclick="_share(1);" role="button" type="button">
       <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-facebook">
       </i>
       <span class="button-text visually-hidden">
        facebook
       </span>
      </button>
      <button class="button button-icon" onclick="_share(2);" role="button" type="button">
       <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-twitter">
       </i>
       <span class="button-text visually-hidden">
        twitter
       </span>
      </button>
      <button class="button button-icon" onclick="_share(3);" role="button" type="button">
       <i aria-hidden="true" class="ico-gnb-sns ico-gnb-sns-gplus">
       </i>
       <span class="button-text visually-hidden">
        google plus
       </span>
      </button>
     </div>
    </div>
   </div>
   <div class="container" role="main">
    <form action="" id="prevFrm">
    </form>
    <section id="contents">
     <section class="post-detail-wrapper">
      <div class="post-type-choose">
       <button class="btn-post-type btn-post-type-1" data-type="column1">
        <span class="sound-only">
         1단 컬럼
        </span>
       </button>
       <button class="btn-post-type btn-post-type-2" data-type="column2">
        <span class="sound-only">
         2단 컬럼
        </span>
       </button>
      </div>
      <div class="inner-section">
       <article class="post-detail post-detail-type02 no-column" style="max-width:auto">
        <header class="post-detail-head">
         <h1 class="post-title">
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h1>
         <div class="post-credit">
         </div>
        </header>
        <section class="post-detail-body">
         <div class="post-credit">
          삼성의료원 사회정신건강연구소
         </div>
         <div class="txtC">
         </div>
         <p>
         </p>
         <div>
          나는 어느 날 아침에 본, 나무등걸에 붙어 있던 나비의 번데기를 떠올렸다.  나비는 번데기에다 구멍을 뚫고 나올 준비를 서두르고 있었다.  나는 잠시 기다렸지만 오래 걸릴 것 같아 견딜 수 없었다. 나는 허리를 구부리고 입김으로 데워주었다.  열심히 데워 준 덕분에 기적은 생명보다 빠른 속도로 내 눈앞에서 일어나기 시작했다.  집이 열리면서 나비가 천천히 기어나오기 시작했다.  날개를 뒤로 접으며 구겨지는 나비를 본 순간의 공포는 영원히 잊을 수 없을 것이다.  가엾은 나비는 그 날개를 펴려고 파르르 몸을 떨었다. 나는 내 입김으로 나비를 도우려고 했으나 허사였다.  번데기에서 나와 날개를 펴는 것은 태양 아래서 천천히 진행되어야 했다.  그러나 때늦은 다음이었다.  내 입김은 때가 되기도 전에 나비를 날개가 쭈그러진 채 집을 나서게 한 것이었다.  나비는 필사적으로 몸을 떨었으나 몇 초 뒤 내 손바닥 위에서 죽어 갔다.  나는 나비의 가녀린 시체만큼 내 양심을 무겁게 짓누른 것은 없었다고 생각한다.  오늘날에야 나는 자연의 법칙을 거스르는 행위가 얼마나 무서운 죄악인가를 깨닫는다.  서둘지 말고, 안달을 부리지도 말고, 이 영원한 리듬에 충실하게 따라야 한다는 것을 안다.
         </div>
         <div>
         </div>
         <div class="txtR">
          <span style="color: rgb(16, 85, 182);">
           -니코스 카잔차키스<이윤기 옮김>, 그리스인 조르바, 열린책들 2000-
          </span>
         </div>
         <div style="padding-top: 40px; margin-top: 40px; border-top-color: rgb(224, 224, 224); border-top-width: 1px; border-top-style: solid;">
          <div>
           잘 생기고 예쁜 아이돌에게 푹 빠지기도 하고, 친한 친구와의 갈등으로 힘들어하는 등 자녀들은 성장하면서 수많은 경험을 합니다.
          </div>
          <div>
          </div>
          <div>
           부모들 또한 자녀와 비슷한 경험을 가지고 있습니다. 하지만 부모들은 자신이 성장하면서 범했던 수많은 오류와 그로 인한 고난들은 사랑하는 자녀들이 경험하지 않기를 바랍니다.
          </div>
          <div>
           <따뜻한 입김>을 통해서 자녀들이 조금 더 빨리 성장하면 세상에는 더 중요하고 재미있는 것들이 많다고 말해주고 싶습니다.
          </div>
          <div>
          </div>
          <div>
           하지만 부모들도 다양한 경험과 시행착오를 통해 성장한 것처럼 자녀들도 수많은 시행착오를 거쳐야 한 사람의 성인으로 성장할 수 있습니다.
          </div>
          <div>
           때로는 그 시간이 오래 걸릴 수 있고, 더디게 느껴질 수 있지만, 나비가 따사로운 햇빛을 받으며, 천천히 날개를 말려야 되는 것처럼, 따뜻한 햇살과 같은 관심으로 자녀의 성장을 기다리면 자녀들은 자신만의 멋진 날개를 활짝 펼 수 있을 겁니다.
          </div>
         </div>
         <p>
         </p>
        </section>
       </article>
       <button class="btn-post-detail post-detail-prev" id="prev_column">
        <span class="sound-only">
         Prev
        </span>
       </button>
       <button class="btn-post-detail post-detail-next" id="next_column">
        <span class="sound-only">
         Next
        </span>
        <span class="column-info">
         <em>
         </em>
         /
         <span class="column-info-total">
         </span>
        </span>
       </button>
      </div>
     </section>
     <div class="modal-window" id="layerReadability" role="dialog">
      <div class="modal-container">
       <button class="button button-icon button-modal-close modal-close" role="button" type="button">
        <i aria-hidden="true" class="iconset icon-close02">
        </i>
        <span class="button-text visually-hidden">
         닫기
        </span>
       </button>
       <button class="btn-readability-handler btn-fontsize-smaller btn-font-disabled" type="button">
        <span class="sound-only">
         폰트 작게
        </span>
       </button>
       <button class="btn-readability-handler btn-fontsize-bigger" type="button">
        <span class="sound-only">
         폰트 크게
        </span>
       </button>
       <button class="btn-readability-handler btn-print" type="button">
        <span class="sound-only">
         프린트
        </span>
       </button>
       <div class="modal-content post-detail">
        <div class="modal-content-head">
        </div>
        <div class="modal-content-body">
        </div>
       </div>
      </div>
     </div>
     <section class="post-option">
      <div class="inner-section">
       <div class="post-option-item post-option-tag">
        <dl>
         <dt>
          태그
         </dt>
         <dd>
         </dd>
        </dl>
       </div>
       <div class="post-option-item post-option-like">
        <button class="btn-option" onclick="goodCnt('&amp;CONT_ID=5633&amp;CONT_SRC=HOMEPAGE&amp;CONT_SRC_ID=33530&amp;CONT_CLS_CD=001023001')" role="button" type="button">
         <i aria-hidden="true" class="iconset icon-like">
         </i>
         <span class="button-text">
          좋아요
         </span>
        </button>
       </div>
       <div class="post-option-item post-option-scrap">
        <button class="btn-option" onclick="scrap('5633', '&amp;CONT_ID=5633&amp;CONT_SRC=HOMEPAGE&amp;CONT_SRC_ID=33530&amp;CONT_CLS_CD=001023001'); return false;" role="button" type="button">
         <i aria-hidden="true" class="iconset icon-scrap">
         </i>
         <span class="button-text">
          스크랩
         </span>
        </button>
       </div>
       <span class="post-option-item post-option-count">
        <i aria-hidden="true" class="iconset icon-count">
        </i>
        3684
       </span>
       <time class="post-option-item post-option-date">
        <i aria-hidden="true" class="iconset icon-date">
        </i>
        2015.08.03
       </time>
       <div class="post-option-item post-option-menu">
        <button class="button button-large button-dark modal-button" data-modal-anchor="layerReadability" id="btnReadability" role="button" type="button">
         <i aria-hidden="true" class="iconset icon-zoom">
         </i>
         <span class="button-text">
          크게보기
         </span>
        </button>
        <button class="button button-large button-blue" onclick="javascript:goList('001023001');" role="button" type="button">
         <i aria-hidden="true" class="iconset icon-list">
         </i>
         <span class="button-text">
          목록보기
         </span>
        </button>
       </div>
      </div>
     </section>
     <section class="post-footer post-footer-type02">
      <div class="inner-section">
       <div class="post-footer-content">
        <div class="post-footer-section post-footer-section-main">
         <div class="media-recommend-major">
          <ul class="media-major-list">
          </ul>
         </div>
         <div id="inputSns">
         </div>
        </div>
        <div class="post-footer-section post-footer-section-aside">
         <div class="media-recommend-minor">
          <ul class="media-minor-list">
          </ul>
          <button class="button button-more button-icon media-minor-list-more" id="moreBtn" role="button" type="button">
           <i aria-hidden="true" class="iconset icon-more02">
           </i>
           <span class="button-text visually-hidden">
            더보기
           </span>
          </button>
         </div>
        </div>
       </div>
      </div>
     </section>
    </section>
    <div class="modal-window popup-category-select" id="popup-category-select" role="dialog">
     <div class="modal-container">
      <button class="button button-icon button-modal-close modal-close" role="button" type="button">
       <i aria-hidden="true" class="iconset icon-close02">
       </i>
       <span class="button-text visually-hidden">
        닫기
       </span>
      </button>
      <div class="modal-content">
       <div class="modal-content-head">
        <h1 class="modal-title">
         <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
        </h1>
       </div>
       <div class="modal-content-body">
        <[keywordx]>
        </[keywordx]>
        <div class="board-util board-util-bottom">
         <div class="board-util-right">
          <button class="button button-large button-blue" onclick="addScrapCategory('5633'); return false;" role="button" type="button">
           <span class="button-text">
            확인
           </span>
          </button>
          <button class="button button-large button-gray" onclick="modelWindowClose('#popup-category-select'); return false;" role="button" type="button">
           <span class="button-text">
            취소
           </span>
          </button>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="modal-window modal-itemContMovie" id="modal-itemContMovie" role="dialog">
     <div class="modal-container">
      <button class="button button-icon button-modal-close modal-close" role="button" type="button">
       <i aria-hidden="true" class="iconset icon-close02">
       </i>
       <span class="button-text visually-hidden">
        닫기
       </span>
      </button>
      <div class="modal-content">
       <div class="modal-content-head modal-content-head-type02">
        <h1 class="modal-title">
         <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
        </h1>
       </div>
       <div class="modal-content-body">
        <div class="itemContMovie-box">
         <div id="divMovie">
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="modal-window popup-category-config" id="popup-category-config" role="dialog">
     <div class="modal-container">
      <button class="button button-icon button-modal-close modal-close" role="button" type="button">
       <i aria-hidden="true" class="iconset icon-close02">
       </i>
       <span class="button-text visually-hidden">
        닫기
       </span>
      </button>
      <div class="modal-content">
       <div class="modal-content-head">
        [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
       </div>
       <div class="modal-content-body">
        <li>[area1][keywordx]</li>[pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][mkey1]<li>[linkx]</li>
       </div>
      </div>
     </div>
    </div>
   </div>
   <footer id="footer" role="contentinfo">
    <div class="canexpanded">
     <div class="inner-wrap">
      <div class="foot-link">
       <a href="/home/main/index.do" target="_blank">
        삼성서울병원
       </a>
       [ahref]
       
       [ahref]
       
       <a href="/home/cancer/main/index.do" target="_blank">
        암병원
       </a>
       [ahref]
       
       <a href="/home/recruit/main.do" target="_blank">
        인재채용
       </a>
       [linkx]
       
       <div class="expand-link-new">
        <button class="btn-expand-outer btn-expand-dept">
         센터홈페이지
        </button>
        <button class="btn-expand-outer btn-expand-fm">
         패밀리사이트
        </button>
       </div>
      </div>
      <div class="outer-link-new">
       <div class="dept-link dept-link-new">
        <h3>
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h3>
        [linkx]
        
        <div class="wrap_center_column wrap_center_column01">
         <h4>
          [ahref]
          
         </h4>
         <ul class="first-one">
          <li>
           <a href="/home/cancer/carecenter/liver.do" target="_blank" title="새창 열림">
            간암센터
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/home/cancer/carecenter/colorectal.do" target="_blank" title="새창열림">
            대장암센터
           </a>
          </li>
          <li>
           [linkx]
            <li>[area1][mkey1]</li><li>[ahref]</li><li>[ahref]</li>[area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/home/cancer/carecenter/urological.do" target="_blank" title="새창 열림">
            비뇨암센터
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/home/cancer/carecenter/special.do" target="_blank" title="새창 열림">
            희귀암센터
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/home/proton/main/index.do" target="_blank" title="새창 열림">
            양성자치료센터
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/home/cancer/carecenter/outpatientTreatment.do" target="_blank" title="새창 열림">
            통원치료센터
           </a>
          </li>
         </ul>
        </div>
        <div class="wrap_center_column wrap_center_column02">
         <div class="inner_center_columnpart">
          <h4>
           <a href="/home/hbv/main.do" target="_blank">
            심장뇌혈관병원
           </a>
          </h4>
          <ul>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/dept/main/index.do?DP_CODE=ARRC" target="_blank" title="새창열림">
             부정맥센터
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/home/hbv/center/rehabilitation/intro/html.do" target="_blank" title="새창열림">
             예방재활센터
            </a>
           </li>
           <li>
            <a href="/home/hbv/center/imaging/intro/html.do" target="_blank" title="새창열림">
             이미징센터
            </a>
           </li>
          </ul>
         </div>
         <div class="inner_center_columnpart">
          <h4>
           [linkx]
           
          </h4>
          <ul>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref][linkx][area1][keywordx][ahref][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][linkx][area1][mkey1][area1][mkey1]
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/dept/main/index.do?DP_CODE=OTC" target="_blank" title="새창열림">
             장기이식센터
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="wrap_center_column wrap_center_column03">
         <div class="inner_center_columnpart">
          <h4>
           <a href="/home/reservation/deptSearch2.do?DP_TYPE=C" target="_blank">
            기능센터
           </a>
          </h4>
          <ul>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/dept/main/index.do?DP_CODE=ATP" target="_blank" title="새창열림">
             아토피환경보건센터
            </a>
           </li>
           <li>
            <a href="/dept/main/index.do?DP_CODE=DEP" target="_blank" title="새창열림">
             우울증센터
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
         <div class="inner_center_columnpart">
          <h4>
           <a href="/home/reservation/deptSearch.do?DP_TYPE=O" target="_blank" title="새창열림">
            진료과 / 클리닉
           </a>
          </h4>
          <ul>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="wrap_center_column wrap_center_column04">
         <div class="inner_center_columnpart">
          <h4>
           진료지원
          </h4>
          <ul>
           <li>
            <a href="/dept/main/index.do?DP_CODE=NSD" target="_blank" title="새창 열림">
             간호본부
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="/dept/main/index.do?DP_CODE=SWK" target="_blank" title="새창열림">
             사회복지팀
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
          </ul>
         </div>
         <div class="inner_center_columnpart">
          <h4>
           교육센터
          </h4>
          <ul>
           <li>
            <a href="/dept/main/index.do?DP_CODE=ED" target="_blank" title="새창열림">
             교육인재개발실(Anymed)
            </a>
           </li>
           <li>
            <a href="/dept/main/index.do?DP_CODE=DM" target="_blank" title="새창 열림">
             당뇨교육실
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="wrap_center_column wrap_center_column05">
         <h4>
          연구센터
         </h4>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/dept/main/index.do?DP_CODE=CTG" target="_blank" title="새창열림">
            임상시험 글로벌선도센터
           </a>
          </li>
          <li>
           [linkx]
            <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li><li>[linkx]</li>
           
          </li>
          <li>
           <a href="/dept/main/index.do?DP_CODE=CEC" target="_blank" title="새창열림">
            임상의학연구소
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </div>
       </div>
       <div class="family-link family-link-new">
        <h3>
         <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
        </h3>
        [linkx]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="r" target="_blank" title="새창 열림">
           강북삼성병원
          </a>
         </li>
         <li>
          <a href="u" target="_blank" title="새창 열림">
           삼성창원병원
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="r" target="_blank" title="새창 열림">
           성균관대학교 의과대학
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
    <div class="inner-wrap">
     <div class="foot-link sub-foot">
      [linkx]
      
      [linkx]
      
      [linkx]
      
      <a href="/home/popup/pop_security.do" onclick="window.open(this.href,'onechk','width=850, height=550, scrollbars=yes');return false;" target="_blank">
       보안신고
      </a>
      [ahref]
      
      <a href="/home/ethicsMain.do" target="_blank">
       제보하기
      </a>
      [ahref]
      
      [linkx]
      
      <a href="/home/info/faq.do" target="_blank">
       홈페이지 가이드
      </a>
      [ahref]
      
     </div>
     <div class="our-sns">
      <a class="footer-sns-twitter" href="/mySMC" target="_blank">
       트위터
      </a>
      [ahref]
      
      <a class="footer-sns-blog" href="m" target="_blank">
       블로그
      </a>
      <a class="footer-sns-youtube" href="/SamsungMedicalCenter" target="_blank">
       유투브
      </a>
      [linkx]
      
     </div>
     <address>
      서울특별시 강남구 일원로 81 (06351) 삼성서울병원  /  대표전화 : 1599-3114  /  사업자등록번호 : 213-82-05096 권오정
     </address>
     <p class="copy copy_with_authmark">
      copyright©1996-2015 by Samsung Medical Center. All rights reserved.
     </p>
     <div class="outer_secure_authmark">
      <a class="isms_pop" href="/home/popup/isms.do" onclick="window.open(this.href,'onechk01','width=500, height=800, top=0, left=100, scrollbars=no');return false;" title="새창열림">
       <span class="visuallyhidden">
        정보보호관리체계인증
        <strong>
         [인증범위]
        </strong>
        의료정보시스템(EMR, OCS) 및 홈페이지 서비스 운영
        <strong>
         [유효기간]
        </strong>
        2016.11.11 ~ 2019.11.10
       </span>
      </a>
      <span class="small_width_show">
      </span>
      <span class="iso_pop">
       <span class="visuallyhidden">
        국제정보보호인증 ISO27001
       </span>
      </span>
     </div>
    </div>
   </footer>
   <a class="back-to-top" data-offset-bottom="250" data-offset-top="105" data-spy="affix" href="p">
    맨 위로
   </a>
   <noscript>
   </noscript>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0396
  </b>
 </body>
</html>
|<---