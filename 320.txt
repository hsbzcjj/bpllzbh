--->|<!DOCTYPE html>
<html lang="ko-kr">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no" name="viewport"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description">
   <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords">
    <meta content="telephone=no" name="format-detection"/>
    <meta content="나비 브러쉬 蝶 Butterfly Brush - CLIP STUDIO ASSETS" property="og:title">
     <meta content="article" property="og:type">
      <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
      <meta content="https://celclipmaterialprod.s3-ap-northeast-1.amazonaws.com/38/62/1716238/thumbnail?1529685874" property="og:image"/>
      <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
      <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
      <meta content="photo" name="twitter:card"/>
      <meta content="@clip_celsys" name="twitter:site"/>
      <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:url"/>
      <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:title"/>
      <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:description"/>
      <meta content="https://celclipmaterialprod.s3-ap-northeast-1.amazonaws.com/38/62/1716238/thumbnail?1529685874" name="twitter:image"/>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body id="body">
  <header id="header">
   <div class="header__serviceMenu">
    [ahref]
    
    <ul class="dropdown-menu" role="menu">
     <li>
      <a href="/ko-kr/">
       <i aria-hidden="true" class="fa fa-home">
       </i>
       <span>
        홈
       </span>
      </a>
     </li>
     <li class="divider">
     </li>
     <li>
      [ahref]
      
     </li>
     <li class="divider">
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      <a href="/ko-kr/search?tag=%E5%AE%9A%E7%95%AA%E3%83%9E%E3%83%B3%E3%82%AC%E7%94%A8%E7%B4%A0%E6%9D%90">
       <p>
        대표 만화용 소재
       </p>
      </a>
     </li>
     <li class="divider">
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [linkx]
      
     </li>
    </ul>
   </div>
   <div class="header__panel">
    [ahref]
    
    <div class="dropdown header__selectSite">
     <a aria-expanded="false" class="dropdown-toggle" data-toggle="dropdown">
      <i aria-hidden="true" class="fa fa-caret-square-o-down">
      </i>
     </a>
     <ul class="dropdown-menu dropdown-menu-right header__sites" role="menu">
      <li>
       [ahref]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [ahref]
       
      </li>
     </ul>
    </div>
   </div>
   <div class="header__accountMenu header__accountMenu--logout hidden-xs">
    [linkx]
    
    [linkx]
    
    [ahref]
    
   </div>
   <div class="header__accountMenu header__accountMenu--logout visible-xs">
    [linkx]
    
    <ul class="dropdown-menu" role="menu">
     <li>
      [linkx]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li class="divider">
     </li>
     <li>
      [linkx]
      
     </li>
    </ul>
   </div>
  </header>
  <article class="headerFixed" id="article">
   <div id="detail">
    <div class="layout__fixedHead headerFixed" data-material-header="">
     <section class="layout__materialHeader">
      <div class="layout__materialHeaderThumbnail">
       <span class="materialHeaderThumbnail--pc">
       </span>
       <span class="materialHeaderThumbnail--sm">
       </span>
      </div>
      <div class="layout__materialHeaderContent">
       <h1 class="materialHeaderTitle" data-translation-target="">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h1>
       <div class="clearfix favoriteInfo">
        <ul class="favoriteCount">
         <li>
          <div class="downloadCount">
           <i aria-hidden="true" class="fa fa-download">
           </i>
           <span class="downloadCount__count">
            8,106
           </span>
          </div>
         </li>
        </ul>
        <ul class="favoriteButtons">
         <li>
          <button class="btn btn-default operationButton favoriteButton inactive" data-favorite-button="" data-favorite-count="240" data-message-cannot-like='이 소재는 "좋아요!"를 할 수 없습니다' data-message-failed-register='"좋아요!"에 실패했습니다' data-message-failed-unregister='"좋아요!"해제에 실패했습니다' data-message-not-login="로그인해주세요" data-message-own-post="자신의 게시물에는 '좋아요!'를 할 수 없습니다." type="button">
           <i aria-hidden="true" class="favoriteButton__icon fa fa-heart">
           </i>
           <span class="favoriteButton__text">
            좋아요!
           </span>
           <span class="favoriteButton__count" data-favorite-count-view="">
            240
           </span>
          </button>
         </li>
         <li>
          <button class="btn btn-default operationButton starButton inactive" data-can-not-add-star="이 소재는 마이 리스트에 추가할 수 없습니다" data-failed-add-star="마이리스트에 추가를 실패했습니다" data-failed-remove-star="마이리스트에서의 제외를 실패했습니다" data-please-login="로그인해주세요" data-star-button="" type="button">
           <i aria-hidden="true" class="fa fa-star">
           </i>
          </button>
         </li>
         <li>
          <button class="btn btn-default operationButton favoriteButton" data-translate-button="" data-translation-failed="번역에 실패했습니다" disabled="disabled" type="button">
           <i aria-hidden="true" class="favoriteButton__icon fa fa-globe" data-translate-button-icon="">
           </i>
           <span class="translateButtonText">
            번역하기
           </span>
          </button>
         </li>
         <li>
          <div class="dropdown text-right">
           <button aria-expanded="true" aria-haspopup="true" class="btn btn-default dropdown-toggle operationButton menuButton" data-toggle="dropdown" id="dropdownMenu1" type="button">
            <i aria-hidden="true" class="fa fa-ellipsis-h">
            </i>
           </button>
           <ul aria-labelledby="dropdownMenu1" class="dropdown-menu dropdown-menu-right">
            <li>
             <[keywordx]>
             </[keywordx]>
            </li>
           </ul>
          </div>
         </li>
        </ul>
       </div>
      </div>
      <div class="layout__materialHeaderPurchase">
       <ul class="price">
        <li class="price__free">
         무료
        </li>
       </ul>
       <div class="purchaseButton">
        <div class="purchaseButton__free" data-purchase-free="">
         <button class="btn btn-danger btn-block" data-can-not-download="이 소재는 다운로드할 수 없습니다" data-material-download-free="" data-placement="bottom" data-please-login="로그인해주세요" type="button">
          다운로드
         </button>
        </div>
        <div class="purchaseButton__purchased" data-purchase-process-complete="" style="display:none;">
         <button class="btn btn-block btn-danger" data-can-not-download="이 소재는 다운로드할 수 없습니다" data-material-download-purchased="" data-placement="bottom" data-please-login="로그인해주세요" type="button">
          재다운로드
         </button>
        </div>
        <form action="/ko-kr/detail/download-material" data-communication-error="통신 에러가 발생했습니다" data-material-download-form="" method="post" style="display:none;">
        </form>
       </div>
       <ul class="downloadNote">
        <li>
         [area1][mkey1]<li>[area1][keywordx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
      </div>
     </section>
    </div>
    <div class="hidden-xs layout_fixedMargin" data-material-header-margin="">
    </div>
    <section class="layout__headTags">
     <ul class="headTags">
      <li class="headTags__item headTags__item--type">
       [ahref]
       
      </li>
      <li class="headTags__item headTags__item--software">
       [ahref]
       
      </li>
      <li class="headTags__item headTags__item--software">
       [linkx]
        [area1][mkey1][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][linkx][area1][keywordx][linkx][ahref][area1][keywordx]
       
      </li>
     </ul>
    </section>
    <div class="container-fluid">
     <section class="layout__authorTop">
      <div class="authorTop text-center">
       by
       <a href="r">
        <span class="authorTop__profileImage">
        </span>
        <span class="authorTop__name">
         noah1773
        </span>
       </a>
      </div>
     </section>
     <div class="layout__container">
      <div class="layout__materialContent">
       <section>
        <div class="microsoft_logo" data-microsoft-logo="" style="display: none;">
         <a href="/MicrosoftTranslatorAttribution" target="_blank">
          Translated by
         </a>
        </div>
        <div class="materialLead">
         <p data-translation-target="">
          10개의 흑백 나비 그림을 소재로 한 브러쉬
         </p>
        </div>
        <div class="materialDescription">
         <div class="text-center" data-material-description-loading="">
          <i class="fa fa-spinner fa-spin materialDescriptionLoading">
          </i>
         </div>
         <iframe class="auto-height" data-material-description="" frameborder="0" src="/ko-kr/description/1716238/" style="width:100%;">
         </iframe>
        </div>
       </section>
       <section>
        <ul class="tags">
         <li class="tags__item">
          [linkx]
          
         </li>
         <li class="tags__item">
          <a href="/ko-kr/search?tag=butterfly">
           #butterfly
          </a>
         </li>
         <li class="tags__item">
          [linkx]
          
         </li>
         <li class="tags__item">
          [linkx]
           [linkx][area1][keywordx][pkeyx][linkx][pkeyx][linkx][ahref][area1][mkey1][linkx][ahref][area1][keywordx][area1][keywordx][area1][keywordx][area1][mkey1][area1][keywordx]
          
         </li>
         <li class="tags__item">
          <a href="/ko-kr/search?tag=brush">
           #brush
          </a>
         </li>
        </ul>
        <div class="materialStatus">
         <p>
          콘텐츠 ID：1716238
         </p>
         <p>
          개봉일 :
          <span class="dateDiff">
           <span class="dateDiff__period">
            1
           </span>
           <span class="dateDiff__unit">
            year ago
           </span>
          </span>
         </p>
         <p>
          갱신일 :
          <span class="dateDiff">
           <span class="dateDiff__period">
            1
           </span>
           <span class="dateDiff__unit">
            year ago
           </span>
          </span>
         </p>
        </div>
       </section>
      </div>
      <div class="layout__shareButton">
       <div class="shareButton__short">
        <span class="shareButton__text">
         공유하기
        </span>
        <ul class="shareButton__icons" data-gift-icons="">
         <li class="shareButton__icon">
          [ahref]
          
         </li>
         <li class="shareButton__icon">
          [linkx]
          
         </li>
         <li class="shareButton__icon">
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="author">
       [ahref]
       
       <div class="author__title">
        <span class="author__profileImage">
        </span>
        noah1773 님의 프로필
        <span class="author__moreDetail">
         [linkx]
         
        </span>
       </div>
       <div class="author_profileContent">
        <p class="author__comment" data-translation-target="">
        </p>
        <div class="author__buttons">
         <button class="btn btn-default operationButton author__sendMessageButton" data-target="[data-modal-direct-message]" data-toggle="modal" type="button">
          <i aria-hidden="true" class="fa fa-envelope-o">
          </i>
          다이렉트 메시지
         </button>
         [ahref]
         
        </div>
       </div>
      </div>
      <div class="favoriteList">
       <button class="btn btn-default operationButton favoriteButton inactive" data-favorite-button="" data-favorite-count="240" data-message-cannot-like='이 소재는 "좋아요!"를 할 수 없습니다' data-message-failed-register='"좋아요!"에 실패했습니다' data-message-failed-unregister='"좋아요!"해제에 실패했습니다' data-message-not-login="로그인해주세요" data-message-own-post="자신의 게시물에는 '좋아요!'를 할 수 없습니다." type="button">
        <i aria-hidden="true" class="favoriteButton__icon fa fa-heart">
        </i>
        <span class="favoriteButton__text">
         좋아요!
        </span>
        <span class="favoriteButton__count" data-favorite-count-view="">
         240
        </span>
       </button>
       <div class="favoriteList__users">
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         <li>[area1][mkey1]</li>[linkx]<li>[ahref]</li>
        </span>
        <span class="favoriteList__user">
         [ahref]
         
        </span>
        <span class="favoriteList__user">
         <a href="/ko-kr/profile/f5hieka-gk" target="_blank">
         </a>
        </span>
        <span class="favoriteList__user">
         <a href="/ko-kr/profile/59osmjy-88" target="_blank">
         </a>
        </span>
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         [pkeyx]<li>[linkx]</li>[pkeyx][area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
        </span>
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         [ahref]
         
        </span>
        <span class="favoriteList__user">
         [linkx]
         
        </span>
        <span class="favoriteList__user">
         [ahref]
         
        </span>
       </div>
       <a class="pull-right favoriteList__viewMore" data-material-id="1716238" data-target="[data-favorite-modal]" data-toggle="modal" href="#">
        <span class="favoriteList__viewMore--long">
         ...더 보기
        </span>
        <span class="favoriteList__viewMore--short">
         <i aria-hidden="true" class="fa fa-chevron-right">
          [area1][mkey1][area1][keywordx][ahref][ahref][linkx][pkeyx][ahref][linkx][pkeyx][ahref][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][mkey1][area1][keywordx][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][ahref]
         </i>
        </span>
       </a>
       <div class="clearfix">
        <li>[area1][mkey1]</li>[area1][keywordx][linkx]
       </div>
      </div>
     </div>
    </div>
    <div class="container-fluid">
     <div class="layout__recommend">
      <h4 class="text-center">
       "브러시"의 인기 소재
      </h4>
      <ul class="layput__cardPanel layout__cardPanel--horizontalMax5 layout__cardPanel--horizontalOneLine">
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [linkx]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           [linkx]
           
          </div>
          [linkx]
          
          <div class="materialCard__cardAuthor materialCard__cardAuthor--hasUserAttribute">
           [linkx]
           
           <a class="userAttributeIcon userAttributeIcon--celsys_official" data-attribute-icon-description-show="" href=";">
            ◆
           </a>
          </div>
          <div class="materialCard__cardFooterInfo">
           [linkx][area1][mkey1][area1][keywordx]
          </div>
          <div class="materialCard__cardFooterButton">
           [linkx]
           
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [ahref]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           [linkx]
           
          </div>
          [linkx]
          
          <div class="materialCard__cardAuthor">
           <a href="/ko-kr/search?user=Hmm...">
            <div>
            </div>
            <p>
             Hmm...
            </p>
           </a>
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            51,263
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           <a data-material-card-star="" data-placement="bottom" data-trigger="focus" href=")">
            <span class="materialCard__starRegistered" data-material-card-star-unregister="1695958" style="display:none;">
             <i aria-hidden="true" class="fa fa-star">
             </i>
            </span>
            <span class="" data-material-card-star-register="1695958">
             <i aria-hidden="true" class="fa fa-star-o">
             </i>
            </span>
           </a>
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [linkx]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           [linkx]
           
          </div>
          <a class="materialCard__cardContentBlock" data-material-card-title="" href="/ko-kr/detail?id=1722050">
           <h6 title="MaaBlur Brush">
            MaaBlur Brush
           </h6>
          </a>
          <div class="materialCard__cardAuthor">
           [linkx]
           
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            36,838
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           <a data-material-card-star="" data-placement="bottom" data-trigger="focus" href=")">
            <span class="materialCard__starRegistered" data-material-card-star-unregister="1722050" style="display:none;">
             <i aria-hidden="true" class="fa fa-star">
             </i>
            </span>
            <span class="" data-material-card-star-register="1722050">
             <i aria-hidden="true" class="fa fa-star-o">
             </i>
            </span>
           </a>
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [linkx]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           [ahref]
           
          </div>
          <a class="materialCard__cardContentBlock" data-material-card-title="" href="/ko-kr/detail?id=1486470">
           <h6 title="リアル鉛筆">
            リアル鉛筆
           </h6>
          </a>
          <div class="materialCard__cardAuthor">
           <a href="/ko-kr/search?user=%E3%81%AF%E3%82%89%E3%81%B8%E3%82%8A%E3%82%8A">
            <div>
            </div>
            <p>
             はらへりり
            </p>
           </a>
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            78,213
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           [ahref]
           
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [ahref]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           <a href="/ko-kr/search?type=brush">
            브러시
           </a>
          </div>
          [ahref]
          
          <div class="materialCard__cardAuthor">
           <a href="/ko-kr/search?user=%E3%82%B9%E3%83%9F%E3%82%AB%E3%83%AF">
            <div>
            </div>
            <p>
             スミカワ
            </p>
           </a>
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            137,726
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           [ahref]
           
          </div>
         </div>
        </div>
       </li>
      </ul>
      <div class="clearfix">
      </div>
      <div class="materialFooter materialFooter--max5 text-right">
       <small>
        <a href="/ko-kr/search?type=brush&amp;order=dl">
         더 보기
         <i aria-hidden="true" class="fa fa-chevron-right">
         </i>
        </a>
       </small>
      </div>
      <h4 class="text-center">
       신규 소재
      </h4>
      <ul class="layput__cardPanel layout__cardPanel--horizontalMax5 layout__cardPanel--horizontalOneLine">
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [ahref]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           <a href="/ko-kr/search?type=image">
            화상 소재
           </a>
          </div>
          [ahref]
          
          <div class="materialCard__cardAuthor">
           [linkx]
           
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            1
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           [ahref]
           
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [ahref]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           [linkx]
           
          </div>
          <a class="materialCard__cardContentBlock" data-material-card-title="" href="/ko-kr/detail?id=1750032">
           <h6 title="グルグル01">
            グルグル01
           </h6>
          </a>
          <div class="materialCard__cardAuthor">
           <a href="/ko-kr/search?user=%E3%83%9E%E3%83%8A%E3%83%9E%E3%83%8A%E3%83%96">
            <div>
            </div>
            <p>
             マナマナブ
            </p>
           </a>
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            0
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           [linkx]
           
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          [linkx]
           <li>[ahref]</li><li>[area1][keywordx]</li>[area1][mkey1][area1][mkey1]
          
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           <a href="/ko-kr/search?type=brush">
            브러시
           </a>
          </div>
          [linkx]
          
          <div class="materialCard__cardAuthor">
           <a href="/ko-kr/search?user=bloraven">
            <div>
            </div>
            <p>
             bloraven
            </p>
           </a>
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            17
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           [pkeyx]<li>[linkx]</li><li>[area1][keywordx]</li><li>[pkeyx]</li>
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          <a class="materialCard__cardContentBlock" data-material-card-title="" href="/ko-kr/detail?id=1750029">
          </a>
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           [ahref]
           
          </div>
          <a class="materialCard__cardContentBlock" data-material-card-title="" href="/ko-kr/detail?id=1750029">
           <h6 title="갓- 흑립">
            갓- 흑립
           </h6>
          </a>
          <div class="materialCard__cardAuthor">
           [linkx]
           
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            21
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceFree">
             무료
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           <li>[linkx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li>[pkeyx]
          </div>
         </div>
        </div>
       </li>
       <li class="materialCard" data-material-card="">
        <div class="materialCard__card">
         <div class="materialCard__thumbmailBlock" data-material-card-thumbnail="">
          <a class="materialCard__cardContentBlock" data-material-card-title="" href="/ko-kr/detail?id=1750026">
           [pkeyx]<li>[area1][keywordx]</li>[ahref]
          </a>
          <span class="materialCard__catalogItem">
          </span>
         </div>
         <div class="materialCard__cardContent">
          <div class="materialCard__materialType">
           [linkx]
           
          </div>
          <a class="materialCard__cardContentBlock" data-material-card-title="" href="/ko-kr/detail?id=1750026">
           <h6 title="南国ヤシ波セット">
            南国ヤシ波セット
           </h6>
          </a>
          <div class="materialCard__cardAuthor">
           <a href="/ko-kr/search?user=%E3%81%BF%E3%81%9A%E3%81%8D%E3%81%AE%E3%82%8A%E3%82%93%E3%81%94">
            <div>
            </div>
            <p>
             みずきのりんご
            </p>
           </a>
          </div>
          <div class="materialCard__cardFooterInfo">
           <div class="materialCard__favoriteCount">
            <i aria-hidden="true" class="fa fa-download">
            </i>
            2
           </div>
           <ul class="materialCard__price">
            <li class="materialCard__priceGold">
             <span class="materialCard__priceNum">
              200
             </span>
             <span class="materialCard__priceUnit">
              G
             </span>
            </li>
           </ul>
          </div>
          <div class="materialCard__cardFooterButton">
           [area1][mkey1][area1][mkey1][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][ahref][pkeyx][ahref][pkeyx][area1][mkey1][ahref][linkx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx]
          </div>
         </div>
        </div>
       </li>
      </ul>
      <div class="clearfix">
      </div>
      <div class="materialFooter materialFooter--max5 text-right">
       <small>
        <a href="/ko-kr/search?order=new">
         더 보기
         <i aria-hidden="true" class="fa fa-chevron-right">
         </i>
        </a>
       </small>
      </div>
     </div>
    </div>
    <div class="modal fade text-left reportModal" data-modal-report="" role="dialog" tabindex="-1">
     <div class="modal-dialog" role="document">
      <div class="modal-content">
       <div class="modal-header">
        <button aria-label="Close" class="close" data-dismiss="modal" type="button">
         <span aria-hidden="true">
          ×
         </span>
        </button>
        <h4 class="modal-title">
         문제가 있는 소재입니다
        </h4>
       </div>
       <form class="reportModal__form" data-report-modal-form="">
        <div class="modal-body reportModal__body">
         문제의 보고에는 로그인이 필요합니다.
         <br/>
         로그인한 다음 다시 화면을 표시하고 이용해주세요.
        </div>
        <div class="modal-footer">
        </div>
       </form>
      </div>
     </div>
    </div>
    <div class="modal fade text-left directMessageModal" data-modal-direct-message="" role="dialog" tabindex="-1">
     <div class="modal-dialog" role="document">
      <div class="modal-content">
       <div class="modal-header">
        <button aria-label="Close" class="close" data-dismiss="modal" type="button">
         <span aria-hidden="true">
          ×
         </span>
        </button>
        <h4 class="modal-title">
         다이렉트 메시지
        </h4>
       </div>
       <form class="directMessageModal__form" data-direct-message-modal-form="">
        <div class="modal-body directMessageModal__body">
         다이렉트 메시지를 송신하려면 로그인이 필요합니다.
         <br/>
         로그인한 뒤 다시 화면을 표시하고 이용해주세요.
        </div>
        <div class="modal-footer">
        </div>
       </form>
      </div>
     </div>
    </div>
    <div class="modal fade text-left" data-modal-purchase-free-complete="" role="dialog" tabindex="-1">
     <div class="modal-dialog" role="document">
      <div class="modal-content">
       <div class="modal-header">
        <button aria-label="Close" class="close" data-dismiss="modal" type="button">
         <span aria-hidden="true">
          ×
         </span>
        </button>
        <h4 class="modal-title">
         구입/취득하기
        </h4>
       </div>
       <div class="modal-body">
        <div class="purchaseModal__complete">
         <div class="purchaseModal__completeTitle">
          취득이 완료되었습니다.
         </div>
         <div class="purchaseModal__completeDescription">
          * CLIP STUDIO가 설치된 환경에서는 자동으로 다운로드를 시작합니다.
          <br/>
          * 취득한 소재는 "
          [linkx]
          
          "에서 언제든지 재다운로드 가능합니다.
         </div>
         <div class="howToUse">
          <div class="howToUse__title">
           <span class="howToUse__title--icon">
            <i aria-hidden="true" class="fa fa-info-circle">
            </i>
           </span>
           <span class="howToUse__title--text">
            다운로드한 소재의 사용법은 여기를 참조하십시오.
           </span>
          </div>
          <ul class="howToUse__list">
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/ko-kr/articles/1094" target="_blank">
             소재 가져오기 방법
            </a>
           </li>
           <li>
            <a href="/ko-kr/articles/1090" target="_blank">
             소재를 사용할 수 있는 소프트웨어
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
          <div class="howToUse__foot">
           ASSETS의 자세한 사용법은
           <a href="/ko-kr/help">
            도움말
           </a>
           (을)를 참조하십시오.
          </div>
         </div>
        </div>
        <div class="modal-footer">
         [ahref]
         
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="modal fade" data-animation-thumbnail-modal="" role="dialog" tabindex="-1">
     <div class="modal-dialog" role="document">
      <div class="modal-content">
       <div class="modal-header">
        <button class="close" data-dismiss="modal" type="button">
         <span>
          ×
         </span>
        </button>
       </div>
       <div class="modal-body">
       </div>
      </div>
     </div>
    </div>
    <div class="modal fade" data-faces-modal="" role="dialog" tabindex="-1">
     <div class="modal-dialog" role="document">
      <div class="modal-content">
       <div class="modal-header">
        <button class="close" data-dismiss="modal" type="button">
         <span>
          ×
         </span>
        </button>
       </div>
       <div class="modal-body">
       </div>
      </div>
     </div>
    </div>
    <div class="layout__fixedBanner">
     <div class="fixedBanner" data-fixedbanner="">
      <div class="fixedBanner__closedView" data-fixedbanner-open="" data-fixedbanner-view-closed="" style="display:none;">
       <div class="fixedBanner__head">
        <div class="fixedBanner__title">
         <span class="fixedBanner__title--mark">
         </span>
         CLIP STUDIO PAINT가 무료
        </div>
       </div>
      </div>
      <div class="fixedbanner__openedView" data-fixedbanner-view-opened="" style="display:none;">
       <div class="fixedBanner__head">
        <div class="fixedBanner__title pull-left">
         CLIP STUDIO PAINT가 무료
        </div>
        <div class="fixedBanner__close pull-right" data-fixedbanner-close="">
         <i aria-hidden="true" class="fa fa-times">
         </i>
        </div>
        <div class="clearfix">
        </div>
       </div>
       <div class="fixedBanner__content">
        [linkx]
        
       </div>
      </div>
     </div>
    </div>
    <div class="modal fade favoriteModal" data-favorite-modal="">
     <div class="modal-dialog" role="document">
      <div class="modal-content">
       <div class="modal-header">
        최신 100
        <i class="fa fa-heart">
        </i>
        좋아요!
        <button class="close" data-dismiss="modal" type="button">
         <span>
          ×
         </span>
        </button>
       </div>
       <div class="modal-body">
        <div class="favoriteList">
         <i class="fa fa-spinner fa-spin" data-favorite-load-icon="">
         </i>
         <table class="favoriteTable" data-favorite-table="">
         </table>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="modal fade attributeDescriptionModal" data-attribute-icon-description-modal="" role="dialog" tabindex="-1">
    <div class="modal-dialog" role="document">
     <div class="modal-content">
      <div class="modal-header">
       배지
       <button aria-label="Close" class="close" data-dismiss="modal" type="button">
        <span aria-hidden="true">
         ×
        </span>
       </button>
      </div>
      <div class="modal-body">
       [area1][keywordx][area1][mkey1][area1][keywordx][ahref][pkeyx][linkx][area1][keywordx][pkeyx][pkeyx][pkeyx][ahref][linkx][linkx][area1][mkey1][area1][mkey1][ahref][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][keywordx][ahref][linkx][area1][keywordx][linkx]
      </div>
     </div>
    </div>
   </div>
  </article>
  <footer class="share">
   <div class="container">
    <div class="row">
     <div class="shareButton">
      <span class="shareButton__text">
       공유하기
      </span>
      <ul class="shareButton__icons" data-gift-icons="">
       <li class="shareButton__icon">
        [linkx]
        
       </li>
       <li class="shareButton__icon">
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
   </div>
  </footer>
  <footer id="footer">
   <div class="container">
    <div class="row">
     <div class="col-sm-8">
      <div class="center-block footer-col-left">
       <h4>
        관련 서비스
       </h4>
       <ul class="footer__linkList">
        <li class="footer__linkItem">
         [ahref]
         
        </li>
        <li class="footer__linkItem">
         <a href="/ko-kr" target="_blank">
          CLIP STUDIO ASSETS
         </a>
        </li>
        <li class="footer__linkItem">
         <a href="/ko-kr" target="_blank">
          CLIP STUDIO ASK
         </a>
        </li>
        <li class="footer__linkItem">
         <a href="/ko-kr" target="_blank">
          CLIP STUDIO TIPS
         </a>
        </li>
        <li class="footer__linkItem">
         [linkx]
         
        </li>
        <li class="footer__linkItem">
         <a href="/kr" target="_blank">
          CLIP STUDIO.net
         </a>
        </li>
        <li class="footer__linkItem">
         <a href="/user/Celsysweb" target="_blank">
          YouTube공식 채널
         </a>
        </li>
       </ul>
      </div>
     </div>
     <div class="col-sm-8">
      <div class="center-block footer-col-center">
       <h4>
        오피셜 SNS
       </h4>
       <ul class="footer__linkList">
        [area1][mkey1][pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
       </ul>
       <div style="clear: both">
       </div>
       <h4>
        언어
       </h4>
       <div class="dropup header__selectSite localeExchange">
        <div aria-expanded="false" class="localeExchange__button dropdown-toggle" data-toggle="dropdown">
         <i aria-hidden="true" class="fa fa-globe localeExchange__icon">
         </i>
         <span>
          한국어
         </span>
        </div>
        <ul class="dropdown-menu header__sites localeExchange__menu" role="menu">
         <li class="localeExchange__menuItem">
          [ahref]
          
         </li>
         <li class="localeExchange__menuItem">
          [linkx]
          
         </li>
         <li class="localeExchange__menuItem">
          <a data-locale-exchange="es-es" href="#">
           Español
          </a>
         </li>
         <li class="localeExchange__menuItem">
          [linkx]
          
         </li>
         <li class="localeExchange__menuItem">
          [ahref]
          
         </li>
         <li class="localeExchange__menuItem">
          <a data-locale-exchange="zh-tw" href="#">
           <span>
            繁體中文
           </span>
          </a>
         </li>
         <li class="localeExchange__menuItem">
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
     <div class="col-sm-8">
      <div class="center-block footer-col-right">
       <h4>
        서포트
       </h4>
       <ul class="footer__linkList">
        <li class="footer__linkItem">
         [ahref]
         
        </li>
        <li class="footer__linkItem">
         [ahref]
         
         <br/>
         [linkx]
         
        </li>
        <li class="footer__linkItem">
         <a href="/en/information/privacy/" target="_blank">
          개인정보보호정책
         </a>
        </li>
        <li class="footer__linkItem">
         [linkx]
         
        </li>
        <li class="footer__linkItem">
         <a href="/kr/support" target="_blank">
          Contact
         </a>
        </li>
       </ul>
       <h4>
        셀시스에 대해서
       </h4>
       <ul class="footer__linkList">
        <li class="footer__linkItem">
         [ahref]
         
        </li>
        <li class="footer__linkItem">
         [ahref]
         
        </li>
        <li class="footer__linkItem">
         [linkx]
         
        </li>
        <li class="footer__linkItem">
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
   <div class="footer__copyright">
    <span>
     © 2019 CELSYS,Inc.
    </span>
    <span>
     [
     [linkx]
     
     ]
    </span>
   </div>
  </footer>
  <div class="scrollToTop">
   [ahref]
   
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0353
  </b>
 </body>
</html>|<---