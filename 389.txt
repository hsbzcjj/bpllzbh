--->|<!DOCTYPE html>
<html lang="ko" prefix="og: http://ogp.me/ns#">
 <head>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8"/>
 </head>
 <body class="ecom-store">
  <div data-svg-sprite="/INTERSHOP/static/WFS/Haefele-HVN-Site/responsive/-/en_VN/images/icons/svg-sprite.svg">
  </div>
  <div class="hide-quick-ViewStandardCatalog-Browse" id="infocontainer">
  </div>
  <noscript>
   <iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-K432FD" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
  <div class="pageWarningBox headnavigation_frame">
   <div class="pageWarning box_notification_lc timeOutWarning">
    <p class="pageWarningTxt" data-message="Due to a maintenance the login is disabled on 25.04.2019 from 05:30 AM CEST to 25.04.2019 07:00 PM CEST." data-warning="샵에 일시적으로 로그인 할 수 없습니다. 자동으로 로그오프 되었습니다.">
    </p>
    <button class="stdButton focusButton pageWarningBtn" onclick="setConfirmLoginDisabledCookie()">
     <i class="icon icn-close">
     </i>
    </button>
   </div>
  </div>
  <div class="sessionTimeoutWarningBox headnavigation_frame" id="timeOutWarningFrame">
   <div class="hflLayerBox warningLayer autoSize sessionTimeoutWarningLayer hide" id="js-imeoutWarningLayer">
    <div class="background shadow">
    </div>
    <div class="hflShadow hflShadowTopLeft">
    </div>
    <div class="hflShadow hflShadowTop">
    </div>
    <div class="hflShadow hflShadowTopRight">
    </div>
    <div class="hflShadow hflShadowLeft">
    </div>
    <div class="hflLayerContainer">
     <div class="hflLayerCnt">
      <span class="closeButton cancelButton">
      </span>
      <h2 class="layerHeadline">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="warningContainer errorContainer">
       <i class="icon icn-alert">
       </i>
       <div class="errorTextContainer">
        <p>
         귀하는
         <span id="timeOutSecondsLeft">
          0
         </span>
         분 내에 자동으로 로그아웃됩니다.
        </p>
       </div>
      </div>
      <div class="warningLayerButtons">
       <button class="stdButton btn btn-medium focusButton is-fw" id="stayLoggedInButton">
        로그인 상태 유지
       </button>
       [ahref]
       
      </div>
     </div>
    </div>
    <div class="hflShadow hflShadowRight">
    </div>
    <div class="hflShadow hflShadowBottomLeft">
    </div>
    <div class="hflShadow hflShadowBottom">
    </div>
    <div class="hflShadow hflShadowBottomRight">
    </div>
   </div>
  </div>
  <div class="sessionTimeoutWarningBox headnavigation_frame" id="loggedOutFrame">
   <div class="hflLayerBox warningLayer autoSize sessionTimeoutWarningLayer hide" id="js-sessionTimeoutWarningLayer">
    <div class="background shadow">
    </div>
    <div class="hflShadow hflShadowTopLeft">
    </div>
    <div class="hflShadow hflShadowTop">
    </div>
    <div class="hflShadow hflShadowTopRight">
    </div>
    <div class="hflShadow hflShadowLeft">
    </div>
    <div class="hflLayerContainer">
     <div class="hflLayerCnt">
      <span class="closeButton cancelButton">
      </span>
      <h2 class="layerHeadline">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <div class="warningContainer errorContainer">
       <i class="icon icn-alert">
        [area1][keywordx][area1][mkey1][linkx][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][linkx][linkx][ahref][pkeyx][area1][mkey1][linkx][linkx][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1][pkeyx][pkeyx]
       </i>
       <div class="errorTextContainer">
        <p>
         귀하는 보안을 위해 로그아웃되었습니다.
        </p>
       </div>
      </div>
      <div class="warningLayerButtons">
       <form action="/ko/account/login/" method="GET">
       </form>
       [ahref]
       
      </div>
     </div>
    </div>
    <div class="hflShadow hflShadowRight">
    </div>
    <div class="hflShadow hflShadowBottomLeft">
    </div>
    <div class="hflShadow hflShadowBottom">
    </div>
    <div class="hflShadow hflShadowBottomRight">
    </div>
   </div>
  </div>
  <div id="js-translation-warning-container">
  </div>
  <div class="lawcookieFrame headnavigation_frame cookieOptOutBoxWrapper" id="lawcookieFrame">
   <form id="formLawCookie">
    <div class="hflLayerBox cookieOptOutWarningLayer" id="lawcookieGoogleAnalytcis" style="display:none">
     <div class="hflLayerContainer container isMobile">
      <div class="hflLayerCnt">
       <div class="warningContainer">
        <h2 class="layerHeadline">
         [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
        </h2>
        <p>
         웹사이트의 모든 내용과 기능을 제한 없이 이용할 수 있도록 쿠키 설정을 허용해주십시오.
        </p>
       </div>
       <div class="warningLayerButtons">
        [ahref]
        
       </div>
       <span class="icn-close">
       </span>
      </div>
     </div>
    </div>
   </form>
  </div>
  <noscript>
   <div class="ws-no-script">
    <li>[pkeyx]</li>[linkx][linkx][area1][keywordx]<li>[area1][mkey1]</li>
   </div>
  </noscript>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <div id="hflPage">
   <div id="hflPage-inner">
    <div class="defaulPageIndentifier" id="defaulPageIndentifier" selected_navigation_tab="">
    </div>
    <div data-tab="ce8KAOsniPoAAAFs7jGwZoIu" id="tabIndentifier">
    </div>
    <div class="hfl-searchbar--flyout--layer">
    </div>
    <header>
     <div class="container">
      <div class="header__content">
       <div class="header__logo">
        [linkx]
        
        <div style="min-width: 620px; display: inline-block; float: right;">
         <ul class="metaNav desk-view-flyout" id="js-hflHomeFlyouts" style="float: right; display: inline-block;">
          <li class="hidden-xs">
           [ahref]
           
          </li>
          <li class="header-language" style="width: 90px">
           <form method="post" name="languageSwitch">
            <ul>
             <select class="selectSearchType languageSelectBox form-control language-dropdown" id="SearchTypeLanguageSelect" name="LocaleID" onchange="Cookies.set('remember-locale', this.value, {expires:365});this.form.action=languageSwitchFormAction;this.form.submit();" style="display: none;">
              <option class="metaNav" selected="selected" value="ko_KR">
               한국어
              </option>
              <option class="metaNav" value="en_KR">
               English
              </option>
             </select>
            </ul>
           </form>
          </li>
          <li class="layer hidden-xs mail-contact" data-debuginfo="cms">
           [ahref]
           
           <div class="hflLayerBox contactLayer hide contactHeaderDropdown" id="contactLayer">
            <div class="background">
            </div>
            <div class="hflShadow hflShadowTopLeft">
            </div>
            <div class="hflShadow hflShadowTop">
            </div>
            <div class="hflShadow hflShadowTopRight">
            </div>
            <div class="hflShadow hflShadowLeft">
            </div>
            <div class="hflLayerCnt">
             <span data-ajaxurl="https://www.hafele.co.kr/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/ViewOpenTextContent-IncludeContent?SeoID=15553&amp;ForceCache=true" id="js-contact-layer">
             </span>
            </div>
            <div class="hflShadow hflShadowRight">
            </div>
            <div class="hflShadow hflShadowBottomLeft">
            </div>
            <div class="hflShadow hflShadowBottom">
            </div>
            <div class="hflShadow hflShadowBottomRight">
            </div>
           </div>
          </li>
          <div class="headerLogin hidden-xs header-icon-box">
           <li class="header-loggedin-link layer myAccountLayerTrigger" data-debuginfo="cms" id="header-loggedin-link">
            [linkx]
            
            <span data-ajaxurl="https://www.hafele.co.kr/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/Template-Include?Template=comp%2Fhaefele%2Fheader%2FheaderItemLoginContent&amp;HandlerPipeline=ProcessUser-GetCustomer&amp;TargetPipeline=&amp;Parameter1_Name=&amp;Parameter1_Value=&amp;Parameter2_Name=&amp;Parameter2_Value=&amp;Parameter3_Name=&amp;Parameter3_Value=&amp;Parameter4_Name=&amp;Parameter4_Value=&amp;Parameter5_Name=&amp;Parameter5_Value=&amp;Parameter6_Name=&amp;Parameter6_Value=&amp;TargetURLFragment=&amp;RegisterLink=pipeline%3A%2F%2FViewStandardCatalog-Browse%3FSeoID%3D1673&amp;RegisterLinkProtocol=current&amp;RegisterLinkParameters=&amp;RegisterLinkText=%EB%93%B1%EB%A1%9D&amp;ForgotPasswordLink=pipeline%3A%2F%2FViewForgotLoginData-ForgotPassword&amp;ForgotPasswordLinkProtocol=current&amp;ForgotPasswordLinkParameters=&amp;ForgotPasswordLinkText=%EB%A1%9C%EA%B7%B8%EC%9D%B8+%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC+%EC%9E%8A%EC%9C%BC%EC%85%A8%EC%8A%B5%EB%8B%88%EA%B9%8C%3F" id="js-login-navigation">
            </span>
           </li>
           <li class="header-notloggedin-link layer" data-debuginfo="cms" id="header-notloggedin-link">
            <li>[area1][mkey1]</li>[ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           </li>
          </div>
          <div class="hflLayerBox loginLayer hide" data-testid="FlyoutLogin" id="headerLoginOverlayDropdown">
           <div class="background">
           </div>
           <div class="hflShadow hflShadowTopLeft">
           </div>
           <div class="hflShadow hflShadowTop">
           </div>
           <div class="hflShadow hflShadowTopRight">
           </div>
           <div class="hflShadow hflShadowLeft">
           </div>
           <div class="hflLayerCnt loginOrRegister js-loginOrRegister">
            <span class="closeButton cancelButton">
            </span>
            <h4 class="layerHeadline">
             기업고객 로그인
            </h4>
            <div class="layerBody">
             <form action="/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/ViewUserAccount-ProcessLoginHeaderItemLogin" class="stdForm" id="loginWithExistingAccountForm" method="post" name="loginWithExistingAccountForm">
              <div class="loginFormAjax myAccountLogin" id="loginFormAjax">
               <h1>
                <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
               </h1>
               <div class="loginForm-label" data-bind="visible: loginResult().getHDERedirectURL()" id="HDERedirectContent">
                <span data-bind="visible: loginResult().getBozen()">
                 <p>
                  Sie werden auf die Italienische Seite in Deutscher Sprache weitergeleitet.
                  <br/>
                  Klicken Sie auf 'Weiter', um auf die Seite zu wechseln!
                 </p>
                 [linkx]
                 
                </span>
                <span data-bind="visible: !loginResult().getBozen()">
                 <p>
                  Für Sie ist easy link in einer anderen Sprachversion vorgesehen.
                  <br/>
                  Klicken Sie auf 'Weiter' um in die gültig Sprachvariante zu wechseln!
                 </p>
                 [ahref]
                 
                </span>
               </div>
               <div class="loginForm-content" data-bind="visible: !loginResult().getHDERedirectURL()" id="loginFormContent">
                <div class="hfl-error--container" data-bind="visible: loginResult().getError() &amp;&amp; !loginResult().getHDERedirectURL()" role="alert">
                 <i class="icon icn-alert">
                 </i>
                 <span data-bind="html: loginResult().getError()">
                 </span>
                </div>
                <div class="form-group co-user">
                 <label for="ShopLoginForm_LoginAsJointUser_headerItemLogin">
                  공동 사용자로 로그인
                 </label>
                </div>
                <div class="login-fields-wrapper">
                 <div class="form-group hfl-login--form-group__joint-user">
                  <div class="hfl-textinput clearfix inputUsername">
                   <label class="hfl-textinput--placeholder" for="ShopLoginForm_UserName">
                    <span>
                     사용자 이름 *
                    </span>
                   </label>
                   <div class="hfl-error--message" data-bind="visible: loginResult().hasError('ShopLoginForm_UserName')">
                    <span data-bind="html:loginResult().getError('ShopLoginForm_UserName')">
                    </span>
                   </div>
                  </div>
                 </div>
                 <div class="form-group hfl-login--form-group__default-login">
                  <div class="hfl-textinput clearfix">
                   <label class="hfl-textinput--placeholder" for="ShopLoginForm_Login_headerItemLogin">
                    <span>
                     고객 번호 *
                    </span>
                   </label>
                   <div class="hfl-error--message" data-bind="visible: loginResult().hasError('ShopLoginForm_Login')">
                    <span data-bind="html:loginResult().getError('ShopLoginForm_Login')">
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
                <div class="form-group">
                 <div class="hfl-textinput clearfix">
                  <label class="hfl-textinput--placeholder" for="ShopLoginForm_Password">
                   <span>
                    패스워드 *
                   </span>
                  </label>
                  <div class="hfl-error--message" data-bind="visible: loginResult().hasError('ShopLoginForm_Password')">
                   <span data-bind="html:loginResult().getError('ShopLoginForm_Password')">
                   </span>
                  </div>
                 </div>
                </div>
                <div class="form-group forgotPassLink">
                 <p>
                  [ahref]
                  
                 </p>
                </div>
                <div class="form-group loginRember">
                 <label for="ShopLoginForm_RememberLogin_headerItemLogin">
                  로그인 상태 유지
                 </label>
                </div>
                <div class="form-group hfl-login--form-group__submit">
                 <button class="hfl-button hfl-button__focus btn-block btn btn-medium" data-testid="ajaxAccountLoginFormBtn" tabindex="5" type="submit">
                  <span class="stdButtonInner">
                   기업고객 로그인
                  </span>
                 </button>
                 <div class="hfl-login--links">
                  <div class="line-title row">
                   <div class="text-title">
                    <span>
                     Or, Not a customer yet?
                    </span>
                   </div>
                  </div>
                  [linkx]
                  
                 </div>
                </div>
               </div>
               <div class="hflAjaxLoader loginAjaxLoader hidden" id="loginFormAjaxLoader">
                <span>
                </span>
                <div>
                 귀하의 로그인 데이터 확인 중입니다...
                </div>
               </div>
              </div>
             </form>
            </div>
           </div>
           <div class="hflShadow hflShadowRight">
           </div>
           <div class="hflShadow hflShadowBottomLeft">
           </div>
           <div class="hflShadow hflShadowBottom">
           </div>
           <div class="hflShadow hflShadowBottomRight">
           </div>
          </div>
         </ul>
        </div>
        <span class="js-ajaxload" data-ajaxurl="https://www.hafele.co.kr/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/Template-Include?Template=inc%2Fhaefele%2Fcommon%2FLiveChat&amp;HandlerPipeline=Prefix-GetApplicationBO">
        </span>
       </div>
      </div>
      <div class="overlayBackground hidden-xs">
       <h3>
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h3>
      </div>
      <div class="hidden-xs navBar">
       <ul class="js-hflNavigation mainNav clearfix" id="js-hflNavigation">
        <li class="level1Nav-vertical js-level1Nav-vertical hide_icon" data-debuginfo="cms" id="storeVertical">
         [linkx]
         
         <div class="level2Nav level2Nav-vertical">
          <div class="level2NavInner">
           <ul class="js-level2 level2NavList">
            <li class="level2NavListItem js-level2NavListItem-vertical value_1">
             [linkx]
             
             <div class="hflLayerBox level3 level3Nav-vertical-box js-level3Nav-vertical-box" id="TmIKAOsFSWEAAAFm7y92hlbp">
              <div class="hflLayerContent level3Nav-vertical-content js-level3Nav-vertical-content">
               <div class="level3Nav level3Nav-vertical">
                <ul class="level3NavList js-level3NavList-vertical js-level3" data-count-items="4">
                 <li class="visible-xs">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </li>
            <li class="level2NavListItem js-level2NavListItem-vertical value_2">
             [ahref]
             
             <div class="hflLayerBox level3 level3Nav-vertical-box js-level3Nav-vertical-box" id="7JcKAOsFF9MAAAFmlC92hlbp">
              <div class="hflLayerContent level3Nav-vertical-content js-level3Nav-vertical-content">
               <div class="level3Nav level3Nav-vertical">
                <ul class="level3NavList js-level3NavList-vertical js-level3" data-count-items="11">
                 <li class="visible-xs">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [linkx]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="5">
                   <li class="visible-xs">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    <a class="js-viewSwitchAware" data-category-id="LY8KAOsFj14AAAFmnCp2hlbp" data-target="#LY8KAOsFj14AAAFmnCp2hlbp" href="/ko/products/-/-/-/de29714ebcce80de06d64a5814151893/" title="">
                     <span itemprop="name">
                      환기구 그릴 &amp; 시스템
                      <i class="icon icn-chevron pull-right">
                       <li>[ahref]</li><li>[pkeyx]</li>[area1][mkey1]
                      </i>
                     </span>
                    </a>
                   </li>
                  </ul>
                 </li>
                 <li class="level3NavListItem">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [linkx]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="5">
                   <li class="visible-xs">
                    <a class="view_all" href="/ko/products/-/-/5778442c2fd70fd6f9bb366a3ae1ec70/">
                     <span>
                      View All
                     </span>
                    </a>
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                  </ul>
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [ahref]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="3">
                   <li class="visible-xs">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                  </ul>
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [ahref]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="3">
                   <li class="visible-xs">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                  </ul>
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [ahref]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="3">
                   <li class="visible-xs">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                  </ul>
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [linkx]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="2">
                   <li class="visible-xs">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                  </ul>
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [linkx]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="3">
                   <li class="visible-xs">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </li>
            <li class="level2NavListItem js-level2NavListItem-vertical value_3">
             [ahref]
             
             <div class="hflLayerBox level3 level3Nav-vertical-box js-level3Nav-vertical-box" id="MRsKAOsF5BwAAAFmajB2hlbp">
              <div class="hflLayerContent level3Nav-vertical-content js-level3Nav-vertical-content">
               <div class="level3Nav level3Nav-vertical">
                <ul class="level3NavList js-level3NavList-vertical js-level3" data-count-items="7">
                 <li class="visible-xs">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem">
                  <a class="js-viewSwitchAware" data-category-id="41kKAOsFrjUAAAFmoSt2hlbp" data-target="#41kKAOsFrjUAAAFmoSt2hlbp" href="/ko/products/-/-/904dfdc0074e92e7c80dac09879972a0/" title="">
                   <span itemprop="name">
                    액세스 제어
                    <i class="icon icn-chevron pull-right">
                    </i>
                   </span>
                  </a>
                 </li>
                 <li class="level3NavListItem level4NavItemsAvailable">
                  [ahref]
                  
                  <ul class="level4NavList level4NavList-vertical" data-count-items="2">
                   <li class="visible-xs">
                    <a class="view_all" href="/ko/products/-/-/e1633164eec3e44622b4cdceb3328fc5/">
                     <span>
                      View All
                     </span>
                    </a>
                   </li>
                   <li class="level4NavListItem vertical">
                    [linkx]
                    
                   </li>
                   <li class="level4NavListItem vertical">
                    [ahref]
                    
                   </li>
                  </ul>
                 </li>
                 <li class="level3NavListItem">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem">
                  <a class="js-viewSwitchAware" data-category-id="lSwKAOsFywoAAAFmBCx2hlbp" data-target="#lSwKAOsFywoAAAFmBCx2hlbp" href="/ko/products/-/-/bd5fc5a44484f82bd2e0aef597540109/" title="">
                   <span itemprop="name">
                    유리 도어 &amp; 유리 도어 피팅
                    <i class="icon icn-chevron pull-right">
                    </i>
                   </span>
                  </a>
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </li>
            <li class="level2NavListItem js-level2NavListItem-vertical value_4">
             [linkx]
             
             <div class="hflLayerBox level3 level3Nav-vertical-box js-level3Nav-vertical-box" id="V0UKAOsF_gcAAAFmvzF2hlbp">
              <div class="hflLayerContent level3Nav-vertical-content js-level3Nav-vertical-content">
               <div class="level3Nav level3Nav-vertical">
                <ul class="level3NavList js-level3NavList-vertical js-level3" data-count-items="2">
                 <li class="visible-xs">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </li>
            <li class="level2NavListItem js-level2NavListItem-vertical value_5">
             [ahref]
             
             <div class="hflLayerBox level3 level3Nav-vertical-box js-level3Nav-vertical-box" id="HUcKAOsFDGsAAAFmzzF2hlbp">
              <div class="hflLayerContent level3Nav-vertical-content js-level3Nav-vertical-content">
               <div class="level3Nav level3Nav-vertical">
                <ul class="level3NavList js-level3NavList-vertical js-level3" data-count-items="4">
                 <li class="visible-xs">
                  [ahref]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [linkx]
                  
                 </li>
                 <li class="level3NavListItem">
                  [pkeyx][linkx][area1][mkey1][area1][mkey1][ahref][pkeyx][pkeyx][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][keywordx][pkeyx][linkx][pkeyx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                 </li>
                 <li class="level3NavListItem">
                  [ahref]
                  
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </li>
            <li class="level2NavListItem js-level2NavListItem-vertical value_6">
             [linkx]
             
             <div class="hflLayerBox level3 level3Nav-vertical-box js-level3Nav-vertical-box" id="8PwKAOsFrBwAAAFmQzF2hlbp">
              <div class="hflLayerContent level3Nav-vertical-content js-level3Nav-vertical-content">
               <div class="level3Nav level3Nav-vertical">
                <ul class="level3NavList js-level3NavList-vertical js-level3" data-count-items="7">
                 [ahref][linkx][area1][keywordx][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                </ul>
               </div>
              </div>
             </div>
            </li>
           </ul>
          </div>
         </div>
        </li>
        <li class="level1_3Nav-vertical non-store-level-one opentext-category" data-debuginfo="cms">
        </li>
        <li class="level1_3Nav-vertical opentext-category" data-debuginfo="cms">
         [ahref]
         
         <div class="hflLayerBox" id="OeQKAOsnUWkAAAFsjzGwZoIu">
          <div class="hflLayerContent">
           <div class="level3Nav">
            <ul class="level3NavList">
             <li class="level3NavListItem visible-xs">
              [linkx]
              
             </li>
             <li class="level3NavListItem">
              [ahref]
              
             </li>
             <li class="level3NavListItem">
              [ahref]
              
             </li>
             <li class="level3NavListItem">
              [ahref]
              
             </li>
             <li class="level3NavListItem">
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </li>
        <li class="level1_3Nav-vertical opentext-category" data-debuginfo="cms">
         [linkx]
         
         <div class="hflLayerBox" id="W90KAOsn6LoAAAFsGTKwZoIu">
          <div class="hflLayerContent">
           <div class="level3Nav">
            <ul class="level3NavList">
             <li class="level3NavListItem visible-xs">
              [linkx]
              
             </li>
             <li class="level3NavListItem">
              [ahref]
              
             </li>
             <li class="level3NavListItem">
              [ahref]
              
             </li>
             <li class="level3NavListItem">
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </li>
        <li class="level1_3Nav-vertical opentext-category" data-debuginfo="cms">
         [linkx]
         
         <div class="hflLayerBox" id="RbAKAOsn4uEAAAFsSjKwZoIu">
          <div class="hflLayerContent">
           <li>[area1][mkey1]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][mkey1]
          </div>
         </div>
        </li>
        <li class="level1_3Nav-vertical opentext-category" data-debuginfo="cms">
         [linkx]
         
         <div class="hflLayerBox" id="dLMKAOsnqIwAAAFs0DKwZoIu">
          <div class="hflLayerContent">
           <div class="level3Nav">
            <ul class="level3NavList">
             <li class="level3NavListItem visible-xs">
              [linkx]
              
             </li>
             <li class="level3NavListItem">
              [linkx]
              
             </li>
             <li class="level3NavListItem">
              [linkx]
              
             </li>
             <li class="level3NavListItem">
              [linkx]
              
             </li>
             <li class="level3NavListItem">
              [ahref]
              
             </li>
             <li class="level3NavListItem">
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </li>
        <li class="level1_3Nav-vertical nav_border_top visible-xs catalogBrowseUrlnew" data-debuginfo="cms">
         [linkx]
         
        </li>
        <li class="level1_3Nav-vertical visible-xs" data-debuginfo="cms">
         [ahref]
         
        </li>
        <li class="level1_3Nav-vertical" data-debuginfo="cms">
         [ahref]
         
        </li>
        <li class="level1_3Nav-vertical visible-xs" data-debuginfo="cms">
         <ul class="hideDesktop loginOptionMobile">
          <li class="header-loggedin-link layer myAccountLayerTrigger" data-debuginfo="cms" id="header-loggedin-link">
           [ahref]
           
           <span data-ajaxurl="https://www.hafele.co.kr/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/Template-Include?Template=comp%2Fhaefele%2Fheader%2FheaderItemLoginContent&amp;HandlerPipeline=ProcessUser-GetCustomer&amp;TargetPipeline=&amp;Parameter1_Name=&amp;Parameter1_Value=&amp;Parameter2_Name=&amp;Parameter2_Value=&amp;Parameter3_Name=&amp;Parameter3_Value=&amp;Parameter4_Name=&amp;Parameter4_Value=&amp;Parameter5_Name=&amp;Parameter5_Value=&amp;Parameter6_Name=&amp;Parameter6_Value=&amp;TargetURLFragment=&amp;RegisterLink=&amp;RegisterLinkProtocol=&amp;RegisterLinkParameters=&amp;RegisterLinkText=&amp;ForgotPasswordLink=&amp;ForgotPasswordLinkProtocol=&amp;ForgotPasswordLinkParameters=&amp;ForgotPasswordLinkText=" id="js-login-navigation">
           </span>
          </li>
          <li class="header-notloggedin-link layer" data-debuginfo="cms" id="header-notloggedin-link">
           [ahref]
           
          </li>
         </ul>
        </li>
       </ul>
      </div>
      <div class="searchCont searchBoxSection searchBox--container overlayBoxDropDown">
       <div class="closeButton cancelButton hideDesktop">
       </div>
       <div class="search-title hideDesktop">
        검색
       </div>
       <div class="searchBar-title hideDesktop">
        Search for product name or article numbers
       </div>
       <div class="searchBar searchBoxSection searchBox--container overlayBoxDropDown" id="hflSearchBar">
        <div class="closeButton cancelButton hideDesktop">
        </div>
        <div class="search-title hideDesktop">
        </div>
        <div class="searchBar-title hideDesktop">
         Search for product name or article numbers
        </div>
        <div style="width: 100%;">
         <div class="searchField" id="searchField">
          <form action="/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/ViewParametricSearch-SimpleOfferSearch" class="js-search" data-searchid="searchForm" id="searchForm" name="searchForm">
           <div class="search-box-button">
            <div class="remove-search" onclick="javascript:void(0);">
             <span>
              X
             </span>
            </div>
            <button class="js-search searchButton search-icon icn-search hidden-xs speechToTextSearch" data-searchid="searchButton" data-testid="SearchButton" type="submit" value="Search">
            </button>
            <button class="search-icon icn-search visible-xs icon-mic speechToTextContainer" data-searchid="voiceSearchButton" data-testid="voiceSearchButton" type="button" value="Voice Search">
            </button>
           </div>
          </form>
          <div class="suggestResult" id="js-suggestResult">
          </div>
         </div>
        </div>
        <div class="directOrder hidden-xs" id="directOrder">
         <div class="directOrderButton" data-testid="DirectOrderButton" id="directOrderButton">
          빠른 주문
          <i class="icon icn-chevron">
          </i>
         </div>
         <div class="list-body section none-store-hide directOrderCont">
          <div class="directOrderFlyout" id="directOrderBox">
           <div class="title quick_order_lable">
            <label class="control-label hfl-label">
             물품 번호로 직접 주문
            </label>
           </div>
           <div class="hflLayerCnt directOrderBoxContent">
            <div class="closeButton cancelButton directOrderBoxCancel">
            </div>
            <div class="articleErrorText" style="display:none">
             물품 번호를 입력하십시오.
            </div>
            <div class="quantityErrorText" style="display:none">
             유효한 물품 수량을 입력하십시오.
            </div>
            <div class="articleNotCorrectErrorText" style="display:none">
             물품 번호가 정확하지 않습니다. 확인하시기 바랍니다.
            </div>
            <div class="articleNotFoundText" style="display:none">
             물품 번호를 찾을 수 없습니다. 확인하시기 바랍니다.
            </div>
            <div class="articleNotAvailable" style="display:none">
             현재 공급되지 않는 물품입니다.
            </div>
            <form action="/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/ViewCart-Dispatch" class="directOrderForm" id="directOrderForm" method="post" name="directOrderForm">
             <p class="title visible-lg">
              물품 번호를 이용하여 장바구니에 물품 추가:
             </p>
             <table class="quick-order-rows-container">
              <thead class="hidden-xs">
               <tr>
                <th>
                </th>
                <th colspan="4">
                 <div class="hidden-xs col-sm-3 quick-order-th-text">
                  물품 번호
                 </div>
                 <div class="hidden-xs col-sm-2 quick-order-th-text">
                  수량
                 </div>
                 <div class="hidden-xs col-sm-3 quick-order-th-text">
                  물품 선별
                 </div>
                </th>
               </tr>
              </thead>
              <tbody class="list-item-row js-list-item-row" data-bind="foreach: rows()">
               <tr>
                <td class="hidden-xs" data-bind="text: index()+'.'">
                </td>
                <td colspan="4">
                 <div class="1 inp-article col-xs-12 col-sm-3">
                  <div class="hfl-textinput form-group">
                   <label class="hfl-textinput--placeholder" for="Product_SKU">
                    물품 번호
                   </label>
                  </div>
                 </div>
                 <div class="infoText col-xs-12 mobileMessage" data-bind="attr: {'data-testid': 'DirectOrderInfoText_' + index()}">
                  <label class="labelInfoText main-container">
                   <p class="message success successContainer" data-bind="visible: !hasError() &amp;&amp; hasInfoText()">
                    <span data-bind="html: infoText()">
                    </span>
                   </p>
                   <p class="message error errorContainer" data-bind="visible: hasError()">
                    <span data-bind="html: errorMessage()">
                    </span>
                   </p>
                  </label>
                 </div>
                 <div class="2 col-xs-6 col-sm-2">
                  <div class="hfl-textinput form-group">
                   <label class="hfl-textinput--placeholder" for="directOrder_quantity_smallform">
                    수량
                   </label>
                  </div>
                 </div>
                 <div class="3 col-xs-6 col-sm-3">
                  <div class="hfl-textinput form-group">
                   <label class="hfl-textinput--placeholder" for="directOrder_sku">
                    물품 선별
                   </label>
                  </div>
                 </div>
                 <div class="infoText col-sm-4 hidden-xs" data-bind="attr: {'data-testid': 'DirectOrderInfoText_' + index()}">
                  <label class="labelInfoText main-container">
                   <p class="message success successContainer" data-bind="visible: !hasError() &amp;&amp; hasInfoText()">
                    <span data-bind="html: infoText()">
                    </span>
                   </p>
                   <p class="message error hfl-error--container" data-bind="visible: hasError()">
                    <span data-bind="html: errorMessage()">
                    </span>
                   </p>
                  </label>
                 </div>
                </td>
               </tr>
              </tbody>
              <tbody>
               <tr>
                <td class="addMoreArticlesWrapper" colspan="2">
                 [linkx]
                 
                </td>
                <td class="addToOpenOrderLink" colspan="2">
                 <div id="js-directOrderChange">
                  <button class="shoppingCartOption is-link-view js-selection-aware hflLink js-executeDirectOrderChange" data-changeorderurl="https://www.hafele.co.kr/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/ViewChangeOrder-GetChangeOrderView?StateFilter=CHANGEABLE" id="executeHeaderOrderChange" name="directOrderChange" type="button" value="directOrderChange">
                   <span class="stdButtonInner">
                    미확정 주문에 추가
                   </span>
                  </button>
                 </div>
                </td>
                <td class="orderSubmitButton hidden-xs" colspan="6">
                 [linkx]
                 
                </td>
               </tr>
               <tr class="hidden-lg">
                <td class="orderSubmitButton" colspan="6">
                 [linkx]
                 
                </td>
               </tr>
              </tbody>
             </table>
            </form>
           </div>
          </div>
         </div>
        </div>
        <div class="cartQuickView hidden-xs" id="js-cart">
         <form action="/ko/cart/" class="js-miniGoToCartQuick1" method="get" name="miniCartGoToCartQuickForm">
          [linkx]
          
         </form>
         <div class="cartQuickViewLayer hflLayerBox hide" id="js-cartBox">
         </div>
        </div>
       </div>
       <div class="addToCartNotificationDialog" id="addToCartNotificationDialog">
       </div>
      </div>
     </div>
    </header>
    <div class="top__nav__wrapper">
     <nav class="visible-xs top__nav" id="HburgerMenu">
      <div class="row-fluid">
       <div class="col-xs-3 top__nav--menu" onclick="openNav()">
        <i class="icon icn-menu">
         <span>
         </span>
        </i>
       </div>
       <div class="side__nav visible-xs" id="side__nav">
        <div class="side__nav--heading">
         <div class="side__nav--back hidden">
          <i class="icon icn-chevron">
          </i>
         </div>
         <div class="side__nav--title">
          Menu
         </div>
         <div class="side__nav--close" onclick="closeNav()">
          <i aria-label="close menu" class="icon icn-close" id="close_hbmenu">
          </i>
         </div>
        </div>
        <div class="side__nav--fillbg">
        </div>
        <div class="side__nav--items level1 js-mobile-nav">
        </div>
       </div>
       <div class="col-xs-3 top__nav--user responsive-header-login login-popup-link">
        <li class="header-loggedin-link layer myAccountLayerTrigger" data-debuginfo="cms" id="header-loggedin-link">
         [linkx]
         
         <span data-ajaxurl="https://www.hafele.co.kr/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/Template-Include?Template=comp%2Fhaefele%2Fheader%2FheaderItemLoginContent&amp;HandlerPipeline=ProcessUser-GetCustomer&amp;TargetPipeline=&amp;Parameter1_Name=&amp;Parameter1_Value=&amp;Parameter2_Name=&amp;Parameter2_Value=&amp;Parameter3_Name=&amp;Parameter3_Value=&amp;Parameter4_Name=&amp;Parameter4_Value=&amp;Parameter5_Name=&amp;Parameter5_Value=&amp;Parameter6_Name=&amp;Parameter6_Value=&amp;TargetURLFragment=&amp;RegisterLink=&amp;RegisterLinkProtocol=&amp;RegisterLinkParameters=&amp;RegisterLinkText=&amp;ForgotPasswordLink=&amp;ForgotPasswordLinkProtocol=&amp;ForgotPasswordLinkParameters=&amp;ForgotPasswordLinkText=" id="js-login-navigation">
         </span>
        </li>
        <li class="header-notloggedin-link layer" data-debuginfo="cms" id="header-notloggedin-link">
         [area1][keywordx][linkx]<li>[linkx]</li>
        </li>
       </div>
       <div class="col-xs-2 top__nav--logo">
        <i class="icon icn-mobilelogo">
        </i>
       </div>
       <div class="col-xs-3 top__nav--cart">
        <div class="mini-cart">
         [linkx]
         
        </div>
       </div>
       <div class="top__nav--search col-xs-12">
        [ahref]
        
        <i aria-label="Search" class="icon icn-search">
        </i>
       </div>
      </div>
     </nav>
    </div>
    <div class="myTopArticlesPopupContainer">
     <div class="modal fade myTopArticlesPopupContent" id="myTopArticlesPopupContent" role="dialog">
     </div>
     <button class="myTopArticlesModalTrigger hide" data-target="#myTopArticlesPopupContent" data-toggle="modal">
     </button>
    </div>
    <div class="wrap">
     <div class="container main-container" role="main">
      <div class="opentext">
       <div class="hflRange3">
        <div class="hflStoreNavigation" data-debuginfo="opentext-include" id="hflStoreNavigation">
         <div aria-controls="service menu" aria-expanded="false" class="collapse__heading visible-xs" data-target=".service__menu" data-toggle="collapse">
          인더스트리
          <i class="icon icn-chevron">
          </i>
         </div>
         <div class="service__menu collapse">
          <div class="service__menu--item service__menu--all visible-xs">
           [ahref]
           
          </div>
          <div class="service__menu--item">
           [linkx]
            [pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
           
          </div>
          <div class="service__menu--item">
           [ahref]
           
          </div>
          <div class="service__menu--item">
           [ahref]
           
           <div class="service__menu collapse">
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="hflRange9 hflLast">
        <div class="breadcrumb" id="breadcrumb">
         <li>[ahref]</li>[area1][mkey1][area1][keywordx][linkx]
        </div>
       </div>
       <div class="hflRange9 hflLast">
        <div class="hflRange9 modulRichText hflLast">
         <h1>
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h1>
         <p>
          헤펠레는 유럽 6곳의 지역에서 하드웨어 및 피팅을 생산하고
          <br>
           헤펠레 고품질 표준을 제품 및 서비스의 형태로 전 세계 곳곳에 수출하고 있습니다.
          </br>
         </p>
        </div>
        <div class="hflRange9 teaser grey modulConfigurationTeaser hflLast" id="474">
         <div class="content">
          <h2 class="title">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
          <p>
           헤펠레 베를린에서는 주로 국제 가구 산업을 대상으로 한 연결 피팅을 생산합니다. 당시의 전문분야는 열가압실식 아연 다이캐스트기, 열가소성 사출 성형, 냉간 성형 및 4개의 재료로 구성된 파트 어셈블리입니다.
          </p>
         </div>
        </div>
        <div class="hflRange9 teaser grey modulConfigurationTeaser hflLast" id="475">
         <div class="content">
          <h2 class="title">
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h2>
          <p>
           헤펠레 제팅겐 플랜트에서는 가구 및 프로젝트에 따라 기능성 피팅, 데스킹 시스템, 슬라이딩 도어 피팅, 특수 피팅, 맞춤형 피팅 솔루션을 중소 시리즈로 개발 및 제작하고 있습니다.
          </p>
         </div>
        </div>
        <div class="hflRange9 teaser grey modulConfigurationTeaser hflLast" id="476">
         <div class="content">
          <h2 class="title">
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h2>
          <p>
           켄칭겐의 헤펠레 플랜트는 고급 자동화 환경에서 서랍 런너, 서랍재, 잠금 시스템, 선반 등의 사무용 가구 설치 시스템을 중형 및 대형 시리즈로 생산하고 있습니다.
          </p>
         </div>
        </div>
        <div class="hflRange9 teaser grey modulConfigurationTeaser hflLast" id="477">
         <div class="content">
          <h2 class="title">
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h2>
          <p>
           스핑크스 전자는 1998년부터 헤펠레 그룹에 소속되어 있습니다. 이 곳에서 다이얼락 전자 접속 제어 및 라킹 시스템이 개발, 제작됩니다.
          </p>
         </div>
        </div>
        <div class="hflRange9 teaser grey modulConfigurationTeaser hflLast" id="478">
         <div class="content">
          <h2 class="title">
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h2>
          <p>
           2009년 헤펠레는 Kesseböhmer사와 공동으로 부다페스트 소재 Huwil Produktionsgesellschaft KFT를 플랩 피팅 사업 부문까지 인수했습니다. Huwil은 2014년에 플랩 컴피턴스 센터(Flap Competence Center Kft)로 사명을 변경했습니다.
          </p>
         </div>
        </div>
       </div>
      </div>
      <div class="footer-content">
       <div class="row">
        <div class="col-xs-12">
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="addToCartNotificationDialog">
    </div>
    <div class="mobile-footer">
     <div class="container">
      <div class="row">
       <div class="col-xs-12 col-sm-3 footer-newletter-block">
        <span class="icon-placeholder-opentext newsletter hide-globalhub" data-opentext-append="newsletter">
        </span>
        <hr class="visible-xs"/>
       </div>
       <div class="col-xs-12 col-sm-9 footer-other-block">
        <div class="row">
         <div class="col-xs-12 col-sm-8 global_hub_center">
          <div class="icons-cont row">
           <div class="col-xs-12">
            <ul class="footer-icons hide-globalhub">
             <li class="header-loggedin-link layer myAccountLayerTrigger" data-debuginfo="cms" id="header-loggedin-link">
              [linkx]
              
              <span data-ajaxurl="https://www.hafele.co.kr/hap-live/web/WFS/Haefele-HKR-Site/ko_KR/-/KRW/Template-Include?Template=comp%2Fhaefele%2Fheader%2FheaderItemLoginContent&amp;HandlerPipeline=ProcessUser-GetCustomer&amp;TargetPipeline=&amp;Parameter1_Name=&amp;Parameter1_Value=&amp;Parameter2_Name=&amp;Parameter2_Value=&amp;Parameter3_Name=&amp;Parameter3_Value=&amp;Parameter4_Name=&amp;Parameter4_Value=&amp;Parameter5_Name=&amp;Parameter5_Value=&amp;Parameter6_Name=&amp;Parameter6_Value=&amp;TargetURLFragment=&amp;RegisterLink=&amp;RegisterLinkProtocol=&amp;RegisterLinkParameters=&amp;RegisterLinkText=&amp;ForgotPasswordLink=&amp;ForgotPasswordLinkProtocol=&amp;ForgotPasswordLinkParameters=&amp;ForgotPasswordLinkText=" id="js-login-navigation">
              </span>
             </li>
             <li class="header-notloggedin-link layer" data-debuginfo="cms" id="header-notloggedin-link">
              [ahref]
              
             </li>
             <li class="footer-icon-link link-left">
              <i class="icon icn-globe">
              </i>
              <span class="icon-placeholder-opentext worldwide" data-opentext-append="worldwide">
              </span>
             </li>
             <li class="footer-icon-link link-right">
              <span class="icon-placeholder-opentext apps" data-opentext-append="apps">
              </span>
             </li>
             <li class="footer-icon-link link-right">
              <i class="icon icn-catalogue">
              </i>
              <span class="icon-placeholder-opentext catalog" data-opentext-append="catalog">
              </span>
             </li>
             <li class="footer-icon-link link-right hidden-xs hidden-sm">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div class="footer-language-selector col-xs-12">
            <p class="hidden">
             언어 선택
            </p>
            <div class="hfl-select hfl-footer--language-dropdown header-language">
             <select class="form-control language-dropdown" id="language-dropdown">
              <option data-locale-val="ko_KR" selected="">
               한국어
              </option>
              <option data-locale-val="en_KR">
               English
              </option>
             </select>
            </div>
           </div>
          </div>
         </div>
         <div class="hflFooter is-small-view visible-xs" id="js-hflFooter">
          <li>[area1][keywordx]</li>[ahref][ahref][area1][keywordx]<li>[area1][keywordx]</li>
         </div>
         <hr class="visible-xs"/>
         <div class="soical-link-responsive col-xs-12 col-sm-4 hide-globalhub">
          <p>
           이메일:
           [linkx]
           
          </p>
          <p>
           전화: 1899-0091
          </p>
          <span class="icon-placeholder-opentext" data-opentext-append="social">
          </span>
         </div>
        </div>
       </div>
       <p class="visible-xs copyrightMobile">
        [pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx]
       </p>
      </div>
      <div class="row hidden-xs">
       <div class="contentDesktop">
        <div class="opentext">
         <div class="hflFooter" id="js-hflFooter">
          <div class="hflFooterInner clearfix">
           [linkx]
           
           [linkx]
           
           [ahref]
           
           [ahref]
           
           [ahref]
           
           [ahref]
           
          </div>
          <div class="hflFooterNav">
           <small class="copyrightNote">
            © 2019 Häfele 작성
           </small>
           [ahref]
           
           [linkx]
           
           [linkx]
           
           [ahref]
           
           [ahref]
           
           [ahref]
           
          </div>
          <div class="contactUs" style="display:none">
           [ahref]
           
          </div>
         </div>
        </div>
        <div class="footer-content">
         <div class="row">
          <div class="col-xs-12">
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="hidden" id="FrontEndDebugInfoContainer">
    </div>
   </div>
  </div>
  <noscript>
  </noscript>
  <div class="ws-small-loader">
  </div>
  <div class="jsOnly" id="loadingLayer">
  </div>
  <div class="suggestResult consignmentSuggestResult" id="js-consignmentSuggestFlyout" style="position: absolute;">
   <ul data-bind="foreach: getConsignments">
    <li class="js-suggestItem suggestItem" data-bind="if: isVisible() ,css: { active: isSelected() }, attr: {'data-index': index}">
     [pkeyx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][pkeyx][pkeyx][area1][mkey1][pkeyx][area1][mkey1][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
    </li>
   </ul>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0429
  </b>
 </body>
</html>|<---