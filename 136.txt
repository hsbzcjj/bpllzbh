--->|<!DOCTYPE html>
<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="lg0qcRkaLtMeKJcXsOLoptzK-2MIRJzuEtiYHZf_O2Y" name="google-site-verification"/>
  <noscript>
  </noscript>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="https://dictionary.cambridge.org/ko/external/images/CDO_logo_120x120.jpg" property="og:image"/>
 </head>
 <body class="default_layout">
  <div itemscope="" itemtype="http://schema.org/Product" style="display: none;">
   <span itemprop="name">
    umbrella | 영어를 한국어로 번역: Cambridge Dictionary
   </span>
   [linkx]
   
  </div>
  <div class="overlay js-nav-trig">
  </div>
  <div class="off-canvas">
   <span class="off-canvas__close js-nav-trig">
    <i class="fcdo fcdo-close">
    </i>
   </span>
   <div class="off-canvas__pad clrd">
    [linkx]
    
   </div>
   <nav class="off-canvas__nav js-menu">
    <ul>
     <li>
      [ahref]
      
      <ul>
       <li>
        [ahref]
        
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li class="off-canvas__nav__section">
          <strong>
           2개국어
          </strong>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [ahref]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           [ahref]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           <a data-dictcode="english-german" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EB%8F%85%EC%9D%BC%EC%96%B4/" style="display: inline;" title="영어–독일어 사전">
            영어–독일어
           </a>
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           <a data-dictcode="indonesian-english" href="/ko/%EC%82%AC%EC%A0%84/%EC%9D%B8%EB%8F%84%EB%84%A4%EC%8B%9C%EC%95%84%EC%96%B4-%EC%98%81%EC%96%B4/" style="display: none;" title="인도네시아어–영어 사전">
            인도네시아어–영어
           </a>
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           [ahref]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           [ahref]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           <a data-dictcode="english-japanese" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%9D%BC%EB%B3%B8%EC%96%B4/" style="display: inline;" title="Cambridge English–Japanese Dictionary">
            영어–일본어
           </a>
           [ahref]
           
          </span>
         </li>
         <li class="off-canvas__nav__section">
          <strong>
           반 2개국어
          </strong>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%B2%B4%EC%BD%94%EC%9D%98/" title="English-Czech Dictionary">
           English–Czech
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
      </ul>
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [ahref]
      
     </li>
    </ul>
   </nav>
   <div class="off-canvas__pad">
    <p>
     <a class="btn btn--impact btn--bold loginBtn btn--forbidden">
      <i aria-hidden="true" class="fcdo fcdo-user">
      </i>
      로그인
     </a>
    </p>
    <div class="off-canvas__dropdown">
     [linkx]
     
     <div id="cdo-lang-opt-sideBarMenu" style="display: none;">
      <ul class="unstyled cdo-locale-selector">
       <li>
        [linkx]
        
        <li>
         [ahref]
         
         <li>
          <a href="/es/diccionario/ingles-coreano/umbrella" hreflang="es">
           Español
          </a>
          <li>
           [ahref]
           
           <li>
            [linkx]
            
            <li>
             [ahref]
             
             <li>
              [linkx]
              
              <li>
               [ahref]
               
               <li>
                [linkx]
                
                <li>
                 [ahref]
                 
                 <li>
                  [ahref]
                  
                  <li>
                   <a href="/pl/dictionary/english-korean/umbrella" hreflang="pl">
                    Polski
                   </a>
                   <li>
                    [ahref]
                    
                    <li>
                     [linkx]
                     
                     <li>
                      [linkx]
                      
                      <li>
                       [linkx]
                       
                      </li>
                     </li>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </li>
         </li>
        </li>
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <header class="cdo-hdr js-hdr" id="header">
   <div class="cdo-hdr__pre clrd">
    <div class="cdo-hdr__soc resp resp--lrg">
     <ul class="unstyled">
      <li>
       <b>
        팔로우
       </b>
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [linkx]
       
      </li>
     </ul>
    </div>
    <div class="cdo-hdr__profile">
     [ahref]
     
     <div class="dropdown dropdown--pad-a dropdown--right">
      <a class="hdr-btn ico-bg ico-bg--chevron js-toggle" data-target-selector="#cdo-lang-opt" href="">
       <i aria-hidden="true" class="fcdo fcdo-globe">
       </i>
       <span class="resp resp--lrg-i">
        한국어
       </span>
      </a>
      <div class="dropdown__box rounded" id="cdo-lang-opt">
       <ul class="unstyled cdo-locale-selector">
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
          [area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][mkey1][pkeyx][ahref][area1][keywordx][ahref][pkeyx][linkx][linkx][area1][mkey1][pkeyx][linkx][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1][linkx][area1][keywordx][ahref]
         
        </li>
        <li>
         Português[pkeyx]<li>[area1][mkey1]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/pl/dictionary/english-korean/umbrella" hreflang="pl">
          Polski
         </a>
        </li>
        <li>
         <a href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/umbrella" hreflang="ko">
          한국어
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
      </div>
     </div>
     [ahref]
     
    </div>
    [linkx]
    
    [linkx]
    
    <nav class="cdo-hdr__nav resp resp--med" id="main-nav">
     <ul>
      <li class="active">
       [ahref]
       
      </li>
      <li>
       <a href="/ko/translate/">
        번역
       </a>
      </li>
      <li>
       [ahref]
       
      </li>
     </ul>
    </nav>
   </div>
   <div class="cdo-search" id="search_bar">
    [linkx]
    
    <form action="/ko/%EA%B2%80%EC%83%89/%EC%98%81%EC%96%B4/direct/" id="cdo-search-form">
     <div class="cdo-search__bar">
      <label class="accessibility" for="cdo-search-input">
       검색 용어
      </label>
      <div class="js-toggle" data-related-element="#search_bar">
      </div>
      <span class="cdo-search__controls">
       <button class="cdo-search__button" title="검색" type="submit">
        <i aria-hidden="true" class="fcdo fcdo-search">
        </i>
        <span class="accessibility">
         검색
        </span>
       </button>
       <button class="cdo-search__dataset js-toggle ico-bg-abs ico-bg--chevron" data-related-element="#search_bar" data-target-selector="#cdo-dataset">
        <span class="resp resp--med-i" id="cdo-search-current-dataset">
        </span>
        <i aria-hidden="true" class="fcdo fcdo-dataset">
        </i>
       </button>
      </span>
      <div class="cdo-search__mega-menu" id="cdo-dataset">
       <div class="pad-extra">
        <div class="cdo-search__mega-menu__canvas a--rev">
         <div class="cdo-search__mega-menu__col1">
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuRecent">
           최신 및 추천 단어
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuRecent">
           <ul id="cdo-dataset-prefered-list">
           </ul>
          </div>
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuDefinition">
           정의와 문법
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuDefinition">
           <p>
            자연스러운 문어체 영어와 구어체 영어에 대한 명확한 설명[area1][keywordx][area1][keywordx][ahref][area1][mkey1][pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][mkey1][ahref][area1][mkey1][area1][keywordx]
           </p>
           <ul>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]<li>[linkx]</li><li>[linkx]</li><li>[area1][keywordx]</li>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
         <div class="cdo-search__mega-menu__col2">
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuTranslation">
           번역
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuTranslation">
           <div class="h3">
            2개국어 사전
           </div>
           <p>
            변역 방향을 바꾸려면 화살표를 클릭하십시오.
           </p>
           <ul>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [ahref]
              
              [linkx]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [linkx]
              
              [linkx]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [ahref]
              
              [linkx]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [linkx]
              
              [linkx]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [ahref]
              
              [linkx]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [linkx]
              
              <a data-dictcode="polish-english" href="#" style="display: none;" title="폴란드어-영어 사전 ">
               폴란드어–영어
              </a>
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [ahref]
              
              [ahref]
              
             </span>
            </li>
            <li>
             <span class="bilingual-switch pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
              <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
              </i>
             </span>
             <span>
              [ahref]
               <li>[area1][keywordx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][mkey1]</li><li>[ahref]</li><li>[area1][mkey1]</li>
              
              <a data-dictcode="japanese-english" href="#" style="display: none;" title="Japanese-English Dictionary">
               일본어–영어
              </a>
             </span>
            </li>
           </ul>
           <div class="h3">
            세미(Semi) 이중 외국어
           </div>
           <ul>
            <h3>
             [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
            </h3>
            <li>
             [linkx]
             
            </li>
            <li>
             <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[pkeyx][pkeyx][linkx][area1][mkey1]
            </li>
            <li>
             [linkx]
              [linkx][linkx][linkx][linkx][linkx][ahref][area1][keywordx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][pkeyx][area1][mkey1][pkeyx][area1][mkey1][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][area1][mkey1][area1][mkey1][ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
       <div class="cdo-search__mega-menu__foot">
        <span class="js-toggle pointer on" data-target-selector="#cdo-dataset">
         <i aria-hidden="true" class="fcdo fcdo-close" title="Close">
         </i>
        </span>
       </div>
      </div>
     </div>
     <div class="cdo-search__switches resp resp--sml">
     </div>
    </form>
   </div>
  </header>
  <div id="overlay">
  </div>
  <div class="am-default" id="ad_topslot_a">
  </div>
  <div class="contain cdo-tpl cdo-tpl-main cdo-tpl--entry">
   <div class="cdo-tpl__z cdo-tpl-main__z1">
    <div class="am-default" id="ad_leftslot">
    </div>
   </div>
   <article>
    <div class="cdo-tpl-main__zwA">
     <div class="am-default" id="ad_topslot_b">
     </div>
     <div class="cdo-tpl__z cdo-tpl-main__z2 clrd" id="page-content" role="main">
      <div class="entrybox english-korean entry-body" id="entryContent" itemscope="" itemtype="http://schema.org/WebPage" lang="en">
       <div itemprop="author" itemscope="" itemtype="http://schema.org/Organization">
        <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
       </div>
       <meta content="umbrella 번역: 우산. Cambridge 영어-한국어 사전 에서 자세히 알아보기." itemprop="headline"/>
       <meta content="© Cambridge University Press" itemprop="copyrightHolder"/>
       <meta content="2019" itemprop="copyrightYear"/>
       <meta content="ko" itemprop="inLanguage"/>
       <meta content="Gloves &amp; accessories" itemprop="genre"/>
       <meta content="Classifying and creating order" itemprop="genre"/>
       <div class="cdo-dblclick-area">
        <div class="entry-body">
         <h1 class="hw">
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h1>
         <span class="di-body">
          <div class="di $dict entry-body__el entry-body__el--smalltop clrd js-share-holder" itemprop="text">
           <div class="di-head normal-entry">
            <div class="h3 di-title cdo-section-title-hw">
             umbrella<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
            </div>
            <div class="share rounded js-share">
             <span class="point">
             </span>
             [ahref]
             
             <a class="circle bg--tw socialShareLink" data-object="entry" data-social="twitter" data-url="https://twitter.com/intent/tweet?url=https%3A%2F%2Fdictionary.cambridge.org%2Fko%2F%25EC%2582%25AC%25EC%25A0%2584%2F%25EC%2598%2581%25EC%2596%25B4-%25ED%2595%259C%25EA%25B5%25AD%25EC%2596%25B4%2Fumbrella&amp;text=umbrella+%7C+%EC%98%81%EC%96%B4%EB%A5%BC+%ED%95%9C%EA%B5%AD%EC%96%B4%EB%A1%9C+%EB%B2%88%EC%97%AD%3A+Cambridge+Dictionary" href="/intent/tweet?url=https%3A%2F%2Fdictionary.cambridge.org%2Fko%2F%25EC%2582%25AC%25EC%25A0%2584%2F%25EC%2598%2581%25EC%2596%25B4-%25ED%2595%259C%25EA%25B5%25AD%25EC%2596%25B4%2Fumbrella&amp;text=umbrella+%7C+%EC%98%81%EC%96%B4%EB%A5%BC+%ED%95%9C%EA%B5%AD%EC%96%B4%EB%A1%9C+%EB%B2%88%EC%97%AD%3A+Cambridge+Dictionary" target="_blank" title="이 항목 트윗">
              <i aria-hidden="true" class="fcdo fcdo-twitter">
               <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li><li>[area1][mkey1]</li><li>[area1][keywordx]</li>[linkx]
              </i>
             </a>
             [ahref]
             
             <div class="oflow-hide js-share-toggle">
              [linkx]
              
              [linkx]
              
              [linkx]
              
              [ahref]
              
             </div>
            </div>
           </div>
           <div class="di-body normal-entry-body">
            <span class="entry-body">
             <div class="pos-block">
              <div class="pos-head">
               <div class="pos-info">
                <span class="posgram ico-bg">
                 <span class="pos">
                  noun
                 </span>
                </span>
                <span class="pron-info">
                 <span class="uk">
                  <span class="region">
                   uk
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron/u/uku/ukugl/ukuglin029.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron_ogg/u/uku/ukugl/ukuglin029.ogg" title="umbrella: listen to British English pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   ʌmˈbrel·ə
                  </span>
                  /
                 </span>
                </span>
                <span class="pron-info">
                 <span class="us">
                  <span class="region">
                   us
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron/u/umb/umbre/umbrella.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron_ogg/u/umb/umbre/umbrella.ogg" title="umbrella: listen to American pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  <li>[area1][keywordx]</li><li>[area1][mkey1]</li>[ahref]<li>[ahref]</li>[pkeyx]
                 </span>
                </span>
               </div>
              </div>
              <div class="pos-body">
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00007295_01">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="epp-xref">
                     A2
                    </span>
                   </span>
                   <b class="def">
                    a thing that you
                    <a class="query" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/hold" title="hold">
                     hold
                    </a>
                    above
                    [linkx]
                    
                    [linkx]
                    
                    to
                    [linkx]
                    
                    yourself
                    [linkx]
                    
                    when it is raining
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    우산
                   </span>
                  </span>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </span>
           </div>
          </div>
         </span>
         <div class="definition-src">
          <p>
           <small>
            (
            [ahref]
            
            의 “umbrella” 번역 © Cambridge University Press)
           </small>
          </p>
         </div>
        </div>
       </div>
       <div class="clrd mod mod--style5 mod--dark mod-translate">
        <div class="pad mod-translate__lang round-right-aft" id="translations">
         <div>
          <h2 class="h3">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
         </div>
         <div class="translate__options dropdown dropdown--pad-a dropdown--white">
          <span class="btn btn--dropdown js-toggle" data-target-selector="#cdo-translation-opt" id="cdo-translation-current">
          </span>
          <div class="dropdown__box rounded" id="cdo-translation-opt">
           <ul class="unstyled">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <a data-dataset="english-arabic" href="#">
              아랍어
             </a>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a data-dataset="english-danish" href="#">
              in Danish
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][linkx][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][keywordx][area1][keywordx][ahref]
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <a data-dataset="english-norwegian" href="#">
              in Norwegian
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
         <ul class="unstyled" id="cdo-translation-val">
          <li data-dataset="english-chinese-traditional">
           [ahref]
           
          </li>
          <li data-dataset="english-japanese">
           [linkx]
           
          </li>
          <li data-dataset="english-french">
           [linkx]
           
          </li>
          <li data-dataset="english-catalan">
           [ahref]
           
          </li>
          <li data-dataset="english-arabic">
           [linkx]
           
          </li>
          <li data-dataset="english-czech">
           <a class="helper ico-bg-abs ico-bg--arrow-end" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%B2%B4%EC%BD%94%EC%9D%98/umbrella" title="umbrella: Czech translation">
            <span class="point">
            </span>
            <p class="flush">
             deštník…
            </p>
           </a>
          </li>
          <li data-dataset="english-danish">
           [linkx]
           
          </li>
          <li data-dataset="english-spanish-cup">
           [ahref]
           
          </li>
          <li data-dataset="english-indonesian">
           [ahref]
           
          </li>
          <li data-dataset="english-thai">
           [ahref]
           
          </li>
          <li data-dataset="english-vietnamese">
           [linkx]
           
          </li>
          <li data-dataset="english-polish">
           [linkx]
           
          </li>
          <li data-dataset="english-malaysian">
           [linkx]
           
          </li>
          <li data-dataset="turkish">
           [linkx]
           
          </li>
          <li data-dataset="english-german">
           [linkx]
           
          </li>
          <li data-dataset="english-norwegian">
           [linkx]
           
          </li>
          <li data-dataset="english-portuguese">
           [ahref]
           
          </li>
          <li data-dataset="english-chinese-simplified">
           [linkx]
           
          </li>
          <li data-dataset="english-italian">
           [ahref]
           
          </li>
          <li data-dataset="english-russian">
           [linkx]
           
          </li>
          <li data-dataset="english-spanish">
           <a class="helper ico-bg-abs ico-bg--arrow-end" href="/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%EC%8A%A4%ED%8E%98%EC%9D%B8%EC%96%B4/umbrella" title="umbrella 스페인어 번역">
            <span class="point">
            </span>
            <p class="flush">
             paraguas…
            </p>
           </a>
          </li>
         </ul>
        </div>
        <div class="txt-block txt-block--padder mod-translate__tool round-right">
         <div class="h3">
          번역가가 필요한가요?
         </div>
         <p>
          [linkx]
          
         </p>
         <p>
          빨리 무료로 번역을 받아 보세요!
         </p>
        </div>
       </div>
      </div>
      <div class="clrd">
       <div class="oflow-hide">
        <div class="mod mod--border mod-browser">
         <div class="mod-browser__title center">
          <div class="center-y lower">
           <h2 class="h3">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
          </div>
         </div>
         <div class="oflow-hide scroller scroller--blur js-scroller grad-trans-pseudo">
          <div class="scroller__content js-scroller-content">
           <ul class="unstyled a--b a--rev a--alt">
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             <span class="entry_title">
              <span class="results">
               <span class="base">
                <b class="hw">
                 umbrella
                </b>
               </span>
              </span>
             </span>
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="clrd">
       <div class="mod float-xl">
        <div class="am-default" id="ad_btmslot_a">
        </div>
        <div class="am-default" id="ad_houseslot_b">
        </div>
       </div>
      </div>
     </div>
     <div class="cdo-tpl__z cdo-tpl-main__z3 clrd">
      <div class="mod mod--style1 pad">
       <[keywordx]>
       </[keywordx]>
      </div>
      <div class="am-default" id="ad_rightslot">
      </div>
      <div class="am-default" id="ad_houseslot_a">
      </div>
      <div class="mod mod--dark mod--style2 oflow-hide">
       <div class="pad">
        <p class="h2 semi-flush alt">
         오늘의 단어
        </p>
        <p class="h4 feature-w-big wotd-hw">
         juvenile
        </p>
        <p>
         relating to a young person who is not yet old enough to be considered an adult
        </p>
       </div>
       <div class="txt-block txt-block--alt with-icons js-eqh-sticky">
        [ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </div>
      </div>
      <div class="cols cols--half">
       <div class="'cols__col'">
        <div class="mod mod--border">
         [linkx]
         
         <div class="pad">
          <p class="h2 semi-flush">
           블로그
          </p>
          <p class="leader semi-flush">
           [linkx]
           
          </p>
          <p class="meta">
           <small class="smaller">
            <time>
             August 07, 2019
            </time>
           </small>
          </p>
         </div>
         [ahref]
         
        </div>
       </div>
       <div class="'cols__col'">
        <div class="mod mod--dark mod--border mod--style3">
         [ahref]
         
         <div class="pad">
          <p class="h2 alt semi-flush">
           최신 단+C1165어
          </p>
          <p class="h4 feature-w semi-flush nw-hw">
           <a class="a--alt a--rev" href="/2019/08/12/new-words-12-august-2019/" target="_blank">
            microstress noun
           </a>
          </p>
          <p>
           <small class="smaller">
            <time>
             August 12, 2019<li>[area1][mkey1]</li>[linkx]<li>[ahref]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
            </time>
           </small>
          </p>
         </div>
         [ahref]
         
        </div>
       </div>
      </div>
     </div>
    </div>
   </article>
  </div>
  <div class="cdo-promo">
   <div class="contain">
    <div class="cols">
     <div class="cols__col spr-b spr--promo-widget">
      [ahref]
      
     </div>
     <div class="cols__col spr-b spr--promo-apps">
      [ahref]
      
     </div>
    </div>
   </div>
  </div>
  <footer class="ftr clr" id="footer">
   <div class="contain">
    <div class="ftr__nav">
     <nav>
      <ul class="cols unstyled unstyled-nest ftr__links">
       <li class="cols__col">
        [ahref]
        
        <ul>
         <li class="resp-hide--sml">
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li class="cols__col">
        [linkx]
        
        <ul>
         <li class="resp-hide--sml">
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li class="cols__col">
        [linkx]
        
        <ul>
         <li class="resp-hide--sml">
          <a href="/ko/about.html">
           정보
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
           <li>[ahref]</li><li>[area1][mkey1]</li>[ahref][area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </li>
      </ul>
     </nav>
    </div>
    <div class="ftr__follow">
     [linkx]
     
     [ahref]
     
    </div>
    <div class="ftr__copy">
     [ahref]
     
     <p>
      © Cambridge University Press 2019
     </p>
    </div>
   </div>
  </footer>
  <div class="overlay js-overlay">
  </div>
  <ul class="unstyled notification banner">
  </ul>
  <ul class="unstyled notification popup">
  </ul>
  <noscript>
  </noscript>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0151
  </b>
 </body>
</html>
|<---