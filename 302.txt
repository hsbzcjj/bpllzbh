--->|<!DOCTYPE html>
<html lang="ko" xml:lang="ko" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="lg0qcRkaLtMeKJcXsOLoptzK-2MIRJzuEtiYHZf_O2Y" name="google-site-verification"/>
  <noscript>
  </noscript>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="https://dictionary.cambridge.org/ko/external/images/CDO_logo_120x120.jpg" property="og:image"/>
 </head>
 <body class="default_layout">
  <div itemscope="" itemtype="http://schema.org/Product" style="display: none;">
   <span itemprop="name">
    shoot | 영어를 한국어로 번역: Cambridge Dictionary
   </span>
   [ahref]
   
  </div>
  <div class="overlay js-nav-trig">
  </div>
  <div class="off-canvas">
   <span class="off-canvas__close js-nav-trig">
    <i class="fcdo fcdo-close">
    </i>
   </span>
   <div class="off-canvas__pad clrd">
    [linkx]
    
   </div>
   <nav class="off-canvas__nav js-menu">
    <ul>
     <li>
      [linkx]
      
      <ul>
       <li>
        [ahref]
        
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/ko/%EC%82%AC%EC%A0%84/essential-american-english">
           Essential American English
          </a>
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
        <ul>
         <li class="off-canvas__nav__section">
          <strong>
           2개국어
          </strong>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [linkx]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [ahref]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [ahref]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [linkx]
           
          </span>
         </li>
         <li>
          <span class="pointer js-toggle-children" data-target-selector="next" title="언어 방향 바꾸기">
           <i aria-hidden="true" class="fcdo fcdo-exchange fcdo--nudge">
           </i>
          </span>
          <span>
           [ahref]
           
           [ahref]
           
          </span>
         </li>
         <li class="off-canvas__nav__section">
          <strong>
           반 2개국어
          </strong>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <li>[linkx]</li>[pkeyx][linkx]
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
           [area1][mkey1]<li>[area1][keywordx]</li><li>[ahref]</li>
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
      </ul>
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [ahref]
      
     </li>
    </ul>
   </nav>
   <div class="off-canvas__pad">
    <p>
     [linkx]
     
    </p>
    <div class="off-canvas__dropdown">
     [linkx]
     
     <div id="cdo-lang-opt-sideBarMenu" style="display: none;">
      <ul class="unstyled cdo-locale-selector">
       <li>
        [linkx]
        
        <li>
         [ahref]
         
         <li>
          [ahref]
          
          <li>
           [linkx]
           
           <li>
            [ahref]
            
            <li>
             [linkx]
             
             <li>
              [linkx]
              
              <li>
               [linkx]
               
               <li>
                [linkx]
                
                <li>
                 [ahref]
                 
                 <li>
                  [ahref]
                  
                  <li>
                   [linkx]
                   
                   <li>
                    [linkx]
                    
                    <li>
                     [ahref]
                     
                     <li>
                      [linkx]
                      
                      <li>
                       [ahref]
                       
                      </li>
                     </li>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </li>
         </li>
        </li>
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <header class="cdo-hdr js-hdr" id="header">
   <div class="cdo-hdr__pre clrd">
    <div class="cdo-hdr__soc resp resp--lrg">
     <ul class="unstyled">
      <li>
       <b>
        팔로우
       </b>
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
       
      </li>
     </ul>
    </div>
    <div class="cdo-hdr__profile">
     [linkx]
     
     <div class="dropdown dropdown--pad-a dropdown--right">
      [linkx]
      
      <div class="dropdown__box rounded" id="cdo-lang-opt">
       <ul class="unstyled cdo-locale-selector">
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [area1][keywordx][area1][mkey1][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx]
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
     [ahref]
     
    </div>
    [linkx]
    
    [ahref]
    
    <nav class="cdo-hdr__nav resp resp--med" id="main-nav">
     <ul>
      <li class="active">
       [ahref]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [ahref]
       
      </li>
     </ul>
    </nav>
   </div>
   <div class="cdo-search" id="search_bar">
    [ahref]
    
    <form action="/ko/%EA%B2%80%EC%83%89/%EC%98%81%EC%96%B4/direct/" id="cdo-search-form">
     <div class="cdo-search__bar">
      <label class="accessibility" for="cdo-search-input">
       검색 용어
      </label>
      <div class="js-toggle" data-related-element="#search_bar">
      </div>
      <span class="cdo-search__controls">
       <button class="cdo-search__button" title="검색" type="submit">
        <i aria-hidden="true" class="fcdo fcdo-search">
        </i>
        <span class="accessibility">
         검색
        </span>
       </button>
       <button class="cdo-search__dataset js-toggle ico-bg-abs ico-bg--chevron" data-related-element="#search_bar" data-target-selector="#cdo-dataset">
        <span class="resp resp--med-i" id="cdo-search-current-dataset">
        </span>
        <i aria-hidden="true" class="fcdo fcdo-dataset">
        </i>
       </button>
      </span>
      <div class="cdo-search__mega-menu" id="cdo-dataset">
       <div class="pad-extra">
        <div class="cdo-search__mega-menu__canvas a--rev">
         <div class="cdo-search__mega-menu__col1">
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuRecent">
           최신 및 추천 단어
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuRecent">
           <ul id="cdo-dataset-prefered-list">
           </ul>
          </div>
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuDefinition">
           정의와 문법
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuDefinition">
           <p>
            자연스러운 문어체 영어와 구어체 영어에 대한 명확한 설명
           </p>
           <ul>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
         <div class="cdo-search__mega-menu__col2">
          <div class="h2 js-toggle" data-is-basic="1" data-target-selector="#megaMenuTranslation">
           번역
          </div>
          <div class="cdo-search__mega-menu__links" id="megaMenuTranslation">
           <div class="h3">
            2개국어 사전
           </div>
           <p>
            변역 방향을 바꾸려면 화살표를 클릭하십시오.
           </p>
           <ul>
            <li>[area1][keywordx]</li><li>[ahref]</li><li>[linkx]</li>
           </ul>
           <div class="h3">
            세미(Semi) 이중 외국어
           </div>
           <ul>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
              [area1][mkey1]<li>[area1][keywordx]</li>[linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref][area1][mkey1][area1][mkey1]
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
       <div class="cdo-search__mega-menu__foot">
        <span class="js-toggle pointer on" data-target-selector="#cdo-dataset">
         <i aria-hidden="true" class="fcdo fcdo-close" title="Close">
         </i>
        </span>
       </div>
      </div>
     </div>
     <div class="cdo-search__switches resp resp--sml">
     </div>
    </form>
   </div>
  </header>
  <div id="overlay">
  </div>
  <div class="am-default" id="ad_topslot_a">
  </div>
  <div class="contain cdo-tpl cdo-tpl-main cdo-tpl--entry">
   <div class="cdo-tpl__z cdo-tpl-main__z1">
    <div class="am-default" id="ad_leftslot">
    </div>
   </div>
   <article>
    <div class="cdo-tpl-main__zwA">
     <div class="am-default" id="ad_topslot_b">
     </div>
     <div class="cdo-tpl__z cdo-tpl-main__z2 clrd" id="page-content" role="main">
      <div class="entrybox english-korean entry-body" id="entryContent" itemscope="" itemtype="http://schema.org/WebPage" lang="en">
       <div itemprop="author" itemscope="" itemtype="http://schema.org/Organization">
        <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
       </div>
       <meta content="shoot 번역: 총을 쏘아 죽이다, 다치게 하다, 총을 쏘다, (경기에서) 슛을하다, 잽싸게 움직이다, 새순. Cambridge 영어-한국어 사전 에서 자세히 알아보기." itemprop="headline"/>
       <meta content="© Cambridge University Press" itemprop="copyrightHolder"/>
       <meta content="2019" itemprop="copyrightYear"/>
       <meta content="ko" itemprop="inLanguage"/>
       <meta content="Murder &amp; attempted murder" itemprop="genre"/>
       <meta content="Cinema - general words" itemprop="genre"/>
       <meta content="Guns" itemprop="genre"/>
       <meta content="Running away and escaping" itemprop="genre"/>
       <meta content="Damaging and spoiling" itemprop="genre"/>
       <meta content="Questioning people &amp; asking questions in general" itemprop="genre"/>
       <meta content="Fighting" itemprop="genre"/>
       <meta content="Delivering and despatching" itemprop="genre"/>
       <meta content="Basketball, netball &amp; volleyball" itemprop="genre"/>
       <meta content="Not showing careful thought" itemprop="genre"/>
       <meta content="New growth in plants" itemprop="genre"/>
       <meta content="Punishing &amp; punishments" itemprop="genre"/>
       <meta content="Hunting &amp; fishing" itemprop="genre"/>
       <meta content="Becoming bigger" itemprop="genre"/>
       <meta content="Departing" itemprop="genre"/>
       <meta content="Drugs - general words" itemprop="genre"/>
       <meta content="Using the eyes" itemprop="genre"/>
       <meta content="Informal talking &amp; conversation" itemprop="genre"/>
       <meta content="General terms used in ball sports" itemprop="genre"/>
       <meta content="Card games" itemprop="genre"/>
       <meta content="Snooker, pool &amp; billiards" itemprop="genre"/>
       <meta content="Moving quickly" itemprop="genre"/>
       <meta content="Chastising &amp; rebuking" itemprop="genre"/>
       <meta content="Ways of talking" itemprop="genre"/>
       <meta content="Increasing and intensifying" itemprop="genre"/>
       <meta content="Detonation &amp; bombardment" itemprop="genre"/>
       <meta content="Expressing and asking opinions" itemprop="genre"/>
       <meta content="Blunt and direct in speech &amp; behaviour" itemprop="genre"/>
       <meta content="Refusing &amp; rejecting" itemprop="genre"/>
       <meta content="Hurrying and doing things quickly" itemprop="genre"/>
       <meta content="Causing difficulties for oneself or others" itemprop="genre"/>
       <meta content="Trying and making an effort" itemprop="genre"/>
       <meta content="Photography" itemprop="genre"/>
       <div class="cdo-dblclick-area">
        <div class="entry-body">
         <h1 class="hw">
          [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
         </h1>
         <span class="di-body">
          <div class="di $dict entry-body__el entry-body__el--smalltop clrd js-share-holder" itemprop="text">
           <div class="di-head normal-entry">
            <div class="h3 di-title cdo-section-title-hw">
             shoot
            </div>
            <div class="share rounded js-share">
             <span class="point">
             </span>
             [linkx]
             
             [ahref]
             
             [ahref]
             
             <div class="oflow-hide js-share-toggle">
              [linkx]
              
              [linkx]
              
              [ahref]
              
              [ahref]
              
             </div>
            </div>
           </div>
           <div class="di-body normal-entry-body">
            <span class="entry-body">
             <div class="pos-block">
              <div class="pos-head">
               <div class="pos-info">
                <span class="posgram ico-bg">
                 <span class="pos">
                  verb
                 </span>
                </span>
                <span class="pron-info">
                 <span class="uk">
                  <span class="region">
                   uk
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron/u/ukc/ukchu/ukchurc008.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron_ogg/u/ukc/ukchu/ukchurc008.ogg" title="shoot: listen to British English pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   ʃuːt
                  </span>
                  /
                 </span>
                </span>
                <span class="pron-info">
                 <span class="us">
                  <span class="region">
                   us
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron/c/chu/chute/chute.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron_ogg/c/chu/chute/chute.ogg" title="shoot: listen to American pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  [area1][keywordx]<li>[ahref]</li><li>[area1][keywordx]</li>
                 </span>
                </span>
                <span class="irreg-infls">
                 <span class="inf-group">
                  <span class="lab">
                   past tense and past participle
                  </span>
                  <span class="inf">
                   shot
                  </span>
                 </span>
                </span>
               </div>
              </div>
              <div class="pos-body">
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006166_01">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="epp-xref">
                     B1
                    </span>
                   </span>
                   <b class="def">
                    to
                    [linkx]
                    
                    or
                    [linkx]
                    
                    a
                    [linkx]
                    
                    or
                    [linkx]
                    
                    by
                    [ahref]
                    
                    a
                    [linkx]
                    
                    from a
                    [ahref]
                    
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    총을 쏘아 죽이다, 다치게 하다
                   </span>
                   <div class="examp emphasized">
                    <li>[area1][keywordx]</li>[area1][mkey1][linkx]<li>[ahref]</li>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006166_02">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="epp-xref">
                     B1
                    </span>
                   </span>
                   <b class="def">
                    to
                    [ahref]
                    
                    a
                    [linkx]
                    
                    from a
                    [ahref]
                     [linkx]<li>[area1][mkey1]</li>[linkx]
                    
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    총을 쏘다
                   </span>
                   <div class="examp emphasized">
                    <span class="eg">
                     Don’t shoot!
                    </span>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006166_03">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="epp-xref">
                     B1
                    </span>
                   </span>
                   <b class="def">
                    to
                    [ahref]
                    
                    to
                    [linkx]
                    
                    [linkx]
                    
                    in some
                    [ahref]
                    
                    by
                    [ahref]
                    
                    ,
                    [ahref]
                    
                    , or
                    [ahref]
                    
                    the
                    [linkx]
                     <li>[area1][keywordx]</li>[area1][mkey1]<li>[linkx]</li><li>[linkx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
                    
                    towards the
                    [ahref]
                    
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    (경기에서) 슛을하다
                   </span>
                   <div class="examp emphasized">
                    <span class="eg">
                     He shot from the
                     [ahref]
                     
                     of the
                     [linkx]
                     
                     and
                     [linkx]
                     
                     to
                     [linkx]
                     
                     .
                    </span>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006166_04">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="freq">
                     ›
                    </span>
                   </span>
                   <b class="def">
                    to
                    [linkx]
                    
                    [linkx]
                    
                    very
                    [linkx]
                    
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    잽싸게 움직이다
                   </span>
                   <div class="examp emphasized">
                    <span class="eg">
                     She shot out of the
                     [linkx]
                     
                     .
                    </span>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class="pos-block">
              <div class="pos-head">
               <div class="pos-info">
                <span class="posgram ico-bg">
                 <span class="pos">
                  noun
                 </span>
                </span>
                <span class="pron-info">
                 <span class="uk">
                  <span class="region">
                   uk
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron/u/ukc/ukchu/ukchurc008.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/uk_pron_ogg/u/ukc/ukchu/ukchurc008.ogg" title="shoot: listen to British English pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   ʃuːt
                  </span>
                  /
                 </span>
                </span>
                <span class="pron-info">
                 <span class="us">
                  <span class="region">
                   us
                  </span>
                  <span class="circle circle-btn sound audio_play_button" data-src-mp3="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron/c/chu/chute/chute.mp3" data-src-ogg="/ko/media/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/us_pron_ogg/c/chu/chute/chute.ogg" title="shoot: listen to American pronunciation">
                   <i class="fcdo fcdo-volume-up">
                    ​
                   </i>
                  </span>
                 </span>
                 <span class="pron">
                  /
                  <span class="ipa">
                   ʃut
                  </span>
                  /
                 </span>
                </span>
               </div>
              </div>
              <div class="pos-body">
               <div class="sense-block">
                <div class="sense-body">
                 <div class="def-block pad-indent" data-wl-senseid="ID_00006166_05">
                  <p class="def-head semi-flush">
                   <span class="def-info">
                    <span class="freq">
                     ›
                    </span>
                   </span>
                   <b class="def">
                    a new
                    [linkx]
                    
                    or
                    [linkx]
                    
                    [ahref]
                    
                    on a
                    [linkx]
                    
                   </b>
                  </p>
                  <span class="def-body">
                   <span class="trans" lang="ko">
                    새순
                   </span>
                   <div class="examp emphasized">
                    <span class="eg">
                     [linkx]
                     
                     shoots
                    </span>
                   </div>
                  </span>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </span>
           </div>
          </div>
         </span>
         <div class="definition-src">
          <p>
           <small>
            (
            [ahref]
            
            의 “shoot” 번역 © Cambridge University Press)
           </small>
          </p>
         </div>
        </div>
       </div>
       <div class="clrd mod mod--style5 mod--dark mod-translate">
        <div class="pad mod-translate__lang round-right-aft" id="translations">
         <div>
          <h2 class="h3">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
         </div>
         <div class="translate__options dropdown dropdown--pad-a dropdown--white">
          <span class="btn btn--dropdown js-toggle" data-target-selector="#cdo-translation-opt" id="cdo-translation-current">
          </span>
          <div class="dropdown__box rounded" id="cdo-translation-opt">
           <ul class="unstyled">
            <li>
             [ahref]
             
            </li>
            <li>
             [area1][keywordx][area1][keywordx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][ahref][linkx][linkx][area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][ahref][area1][keywordx]
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
         <ul class="unstyled" id="cdo-translation-val">
          <li data-dataset="english-chinese-traditional">
           [linkx]
           
          </li>
          <li data-dataset="english-japanese">
           [ahref]
           
          </li>
          <li data-dataset="english-french">
           [ahref]
           
          </li>
          <li data-dataset="english-catalan">
           [linkx]
           
          </li>
          <li data-dataset="english-arabic">
           [linkx]
           
          </li>
          <li data-dataset="english-czech">
           [linkx]
           
          </li>
          <li data-dataset="english-danish">
           [linkx]
           
          </li>
          <li data-dataset="english-spanish-cup">
           [ahref]
           
          </li>
          <li data-dataset="english-indonesian">
           [ahref][area1][mkey1][area1][mkey1][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
          </li>
          <li data-dataset="english-thai">
           [linkx]
           
          </li>
          <li data-dataset="english-vietnamese">
           [linkx]
           
          </li>
          <li data-dataset="english-polish">
           [linkx]
           
          </li>
          <li data-dataset="english-malaysian">
           [ahref]
           
          </li>
          <li data-dataset="turkish">
           [ahref]
           
          </li>
          <li data-dataset="english-german">
           [ahref]
           
          </li>
          <li data-dataset="english-norwegian">
           [ahref]
           
          </li>
          <li data-dataset="english-portuguese">
           [ahref]
           
          </li>
          <li data-dataset="english-chinese-simplified">
           [ahref]
           
          </li>
          <li data-dataset="english-italian">
           [linkx]
           
          </li>
          <li data-dataset="english-russian">
           [linkx]
           
          </li>
          <li data-dataset="english-spanish">
           [ahref]
           
          </li>
         </ul>
        </div>
        <div class="txt-block txt-block--padder mod-translate__tool round-right">
         <div class="h3">
          번역가가 필요한가요?
         </div>
         <p>
          <a class="btn btn--impact btn--translate shadow--dark" href="/ko/translate/">
           번역기 툴
          </a>
         </p>
         <p>
          빨리 무료로 번역을 받아 보세요!
         </p>
        </div>
       </div>
      </div>
      <div class="clrd">
       <div class="oflow-hide">
        <div class="mod mod--border mod-browser">
         <div class="mod-browser__title center">
          <div class="center-y lower">
           <h2 class="h3">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
          </div>
         </div>
         <div class="oflow-hide scroller scroller--blur js-scroller grad-trans-pseudo">
          <div class="scroller__content js-scroller-content">
           <ul class="unstyled a--b a--rev a--alt">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             <span class="entry_title">
              <span class="results">
               <span class="base">
                <b class="hw">
                 shoot
                </b>
               </span>
              </span>
             </span>
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="clrd">
       <div class="mod float-xl">
        <div class="am-default" id="ad_btmslot_a">
        </div>
        <div class="am-default" id="ad_houseslot_b">
        </div>
       </div>
      </div>
     </div>
     <div class="cdo-tpl__z cdo-tpl-main__z3 clrd">
      <div class="mod mod--style1 pad">
       <div class="pad">
        <div class="h2 semi-flush">
         내 사전
        </div>
        <p>
         자신의 단어장과 문제를 만들어서 무료로 공유하세요!
        </p>
        <p>
         [ahref]
         
         [ahref]
         
        </p>
       </div>
      </div>
      <div class="am-default" id="ad_rightslot">
      </div>
      <div class="am-default" id="ad_houseslot_a">
      </div>
      <div class="mod mod--dark mod--style2 oflow-hide">
       <div class="pad">
        <p class="h2 semi-flush alt">
         오늘의 단어
        </p>
        <p class="h4 feature-w-big wotd-hw">
         juvenile
        </p>
        <p>
         relating to a young person who is not yet old enough to be considered an adult
        </p>
       </div>
       <div class="txt-block txt-block--alt with-icons js-eqh-sticky">
        <div class="with-icons__content">
         [ahref]
         
        </div>
        <div class="with-icons__icons">
         [ahref]
         
         [linkx]
         
        </div>
       </div>
      </div>
      <div class="cols cols--half">
       <div class="'cols__col'">
        <div class="mod mod--border">
         [linkx]
         
         <div class="pad">
          <p class="h2 semi-flush">
           블로그
          </p>
          <p class="leader semi-flush">
           [linkx]
           
          </p>
          <p class="meta">
           <small class="smaller">
            <time>
             August 07, 2019
            </time>
           </small>
          </p>
         </div>
         [ahref]
         
        </div>
       </div>
       <div class="'cols__col'">
        <div class="mod mod--dark mod--border mod--style3">
         [linkx]
         
         <div class="pad">
          <p class="h2 alt semi-flush">
           최신 단+C1165어
          </p>
          <p class="h4 feature-w semi-flush nw-hw">
           [ahref]
           
          </p>
          <p>
           <small class="smaller">
            <time>
             August 12, 2019
            </time>
           </small>
          </p>
         </div>
         [ahref]
         
        </div>
       </div>
      </div>
     </div>
    </div>
   </article>
  </div>
  <div class="cdo-promo">
   [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[pkeyx]</li><li>[ahref]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][mkey1]</li>
  </div>
  <footer class="ftr clr" id="footer">
   <div class="contain">
    [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][area1][keywordx][linkx][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][linkx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
   </div>
  </footer>
  <div class="overlay js-overlay">
  </div>
  <ul class="unstyled notification banner">
  </ul>
  <ul class="unstyled notification popup">
  </ul>
  <noscript>
  </noscript>
  <b style="color:black;background-color:#a0ffff">
   jnice08-ipp13-wa-za-0329
  </b>
 </body>
</html>
|<---